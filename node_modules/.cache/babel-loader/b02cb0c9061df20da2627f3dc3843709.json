{"ast":null,"code":"import _regeneratorRuntime from\"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import axios from'axios';export function uploadIPFSJSON(_x,_x2){return _uploadIPFSJSON.apply(this,arguments);}function _uploadIPFSJSON(){_uploadIPFSJSON=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(api,data){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",axios.post(\"\".concat(api,\"/ipfs-json-upload\"),data));case 1:case\"end\":return _context.stop();}}},_callee);}));return _uploadIPFSJSON.apply(this,arguments);}export function uploadIPFSFile(_x3,_x4){return _uploadIPFSFile.apply(this,arguments);}function _uploadIPFSFile(){_uploadIPFSFile=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(api,file){var formData;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:formData=new FormData();formData.append('file',file);return _context2.abrupt(\"return\",axios.post(\"\".concat(api,\"/ipfs-file-upload\"),formData));case 3:case\"end\":return _context2.stop();}}},_callee2);}));return _uploadIPFSFile.apply(this,arguments);}export function uploadIPFSImageWithThumbnail(_x5,_x6){return _uploadIPFSImageWithThumbnail.apply(this,arguments);}// URI Utils\nfunction _uploadIPFSImageWithThumbnail(){_uploadIPFSImageWithThumbnail=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(api,file){var formData;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:formData=new FormData();formData.append('file',file);return _context3.abrupt(\"return\",axios.post(\"\".concat(api,\"/ipfs-image-with-thumbnail-upload\"),formData));case 3:case\"end\":return _context3.stop();}}},_callee3);}));return _uploadIPFSImageWithThumbnail.apply(this,arguments);}export function isIpfsUri(uri){return /^ipfs:\\/\\/.+/.test(uri);}export function ipfsUriToCid(uri){var baseRegex=/^ipfs:\\/\\//;var ipfsRegex=new RegExp(baseRegex.source+'.+');if(ipfsRegex.test(uri)){return uri.replace(baseRegex,'');}return null;}export function ipfsUriToGatewayUrl(config,uri){var cid=ipfsUriToCid(uri);return cid?\"\".concat(config.ipfsGateway,\"/ipfs/\").concat(cid):uri;}export function uriToCid(uri){var ipfsUriCid=ipfsUriToCid(uri);if(ipfsUriCid){return ipfsUriCid;}var baseRegex=/^https:\\/\\/.*\\/ipfs\\//;var httpRegex=new RegExp(baseRegex.source+'.+');if(httpRegex.test(uri)){return uri.replace(baseRegex,'');}return null;}","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/src/lib/util/ipfs.ts"],"names":["axios","uploadIPFSJSON","api","data","post","uploadIPFSFile","file","formData","FormData","append","uploadIPFSImageWithThumbnail","isIpfsUri","uri","test","ipfsUriToCid","baseRegex","ipfsRegex","RegExp","source","replace","ipfsUriToGatewayUrl","config","cid","ipfsGateway","uriToCid","ipfsUriCid","httpRegex"],"mappings":"iTAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAcA,eAAsBC,CAAAA,cAAtB,uD,mGAAO,iBAA8BC,GAA9B,CAA2CC,IAA3C,kJACEH,KAAK,CAACI,IAAN,WAA4BF,GAA5B,sBAAoDC,IAApD,CADF,wD,iDAIP,eAAsBE,CAAAA,cAAtB,wD,mGAAO,kBAA8BH,GAA9B,CAA2CI,IAA3C,mIACCC,QADD,CACY,GAAIC,CAAAA,QAAJ,EADZ,CAELD,QAAQ,CAACE,MAAT,CAAgB,MAAhB,CAAwBH,IAAxB,EAFK,iCAGEN,KAAK,CAACI,IAAN,WAA4BF,GAA5B,sBAAoDK,QAApD,CAHF,0D,iDAMP,eAAsBG,CAAAA,4BAAtB,sEASA;+HATO,kBAA4CR,GAA5C,CAAyDI,IAAzD,mIACCC,QADD,CACY,GAAIC,CAAAA,QAAJ,EADZ,CAELD,QAAQ,CAACE,MAAT,CAAgB,MAAhB,CAAwBH,IAAxB,EAFK,iCAGEN,KAAK,CAACI,IAAN,WACFF,GADE,sCAELK,QAFK,CAHF,0D,+DAWP,MAAO,SAASI,CAAAA,SAAT,CAAmBC,GAAnB,CAAgC,CACrC,MAAO,gBAAeC,IAAf,CAAoBD,GAApB,CAAP,CACD,CAED,MAAO,SAASE,CAAAA,YAAT,CAAsBF,GAAtB,CAAmC,CACxC,GAAMG,CAAAA,SAAS,CAAG,YAAlB,CACA,GAAMC,CAAAA,SAAS,CAAG,GAAIC,CAAAA,MAAJ,CAAWF,SAAS,CAACG,MAAV,CAAmB,IAA9B,CAAlB,CACA,GAAIF,SAAS,CAACH,IAAV,CAAeD,GAAf,CAAJ,CAAyB,CACvB,MAAOA,CAAAA,GAAG,CAACO,OAAJ,CAAYJ,SAAZ,CAAuB,EAAvB,CAAP,CACD,CACD,MAAO,KAAP,CACD,CAGD,MAAO,SAASK,CAAAA,mBAAT,CAA6BC,MAA7B,CAAwDT,GAAxD,CAAqE,CAC1E,GAAMU,CAAAA,GAAG,CAAGR,YAAY,CAACF,GAAD,CAAxB,CACA,MAAOU,CAAAA,GAAG,WAAMD,MAAM,CAACE,WAAb,kBAAiCD,GAAjC,EAAyCV,GAAnD,CACD,CAED,MAAO,SAASY,CAAAA,QAAT,CAAkBZ,GAAlB,CAA+B,CACpC,GAAMa,CAAAA,UAAU,CAAGX,YAAY,CAACF,GAAD,CAA/B,CACA,GAAIa,UAAJ,CAAgB,CACd,MAAOA,CAAAA,UAAP,CACD,CACD,GAAMV,CAAAA,SAAS,CAAG,uBAAlB,CACA,GAAMW,CAAAA,SAAS,CAAG,GAAIT,CAAAA,MAAJ,CAAWF,SAAS,CAACG,MAAV,CAAmB,IAA9B,CAAlB,CACA,GAAIQ,SAAS,CAACb,IAAV,CAAeD,GAAf,CAAJ,CAAyB,CACvB,MAAOA,CAAAA,GAAG,CAACO,OAAJ,CAAYJ,SAAZ,CAAuB,EAAvB,CAAP,CACD,CACD,MAAO,KAAP,CACD","sourcesContent":["import axios from 'axios';\n\nexport interface IpfsContent {\n  cid: string;\n  size: number;\n  ipfsUri: string;\n  url: string;\n  publicGatewayUrl: string;\n}\n\nexport interface IpfsResponse extends IpfsContent {\n  thumbnail: IpfsContent;\n}\n\nexport async function uploadIPFSJSON(api: string, data: any) {\n  return axios.post<IpfsResponse>(`${api}/ipfs-json-upload`, data);\n}\n\nexport async function uploadIPFSFile(api: string, file: File) {\n  const formData = new FormData();\n  formData.append('file', file);\n  return axios.post<IpfsResponse>(`${api}/ipfs-file-upload`, formData);\n}\n\nexport async function uploadIPFSImageWithThumbnail(api: string, file: File) {\n  const formData = new FormData();\n  formData.append('file', file);\n  return axios.post<IpfsResponse>(\n    `${api}/ipfs-image-with-thumbnail-upload`,\n    formData\n  );\n}\n\n// URI Utils\n\nexport function isIpfsUri(uri: string) {\n  return /^ipfs:\\/\\/.+/.test(uri);\n}\n\nexport function ipfsUriToCid(uri: string) {\n  const baseRegex = /^ipfs:\\/\\//;\n  const ipfsRegex = new RegExp(baseRegex.source + '.+');\n  if (ipfsRegex.test(uri)) {\n    return uri.replace(baseRegex, '');\n  }\n  return null;\n}\n\nexport type IpfsGatewayConfig = { ipfsGateway: string };\nexport function ipfsUriToGatewayUrl(config: IpfsGatewayConfig, uri: string) {\n  const cid = ipfsUriToCid(uri);\n  return cid ? `${config.ipfsGateway}/ipfs/${cid}` : uri;\n}\n\nexport function uriToCid(uri: string) {\n  const ipfsUriCid = ipfsUriToCid(uri);\n  if (ipfsUriCid) {\n    return ipfsUriCid;\n  }\n  const baseRegex = /^https:\\/\\/.*\\/ipfs\\//;\n  const httpRegex = new RegExp(baseRegex.source + '.+');\n  if (httpRegex.test(uri)) {\n    return uri.replace(baseRegex, '');\n  }\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}