{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { readFileAsDataUrlAction } from '../async/actions'; // State\n\nexport const steps = ['file_upload', 'asset_details', 'confirm'];\nexport let CreateStatus;\n\n(function (CreateStatus) {\n  CreateStatus[\"Ready\"] = \"ready\";\n  CreateStatus[\"InProgress\"] = \"inProgress\";\n  CreateStatus[\"Complete\"] = \"complete\";\n})(CreateStatus || (CreateStatus = {}));\n\nexport const initialState = {\n  step: 'file_upload',\n  selectedFile: null,\n  displayImageFile: null,\n  uploadedArtifact: null,\n  fields: {\n    name: null,\n    description: null\n  },\n  attributes: [],\n  collectionAddress: null,\n  createStatus: CreateStatus.Ready\n}; // Async Thunks\n// Reducers & Slice\n\nconst slice = createSlice({\n  name: 'createNft',\n  initialState,\n  reducers: {\n    incrementStep(state) {\n      const stepIdx = steps.indexOf(state.step);\n\n      if (stepIdx + 1 < steps.length) {\n        state.step = steps[stepIdx + 1];\n      }\n    },\n\n    decrementStep(state) {\n      const stepIdx = steps.indexOf(state.step);\n\n      if (stepIdx > 0) {\n        state.step = steps[stepIdx - 1];\n      }\n    },\n\n    updateField(state, action) {\n      state.fields[action.payload.name] = action.payload.value;\n    },\n\n    updateSelectedFile(state, action) {\n      state.selectedFile = action.payload;\n    },\n\n    clearSelectedfile(state) {\n      state.selectedFile = null;\n    },\n\n    updateDisplayImageFile(state, action) {\n      state.displayImageFile = action.payload;\n    },\n\n    clearDisplayImagFile(state) {\n      state.displayImageFile = null;\n    },\n\n    addMetadataRow(state) {\n      state.attributes.push({\n        name: '',\n        value: ''\n      });\n    },\n\n    updateMetadataRowName(state, action) {\n      if (state.attributes[action.payload.key]) {\n        state.attributes[action.payload.key].name = action.payload.name;\n      }\n    },\n\n    updateMetadataRowValue(state, action) {\n      if (state.attributes[action.payload.key]) {\n        state.attributes[action.payload.key].value = action.payload.value;\n      }\n    },\n\n    deleteMetadataRow(state, action) {\n      state.attributes.splice(action.payload.key, 1);\n    },\n\n    selectCollection(state, action) {\n      state.collectionAddress = action.payload;\n    },\n\n    setCreateStatus(state, action) {\n      state.createStatus = action.payload;\n    },\n\n    clearForm() {\n      return initialState;\n    }\n\n  },\n  extraReducers: ({\n    addCase\n  }) => {\n    addCase(readFileAsDataUrlAction.fulfilled, (state, action) => {\n      if (action.payload.ns === 'createNft') {\n        state.selectedFile = action.payload.result;\n      }\n    });\n  }\n});\nexport const {\n  incrementStep,\n  decrementStep,\n  updateField,\n  updateSelectedFile,\n  clearSelectedfile,\n  updateDisplayImageFile,\n  addMetadataRow,\n  updateMetadataRowName,\n  updateMetadataRowValue,\n  deleteMetadataRow,\n  selectCollection,\n  setCreateStatus,\n  clearForm\n} = slice.actions;\nexport default slice;","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/src/reducer/slices/createNft.ts"],"names":["createSlice","readFileAsDataUrlAction","steps","CreateStatus","initialState","step","selectedFile","displayImageFile","uploadedArtifact","fields","name","description","attributes","collectionAddress","createStatus","Ready","slice","reducers","incrementStep","state","stepIdx","indexOf","length","decrementStep","updateField","action","payload","value","updateSelectedFile","clearSelectedfile","updateDisplayImageFile","clearDisplayImagFile","addMetadataRow","push","updateMetadataRowName","key","updateMetadataRowValue","deleteMetadataRow","splice","selectCollection","setCreateStatus","clearForm","extraReducers","addCase","fulfilled","ns","result","actions"],"mappings":"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","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { NftMetadataAttribute } from '../../lib/nfts/decoders';\nimport { readFileAsDataUrlAction } from '../async/actions';\n\n// State\n\ntype Step = 'file_upload' | 'asset_details' | 'collection_select' | 'confirm';\n\nexport const steps: Step[] = ['file_upload', 'asset_details', 'confirm'];\n\ninterface Fields {\n  name: string | null;\n  description: string | null;\n}\n\nexport enum CreateStatus {\n  Ready = 'ready',\n  InProgress = 'inProgress',\n  Complete = 'complete'\n}\n\nexport interface SelectedFile {\n  objectUrl: string;\n  name: string;\n  type: string;\n  size: number;\n}\n\nexport interface UploadedArtifact {\n  artifactUri: string;\n  thumbnailUri: string;\n}\n\nexport interface CreateNftState {\n  step: Step;\n  selectedFile: SelectedFile | null;\n  displayImageFile: SelectedFile | null;\n  uploadedArtifact: UploadedArtifact | null;\n  fields: Fields;\n  attributes: Array<NftMetadataAttribute>;\n  collectionAddress: string | null;\n  createStatus: CreateStatus;\n}\n\nexport const initialState: CreateNftState = {\n  step: 'file_upload',\n  selectedFile: null,\n  displayImageFile: null,\n  uploadedArtifact: null,\n  fields: {\n    name: null,\n    description: null\n  },\n  attributes: [],\n  collectionAddress: null,\n  createStatus: CreateStatus.Ready\n};\n\n// Async Thunks\n\n// Reducers & Slice\n\ntype UpdateFieldAction = PayloadAction<{ name: keyof Fields; value: string }>;\ntype UpdateRowNameAction = PayloadAction<{ key: number; name: string }>;\ntype UpdateRowValueAction = PayloadAction<{ key: number; value: string }>;\n\nconst slice = createSlice({\n  name: 'createNft',\n  initialState,\n  reducers: {\n    incrementStep(state) {\n      const stepIdx = steps.indexOf(state.step);\n      if (stepIdx + 1 < steps.length) {\n        state.step = steps[stepIdx + 1];\n      }\n    },\n    decrementStep(state) {\n      const stepIdx = steps.indexOf(state.step);\n      if (stepIdx > 0) {\n        state.step = steps[stepIdx - 1];\n      }\n    },\n    updateField(state, action: UpdateFieldAction) {\n      state.fields[action.payload.name] = action.payload.value;\n    },\n    updateSelectedFile(state, action: PayloadAction<SelectedFile>) {\n      state.selectedFile = action.payload;\n    },\n    clearSelectedfile(state) {\n      state.selectedFile = null;\n    },\n    updateDisplayImageFile(state, action: PayloadAction<SelectedFile>) {\n      state.displayImageFile = action.payload;\n    },\n    clearDisplayImagFile(state) {\n      state.displayImageFile = null;\n    },\n    addMetadataRow(state) {\n      state.attributes.push({ name: '', value: '' });\n    },\n    updateMetadataRowName(state, action: UpdateRowNameAction) {\n      if (state.attributes[action.payload.key]) {\n        state.attributes[action.payload.key].name = action.payload.name;\n      }\n    },\n    updateMetadataRowValue(state, action: UpdateRowValueAction) {\n      if (state.attributes[action.payload.key]) {\n        state.attributes[action.payload.key].value = action.payload.value;\n      }\n    },\n    deleteMetadataRow(state, action: PayloadAction<{ key: number }>) {\n      state.attributes.splice(action.payload.key, 1);\n    },\n    selectCollection(state, action: PayloadAction<string>) {\n      state.collectionAddress = action.payload;\n    },\n    setCreateStatus(state, action: PayloadAction<CreateStatus>) {\n      state.createStatus = action.payload;\n    },\n    clearForm() {\n      return initialState;\n    }\n  },\n  extraReducers: ({ addCase }) => {\n    addCase(readFileAsDataUrlAction.fulfilled, (state, action) => {\n      if (action.payload.ns === 'createNft') {\n        state.selectedFile = action.payload.result;\n      }\n    });\n  }\n});\n\nexport const {\n  incrementStep,\n  decrementStep,\n  updateField,\n  updateSelectedFile,\n  clearSelectedfile,\n  updateDisplayImageFile,\n  addMetadataRow,\n  updateMetadataRowName,\n  updateMetadataRowValue,\n  deleteMetadataRow,\n  selectCollection,\n  setCreateStatus,\n  clearForm\n} = slice.actions;\n\nexport default slice;\n"]},"metadata":{},"sourceType":"module"}