{"ast":null,"code":"import axios from 'axios';\nexport async function getBigMapKeys(config, id) {\n  let response;\n  let result = [];\n  let offset = 0;\n  const uri = `${config.bcd.api}/v1/bigmap/${config.network}/${id}/keys`;\n\n  do {\n    response = await axios.get(uri, {\n      params: {\n        offset\n      }\n    });\n    result.push(...response.data);\n    offset += 10;\n  } while (response.data.length === 10);\n\n  return result;\n}\nexport async function getContract(config, address) {\n  const uri = `${config.bcd.api}/v1/contract/${config.network}/${address}`;\n  const response = await axios.get(uri);\n  return response.data;\n}\nexport async function getContractStorage(config, address) {\n  const uri = `${config.bcd.api}/v1/contract/${config.network}/${address}/storage`;\n  const response = await axios.get(uri);\n  return response.data;\n}\nexport async function getWalletContracts(config, address) {\n  const uri = `${config.bcd.api}/v1/search?q=${address}&i=contract&n=${config.network}&g=0&s=0`;\n  const response = await axios.get(uri);\n  return response.data;\n}\nexport class BetterCallDev {\n  constructor(config) {\n    this.config = void 0;\n    this.config = config;\n  }\n\n  getBigMapKeys(id) {\n    return getBigMapKeys(this.config, id);\n  }\n\n  getContract(address) {\n    return getContract(this.config, address);\n  }\n\n  getContractStorage(address) {\n    return getContractStorage(this.config, address);\n  }\n\n  getWalletContracts(address) {\n    return getWalletContracts(this.config, address);\n  }\n\n}","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/src/lib/service/bcd.ts"],"names":["axios","getBigMapKeys","config","id","response","result","offset","uri","bcd","api","network","get","params","push","data","length","getContract","address","getContractStorage","getWalletContracts","BetterCallDev","constructor"],"mappings":"AAAA,OAAOA,KAAP,MAAqC,OAArC;AAGA,OAAO,eAAeC,aAAf,CAA6BC,MAA7B,EAA6CC,EAA7C,EAAyD;AAC9D,MAAIC,QAAJ;AACA,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,MAAM,GAAG,CAAb;AACA,QAAMC,GAAG,GAAI,GAAEL,MAAM,CAACM,GAAP,CAAWC,GAAI,cAAaP,MAAM,CAACQ,OAAQ,IAAGP,EAAG,OAAhE;;AACA,KAAG;AACDC,IAAAA,QAAQ,GAAG,MAAMJ,KAAK,CAACW,GAAN,CAAUJ,GAAV,EAAe;AAC9BK,MAAAA,MAAM,EAAE;AACNN,QAAAA;AADM;AADsB,KAAf,CAAjB;AAKAD,IAAAA,MAAM,CAACQ,IAAP,CAAY,GAAGT,QAAQ,CAACU,IAAxB;AACAR,IAAAA,MAAM,IAAI,EAAV;AACD,GARD,QAQSF,QAAQ,CAACU,IAAT,CAAcC,MAAd,KAAyB,EARlC;;AASA,SAAOV,MAAP;AACD;AAED,OAAO,eAAeW,WAAf,CAA2Bd,MAA3B,EAA2Ce,OAA3C,EAA4D;AACjE,QAAMV,GAAG,GAAI,GAAEL,MAAM,CAACM,GAAP,CAAWC,GAAI,gBAAeP,MAAM,CAACQ,OAAQ,IAAGO,OAAQ,EAAvE;AACA,QAAMb,QAAQ,GAAG,MAAMJ,KAAK,CAACW,GAAN,CAAUJ,GAAV,CAAvB;AACA,SAAOH,QAAQ,CAACU,IAAhB;AACD;AAED,OAAO,eAAeI,kBAAf,CAAkChB,MAAlC,EAAkDe,OAAlD,EAAmE;AACxE,QAAMV,GAAG,GAAI,GAAEL,MAAM,CAACM,GAAP,CAAWC,GAAI,gBAAeP,MAAM,CAACQ,OAAQ,IAAGO,OAAQ,UAAvE;AACA,QAAMb,QAAQ,GAAG,MAAMJ,KAAK,CAACW,GAAN,CAAUJ,GAAV,CAAvB;AACA,SAAOH,QAAQ,CAACU,IAAhB;AACD;AAED,OAAO,eAAeK,kBAAf,CAAkCjB,MAAlC,EAAkDe,OAAlD,EAAmE;AACxE,QAAMV,GAAG,GAAI,GAAEL,MAAM,CAACM,GAAP,CAAWC,GAAI,gBAAeQ,OAAQ,iBAAgBf,MAAM,CAACQ,OAAQ,UAApF;AACA,QAAMN,QAAQ,GAAG,MAAMJ,KAAK,CAACW,GAAN,CAAUJ,GAAV,CAAvB;AACA,SAAOH,QAAQ,CAACU,IAAhB;AACD;AAED,OAAO,MAAMM,aAAN,CAAoB;AAGzBC,EAAAA,WAAW,CAACnB,MAAD,EAAiB;AAAA,SAF5BA,MAE4B;AAC1B,SAAKA,MAAL,GAAcA,MAAd;AACD;;AAEDD,EAAAA,aAAa,CAACE,EAAD,EAAa;AACxB,WAAOF,aAAa,CAAC,KAAKC,MAAN,EAAcC,EAAd,CAApB;AACD;;AAEDa,EAAAA,WAAW,CAACC,OAAD,EAAkB;AAC3B,WAAOD,WAAW,CAAC,KAAKd,MAAN,EAAce,OAAd,CAAlB;AACD;;AAEDC,EAAAA,kBAAkB,CAACD,OAAD,EAAkB;AAClC,WAAOC,kBAAkB,CAAC,KAAKhB,MAAN,EAAce,OAAd,CAAzB;AACD;;AAEDE,EAAAA,kBAAkB,CAACF,OAAD,EAAkB;AAClC,WAAOE,kBAAkB,CAAC,KAAKjB,MAAN,EAAce,OAAd,CAAzB;AACD;;AArBwB","sourcesContent":["import axios, { AxiosResponse } from 'axios';\nimport { Config } from '../system';\n\nexport async function getBigMapKeys(config: Config, id: number) {\n  let response: AxiosResponse;\n  let result = [];\n  let offset = 0;\n  const uri = `${config.bcd.api}/v1/bigmap/${config.network}/${id}/keys`;\n  do {\n    response = await axios.get(uri, {\n      params: {\n        offset\n      }\n    });\n    result.push(...response.data);\n    offset += 10;\n  } while (response.data.length === 10);\n  return result;\n}\n\nexport async function getContract(config: Config, address: string) {\n  const uri = `${config.bcd.api}/v1/contract/${config.network}/${address}`;\n  const response = await axios.get(uri);\n  return response.data;\n}\n\nexport async function getContractStorage(config: Config, address: string) {\n  const uri = `${config.bcd.api}/v1/contract/${config.network}/${address}/storage`;\n  const response = await axios.get(uri);\n  return response.data;\n}\n\nexport async function getWalletContracts(config: Config, address: string) {\n  const uri = `${config.bcd.api}/v1/search?q=${address}&i=contract&n=${config.network}&g=0&s=0`;\n  const response = await axios.get(uri);\n  return response.data;\n}\n\nexport class BetterCallDev {\n  config: Config;\n\n  constructor(config: Config) {\n    this.config = config;\n  }\n\n  getBigMapKeys(id: number) {\n    return getBigMapKeys(this.config, id);\n  }\n\n  getContract(address: string) {\n    return getContract(this.config, address);\n  }\n\n  getContractStorage(address: string) {\n    return getContractStorage(this.config, address);\n  }\n\n  getWalletContracts(address: string) {\n    return getWalletContracts(this.config, address);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}