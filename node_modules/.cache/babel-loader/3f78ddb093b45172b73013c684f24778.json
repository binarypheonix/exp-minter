{"ast":null,"code":"import Joi from 'joi';\nexport const fileUploadSchema = Joi.object({\n  selectedFile: Joi.required().invalid(null)\n});\nexport const assetDetailsSchema = fileUploadSchema.append({\n  fields: Joi.object({\n    name: Joi.string().min(1).required(),\n    description: Joi.string().allow(null).allow('')\n  }),\n  metadataRows: Joi.array().items(Joi.object({\n    name: Joi.string().min(1).required(),\n    value: Joi.string().min(1).required()\n  }))\n});\nexport const collectionSelectSchema = assetDetailsSchema.append({\n  collectionAddress: Joi.string().required()\n});\n\nfunction isValid(schema, object) {\n  return !schema.validate(object, {\n    allowUnknown: true\n  }).error;\n}\n\nexport function validateCreateNftStep(state) {\n  switch (state.step) {\n    case 'file_upload':\n      return isValid(fileUploadSchema, state);\n\n    case 'asset_details':\n      return isValid(collectionSelectSchema, state);\n\n    case 'collection_select':\n      return isValid(collectionSelectSchema, state);\n\n    case 'confirm':\n      return isValid(collectionSelectSchema, state);\n\n    default:\n      return false;\n  }\n}\nexport function validateCreateNftForm(state) {\n  return isValid(collectionSelectSchema, state);\n}","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/src/reducer/validators/createNft.ts"],"names":["Joi","fileUploadSchema","object","selectedFile","required","invalid","assetDetailsSchema","append","fields","name","string","min","description","allow","metadataRows","array","items","value","collectionSelectSchema","collectionAddress","isValid","schema","validate","allowUnknown","error","validateCreateNftStep","state","step","validateCreateNftForm"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,KAAhB;AAGA,OAAO,MAAMC,gBAAgB,GAAGD,GAAG,CAACE,MAAJ,CAAW;AACzCC,EAAAA,YAAY,EAAEH,GAAG,CAACI,QAAJ,GAAeC,OAAf,CAAuB,IAAvB;AAD2B,CAAX,CAAzB;AAIP,OAAO,MAAMC,kBAAkB,GAAGL,gBAAgB,CAACM,MAAjB,CAAwB;AACxDC,EAAAA,MAAM,EAAER,GAAG,CAACE,MAAJ,CAAW;AACjBO,IAAAA,IAAI,EAAET,GAAG,CAACU,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoBP,QAApB,EADW;AAEjBQ,IAAAA,WAAW,EAAEZ,GAAG,CAACU,MAAJ,GAAaG,KAAb,CAAmB,IAAnB,EAAyBA,KAAzB,CAA+B,EAA/B;AAFI,GAAX,CADgD;AAKxDC,EAAAA,YAAY,EAAEd,GAAG,CAACe,KAAJ,GAAYC,KAAZ,CACZhB,GAAG,CAACE,MAAJ,CAAW;AACTO,IAAAA,IAAI,EAAET,GAAG,CAACU,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoBP,QAApB,EADG;AAETa,IAAAA,KAAK,EAAEjB,GAAG,CAACU,MAAJ,GAAaC,GAAb,CAAiB,CAAjB,EAAoBP,QAApB;AAFE,GAAX,CADY;AAL0C,CAAxB,CAA3B;AAaP,OAAO,MAAMc,sBAAsB,GAAGZ,kBAAkB,CAACC,MAAnB,CAA0B;AAC9DY,EAAAA,iBAAiB,EAAEnB,GAAG,CAACU,MAAJ,GAAaN,QAAb;AAD2C,CAA1B,CAA/B;;AAIP,SAASgB,OAAT,CAAiBC,MAAjB,EAA2CnB,MAA3C,EAAwD;AACtD,SAAO,CAACmB,MAAM,CAACC,QAAP,CAAgBpB,MAAhB,EAAwB;AAAEqB,IAAAA,YAAY,EAAE;AAAhB,GAAxB,EAAgDC,KAAxD;AACD;;AAED,OAAO,SAASC,qBAAT,CAA+BC,KAA/B,EAA0D;AAC/D,UAAQA,KAAK,CAACC,IAAd;AACE,SAAK,aAAL;AACE,aAAOP,OAAO,CAACnB,gBAAD,EAAmByB,KAAnB,CAAd;;AACF,SAAK,eAAL;AACE,aAAON,OAAO,CAACF,sBAAD,EAAyBQ,KAAzB,CAAd;;AACF,SAAK,mBAAL;AACE,aAAON,OAAO,CAACF,sBAAD,EAAyBQ,KAAzB,CAAd;;AACF,SAAK,SAAL;AACE,aAAON,OAAO,CAACF,sBAAD,EAAyBQ,KAAzB,CAAd;;AACF;AACE,aAAO,KAAP;AAVJ;AAYD;AAED,OAAO,SAASE,qBAAT,CAA+BF,KAA/B,EAA0D;AAC/D,SAAON,OAAO,CAACF,sBAAD,EAAyBQ,KAAzB,CAAd;AACD","sourcesContent":["import Joi from 'joi';\nimport { State } from '..';\n\nexport const fileUploadSchema = Joi.object({\n  selectedFile: Joi.required().invalid(null)\n});\n\nexport const assetDetailsSchema = fileUploadSchema.append({\n  fields: Joi.object({\n    name: Joi.string().min(1).required(),\n    description: Joi.string().allow(null).allow('')\n  }),\n  metadataRows: Joi.array().items(\n    Joi.object({\n      name: Joi.string().min(1).required(),\n      value: Joi.string().min(1).required()\n    })\n  )\n});\n\nexport const collectionSelectSchema = assetDetailsSchema.append({\n  collectionAddress: Joi.string().required()\n});\n\nfunction isValid(schema: Joi.ObjectSchema, object: any) {\n  return !schema.validate(object, { allowUnknown: true }).error;\n}\n\nexport function validateCreateNftStep(state: State['createNft']) {\n  switch (state.step) {\n    case 'file_upload':\n      return isValid(fileUploadSchema, state);\n    case 'asset_details':\n      return isValid(collectionSelectSchema, state);\n    case 'collection_select':\n      return isValid(collectionSelectSchema, state);\n    case 'confirm':\n      return isValid(collectionSelectSchema, state);\n    default:\n      return false;\n  }\n}\n\nexport function validateCreateNftForm(state: State['createNft']) {\n  return isValid(collectionSelectSchema, state);\n}\n"]},"metadata":{},"sourceType":"module"}