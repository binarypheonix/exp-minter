{"ast":null,"code":"// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var getBooleanAlgebra = function getBooleanAlgebra(B) {\n  return function () {\n    return {\n      meet: function meet(x, y) {\n        return function (a) {\n          return B.meet(x(a), y(a));\n        };\n      },\n      join: function join(x, y) {\n        return function (a) {\n          return B.join(x(a), y(a));\n        };\n      },\n      zero: function zero() {\n        return B.zero;\n      },\n      one: function one() {\n        return B.one;\n      },\n      implies: function implies(x, y) {\n        return function (a) {\n          return B.implies(x(a), y(a));\n        };\n      },\n      not: function not(x) {\n        return function (a) {\n          return B.not(x(a));\n        };\n      }\n    };\n  };\n};\n/**\n * Unary functions form a semigroup as long as you can provide a semigroup for the codomain.\n *\n * @example\n * import { Predicate, getSemigroup } from 'fp-ts/function'\n * import * as B from 'fp-ts/boolean'\n *\n * const f: Predicate<number> = (n) => n <= 2\n * const g: Predicate<number> = (n) => n >= 0\n *\n * const S1 = getSemigroup(B.SemigroupAll)<number>()\n *\n * assert.deepStrictEqual(S1.concat(f, g)(1), true)\n * assert.deepStrictEqual(S1.concat(f, g)(3), false)\n *\n * const S2 = getSemigroup(B.SemigroupAny)<number>()\n *\n * assert.deepStrictEqual(S2.concat(f, g)(1), true)\n * assert.deepStrictEqual(S2.concat(f, g)(3), true)\n *\n * @category instances\n * @since 2.10.0\n */\n\nexport var getSemigroup = function getSemigroup(S) {\n  return function () {\n    return {\n      concat: function concat(f, g) {\n        return function (a) {\n          return S.concat(f(a), g(a));\n        };\n      }\n    };\n  };\n};\n/**\n * Unary functions form a monoid as long as you can provide a monoid for the codomain.\n *\n * @example\n * import { Predicate, getMonoid } from 'fp-ts/function'\n * import * as B from 'fp-ts/boolean'\n *\n * const f: Predicate<number> = (n) => n <= 2\n * const g: Predicate<number> = (n) => n >= 0\n *\n * const M1 = getMonoid(B.MonoidAll)<number>()\n *\n * assert.deepStrictEqual(M1.concat(f, g)(1), true)\n * assert.deepStrictEqual(M1.concat(f, g)(3), false)\n *\n * const M2 = getMonoid(B.MonoidAny)<number>()\n *\n * assert.deepStrictEqual(M2.concat(f, g)(1), true)\n * assert.deepStrictEqual(M2.concat(f, g)(3), true)\n *\n * @category instances\n * @since 2.10.0\n */\n\nexport var getMonoid = function getMonoid(M) {\n  var getSemigroupM = getSemigroup(M);\n  return function () {\n    return {\n      concat: getSemigroupM().concat,\n      empty: function empty() {\n        return M.empty;\n      }\n    };\n  };\n};\n/**\n * @category instances\n * @since 2.10.0\n */\n\nexport var getSemiring = function getSemiring(S) {\n  return {\n    add: function add(f, g) {\n      return function (x) {\n        return S.add(f(x), g(x));\n      };\n    },\n    zero: function zero() {\n      return S.zero;\n    },\n    mul: function mul(f, g) {\n      return function (x) {\n        return S.mul(f(x), g(x));\n      };\n    },\n    one: function one() {\n      return S.one;\n    }\n  };\n};\n/**\n * @category instances\n * @since 2.10.0\n */\n\nexport var getRing = function getRing(R) {\n  var S = getSemiring(R);\n  return {\n    add: S.add,\n    mul: S.mul,\n    one: S.one,\n    zero: S.zero,\n    sub: function sub(f, g) {\n      return function (x) {\n        return R.sub(f(x), g(x));\n      };\n    }\n  };\n};\n/**\n * Endomorphism form a monoid where the `empty` value is the identity function.\n *\n * @category instances\n * @since 2.10.0\n */\n\nexport var getEndomorphismMonoid = function getEndomorphismMonoid() {\n  return {\n    concat: function concat(x, y) {\n      return function (a) {\n        return y(x(a));\n      };\n    },\n    empty: identity\n  };\n};\n/**\n * @since 2.0.0\n */\n\nexport function identity(a) {\n  return a;\n}\n/**\n * @since 2.0.0\n */\n\nexport var unsafeCoerce = identity;\n/**\n * @since 2.0.0\n */\n\nexport function not(predicate) {\n  return function (a) {\n    return !predicate(a);\n  };\n}\n/**\n * @since 2.0.0\n */\n\nexport function constant(a) {\n  return function () {\n    return a;\n  };\n}\n/**\n * A thunk that returns always `true`.\n *\n * @since 2.0.0\n */\n\nexport var constTrue = /*#__PURE__*/constant(true);\n/**\n * A thunk that returns always `false`.\n *\n * @since 2.0.0\n */\n\nexport var constFalse = /*#__PURE__*/constant(false);\n/**\n * A thunk that returns always `null`.\n *\n * @since 2.0.0\n */\n\nexport var constNull = /*#__PURE__*/constant(null);\n/**\n * A thunk that returns always `undefined`.\n *\n * @since 2.0.0\n */\n\nexport var constUndefined = /*#__PURE__*/constant(undefined);\n/**\n * A thunk that returns always `void`.\n *\n * @since 2.0.0\n */\n\nexport var constVoid = constUndefined;\n/**\n * Flips the order of the arguments of a function of two arguments.\n *\n * @since 2.0.0\n */\n\nexport function flip(f) {\n  return function (b, a) {\n    return f(a, b);\n  };\n}\nexport function flow(ab, bc, cd, de, ef, fg, gh, hi, ij) {\n  switch (arguments.length) {\n    case 1:\n      return ab;\n\n    case 2:\n      return function () {\n        return bc(ab.apply(this, arguments));\n      };\n\n    case 3:\n      return function () {\n        return cd(bc(ab.apply(this, arguments)));\n      };\n\n    case 4:\n      return function () {\n        return de(cd(bc(ab.apply(this, arguments))));\n      };\n\n    case 5:\n      return function () {\n        return ef(de(cd(bc(ab.apply(this, arguments)))));\n      };\n\n    case 6:\n      return function () {\n        return fg(ef(de(cd(bc(ab.apply(this, arguments))))));\n      };\n\n    case 7:\n      return function () {\n        return gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))));\n      };\n\n    case 8:\n      return function () {\n        return hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments))))))));\n      };\n\n    case 9:\n      return function () {\n        return ij(hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))))));\n      };\n  }\n\n  return;\n}\n/**\n * @since 2.0.0\n */\n\nexport function tuple() {\n  var t = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    t[_i] = arguments[_i];\n  }\n\n  return t;\n}\n/**\n * @since 2.0.0\n */\n\nexport function increment(n) {\n  return n + 1;\n}\n/**\n * @since 2.0.0\n */\n\nexport function decrement(n) {\n  return n - 1;\n}\n/**\n * @since 2.0.0\n */\n\nexport function absurd(_) {\n  throw new Error('Called `absurd` function which should be uncallable');\n}\n/**\n * Creates a tupled version of this function: instead of `n` arguments, it accepts a single tuple argument.\n *\n * @example\n * import { tupled } from 'fp-ts/function'\n *\n * const add = tupled((x: number, y: number): number => x + y)\n *\n * assert.strictEqual(add([1, 2]), 3)\n *\n * @since 2.4.0\n */\n\nexport function tupled(f) {\n  return function (a) {\n    return f.apply(void 0, a);\n  };\n}\n/**\n * Inverse function of `tupled`\n *\n * @since 2.4.0\n */\n\nexport function untupled(f) {\n  return function () {\n    var a = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      a[_i] = arguments[_i];\n    }\n\n    return f(a);\n  };\n}\nexport function pipe(a, ab, bc, cd, de, ef, fg, gh, hi, ij, jk, kl, lm, mn, no, op, pq, qr, rs, st) {\n  switch (arguments.length) {\n    case 1:\n      return a;\n\n    case 2:\n      return ab(a);\n\n    case 3:\n      return bc(ab(a));\n\n    case 4:\n      return cd(bc(ab(a)));\n\n    case 5:\n      return de(cd(bc(ab(a))));\n\n    case 6:\n      return ef(de(cd(bc(ab(a)))));\n\n    case 7:\n      return fg(ef(de(cd(bc(ab(a))))));\n\n    case 8:\n      return gh(fg(ef(de(cd(bc(ab(a)))))));\n\n    case 9:\n      return hi(gh(fg(ef(de(cd(bc(ab(a))))))));\n\n    case 10:\n      return ij(hi(gh(fg(ef(de(cd(bc(ab(a)))))))));\n\n    case 11:\n      return jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a))))))))));\n\n    case 12:\n      return kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a)))))))))));\n\n    case 13:\n      return lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a))))))))))));\n\n    case 14:\n      return mn(lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a)))))))))))));\n\n    case 15:\n      return no(mn(lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a))))))))))))));\n\n    case 16:\n      return op(no(mn(lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a)))))))))))))));\n\n    case 17:\n      return pq(op(no(mn(lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a))))))))))))))));\n\n    case 18:\n      return qr(pq(op(no(mn(lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a)))))))))))))))));\n\n    case 19:\n      return rs(qr(pq(op(no(mn(lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a))))))))))))))))));\n\n    case 20:\n      return st(rs(qr(pq(op(no(mn(lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a)))))))))))))))))));\n  }\n\n  return;\n}\n/**\n * Type hole simulation\n *\n * @since 2.7.0\n */\n\nexport var hole = absurd;","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/node_modules/fp-ts/es6/function.js"],"names":["getBooleanAlgebra","B","meet","x","y","a","join","zero","one","implies","not","getSemigroup","S","concat","f","g","getMonoid","M","getSemigroupM","empty","getSemiring","add","mul","getRing","R","sub","getEndomorphismMonoid","identity","unsafeCoerce","predicate","constant","constTrue","constFalse","constNull","constUndefined","undefined","constVoid","flip","b","flow","ab","bc","cd","de","ef","fg","gh","hi","ij","arguments","length","apply","tuple","t","_i","increment","n","decrement","absurd","_","Error","tupled","untupled","pipe","jk","kl","lm","mn","no","op","pq","qr","rs","st","hole"],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIA,iBAAiB,GAAG,SAApBA,iBAAoB,CAAUC,CAAV,EAAa;AAAE,SAAO,YAAY;AAAE,WAAQ;AACvEC,MAAAA,IAAI,EAAE,cAAUC,CAAV,EAAaC,CAAb,EAAgB;AAAE,eAAO,UAAUC,CAAV,EAAa;AAAE,iBAAOJ,CAAC,CAACC,IAAF,CAAOC,CAAC,CAACE,CAAD,CAAR,EAAaD,CAAC,CAACC,CAAD,CAAd,CAAP;AAA4B,SAAlD;AAAqD,OADN;AAEvEC,MAAAA,IAAI,EAAE,cAAUH,CAAV,EAAaC,CAAb,EAAgB;AAAE,eAAO,UAAUC,CAAV,EAAa;AAAE,iBAAOJ,CAAC,CAACK,IAAF,CAAOH,CAAC,CAACE,CAAD,CAAR,EAAaD,CAAC,CAACC,CAAD,CAAd,CAAP;AAA4B,SAAlD;AAAqD,OAFN;AAGvEE,MAAAA,IAAI,EAAE,gBAAY;AAAE,eAAON,CAAC,CAACM,IAAT;AAAgB,OAHmC;AAIvEC,MAAAA,GAAG,EAAE,eAAY;AAAE,eAAOP,CAAC,CAACO,GAAT;AAAe,OAJqC;AAKvEC,MAAAA,OAAO,EAAE,iBAAUN,CAAV,EAAaC,CAAb,EAAgB;AAAE,eAAO,UAAUC,CAAV,EAAa;AAAE,iBAAOJ,CAAC,CAACQ,OAAF,CAAUN,CAAC,CAACE,CAAD,CAAX,EAAgBD,CAAC,CAACC,CAAD,CAAjB,CAAP;AAA+B,SAArD;AAAwD,OALZ;AAMvEK,MAAAA,GAAG,EAAE,aAAUP,CAAV,EAAa;AAAE,eAAO,UAAUE,CAAV,EAAa;AAAE,iBAAOJ,CAAC,CAACS,GAAF,CAAMP,CAAC,CAACE,CAAD,CAAP,CAAP;AAAqB,SAA3C;AAA8C;AANK,KAAR;AAO9D,GAPyC;AAOtC,CAPD;AAQP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIM,YAAY,GAAG,SAAfA,YAAe,CAAUC,CAAV,EAAa;AAAE,SAAO,YAAY;AAAE,WAAQ;AAClEC,MAAAA,MAAM,EAAE,gBAAUC,CAAV,EAAaC,CAAb,EAAgB;AAAE,eAAO,UAAUV,CAAV,EAAa;AAAE,iBAAOO,CAAC,CAACC,MAAF,CAASC,CAAC,CAACT,CAAD,CAAV,EAAeU,CAAC,CAACV,CAAD,CAAhB,CAAP;AAA8B,SAApD;AAAuD;AADf,KAAR;AAEzD,GAFoC;AAEjC,CAFD;AAGP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIW,SAAS,GAAG,SAAZA,SAAY,CAAUC,CAAV,EAAa;AAChC,MAAIC,aAAa,GAAGP,YAAY,CAACM,CAAD,CAAhC;AACA,SAAO,YAAY;AAAE,WAAQ;AACzBJ,MAAAA,MAAM,EAAEK,aAAa,GAAGL,MADC;AAEzBM,MAAAA,KAAK,EAAE,iBAAY;AAAE,eAAOF,CAAC,CAACE,KAAT;AAAiB;AAFb,KAAR;AAGhB,GAHL;AAIH,CANM;AAOP;AACA;AACA;AACA;;AACA,OAAO,IAAIC,WAAW,GAAG,SAAdA,WAAc,CAAUR,CAAV,EAAa;AAAE,SAAQ;AAC5CS,IAAAA,GAAG,EAAE,aAAUP,CAAV,EAAaC,CAAb,EAAgB;AAAE,aAAO,UAAUZ,CAAV,EAAa;AAAE,eAAOS,CAAC,CAACS,GAAF,CAAMP,CAAC,CAACX,CAAD,CAAP,EAAYY,CAAC,CAACZ,CAAD,CAAb,CAAP;AAA2B,OAAjD;AAAoD,KAD/B;AAE5CI,IAAAA,IAAI,EAAE,gBAAY;AAAE,aAAOK,CAAC,CAACL,IAAT;AAAgB,KAFQ;AAG5Ce,IAAAA,GAAG,EAAE,aAAUR,CAAV,EAAaC,CAAb,EAAgB;AAAE,aAAO,UAAUZ,CAAV,EAAa;AAAE,eAAOS,CAAC,CAACU,GAAF,CAAMR,CAAC,CAACX,CAAD,CAAP,EAAYY,CAAC,CAACZ,CAAD,CAAb,CAAP;AAA2B,OAAjD;AAAoD,KAH/B;AAI5CK,IAAAA,GAAG,EAAE,eAAY;AAAE,aAAOI,CAAC,CAACJ,GAAT;AAAe;AAJU,GAAR;AAKnC,CALE;AAMP;AACA;AACA;AACA;;AACA,OAAO,IAAIe,OAAO,GAAG,SAAVA,OAAU,CAAUC,CAAV,EAAa;AAC9B,MAAIZ,CAAC,GAAGQ,WAAW,CAACI,CAAD,CAAnB;AACA,SAAO;AACHH,IAAAA,GAAG,EAAET,CAAC,CAACS,GADJ;AAEHC,IAAAA,GAAG,EAAEV,CAAC,CAACU,GAFJ;AAGHd,IAAAA,GAAG,EAAEI,CAAC,CAACJ,GAHJ;AAIHD,IAAAA,IAAI,EAAEK,CAAC,CAACL,IAJL;AAKHkB,IAAAA,GAAG,EAAE,aAAUX,CAAV,EAAaC,CAAb,EAAgB;AAAE,aAAO,UAAUZ,CAAV,EAAa;AAAE,eAAOqB,CAAC,CAACC,GAAF,CAAMX,CAAC,CAACX,CAAD,CAAP,EAAYY,CAAC,CAACZ,CAAD,CAAb,CAAP;AAA2B,OAAjD;AAAoD;AALxE,GAAP;AAOH,CATM;AAUP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIuB,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAY;AAAE,SAAQ;AACrDb,IAAAA,MAAM,EAAE,gBAAUV,CAAV,EAAaC,CAAb,EAAgB;AAAE,aAAO,UAAUC,CAAV,EAAa;AAAE,eAAOD,CAAC,CAACD,CAAC,CAACE,CAAD,CAAF,CAAR;AAAiB,OAAvC;AAA0C,KADf;AAErDc,IAAAA,KAAK,EAAEQ;AAF8C,GAAR;AAG5C,CAHE;AAIP;AACA;AACA;;AACA,OAAO,SAASA,QAAT,CAAkBtB,CAAlB,EAAqB;AACxB,SAAOA,CAAP;AACH;AACD;AACA;AACA;;AACA,OAAO,IAAIuB,YAAY,GAAGD,QAAnB;AACP;AACA;AACA;;AACA,OAAO,SAASjB,GAAT,CAAamB,SAAb,EAAwB;AAC3B,SAAO,UAAUxB,CAAV,EAAa;AAAE,WAAO,CAACwB,SAAS,CAACxB,CAAD,CAAjB;AAAuB,GAA7C;AACH;AACD;AACA;AACA;;AACA,OAAO,SAASyB,QAAT,CAAkBzB,CAAlB,EAAqB;AACxB,SAAO,YAAY;AAAE,WAAOA,CAAP;AAAW,GAAhC;AACH;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAI0B,SAAS,GACpB,aACAD,QAAQ,CAAC,IAAD,CAFD;AAGP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIE,UAAU,GACrB,aACAF,QAAQ,CAAC,KAAD,CAFD;AAGP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIG,SAAS,GACpB,aACAH,QAAQ,CAAC,IAAD,CAFD;AAGP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAII,cAAc,GACzB,aACAJ,QAAQ,CAACK,SAAD,CAFD;AAGP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,SAAS,GAAGF,cAAhB;AACP;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,IAAT,CAAcvB,CAAd,EAAiB;AACpB,SAAO,UAAUwB,CAAV,EAAajC,CAAb,EAAgB;AAAE,WAAOS,CAAC,CAACT,CAAD,EAAIiC,CAAJ,CAAR;AAAiB,GAA1C;AACH;AACD,OAAO,SAASC,IAAT,CAAcC,EAAd,EAAkBC,EAAlB,EAAsBC,EAAtB,EAA0BC,EAA1B,EAA8BC,EAA9B,EAAkCC,EAAlC,EAAsCC,EAAtC,EAA0CC,EAA1C,EAA8CC,EAA9C,EAAkD;AACrD,UAAQC,SAAS,CAACC,MAAlB;AACI,SAAK,CAAL;AACI,aAAOV,EAAP;;AACJ,SAAK,CAAL;AACI,aAAO,YAAY;AACf,eAAOC,EAAE,CAACD,EAAE,CAACW,KAAH,CAAS,IAAT,EAAeF,SAAf,CAAD,CAAT;AACH,OAFD;;AAGJ,SAAK,CAAL;AACI,aAAO,YAAY;AACf,eAAOP,EAAE,CAACD,EAAE,CAACD,EAAE,CAACW,KAAH,CAAS,IAAT,EAAeF,SAAf,CAAD,CAAH,CAAT;AACH,OAFD;;AAGJ,SAAK,CAAL;AACI,aAAO,YAAY;AACf,eAAON,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACW,KAAH,CAAS,IAAT,EAAeF,SAAf,CAAD,CAAH,CAAH,CAAT;AACH,OAFD;;AAGJ,SAAK,CAAL;AACI,aAAO,YAAY;AACf,eAAOL,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACW,KAAH,CAAS,IAAT,EAAeF,SAAf,CAAD,CAAH,CAAH,CAAH,CAAT;AACH,OAFD;;AAGJ,SAAK,CAAL;AACI,aAAO,YAAY;AACf,eAAOJ,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACW,KAAH,CAAS,IAAT,EAAeF,SAAf,CAAD,CAAH,CAAH,CAAH,CAAH,CAAT;AACH,OAFD;;AAGJ,SAAK,CAAL;AACI,aAAO,YAAY;AACf,eAAOH,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACW,KAAH,CAAS,IAAT,EAAeF,SAAf,CAAD,CAAH,CAAH,CAAH,CAAH,CAAH,CAAT;AACH,OAFD;;AAGJ,SAAK,CAAL;AACI,aAAO,YAAY;AACf,eAAOF,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACW,KAAH,CAAS,IAAT,EAAeF,SAAf,CAAD,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAT;AACH,OAFD;;AAGJ,SAAK,CAAL;AACI,aAAO,YAAY;AACf,eAAOD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACW,KAAH,CAAS,IAAT,EAAeF,SAAf,CAAD,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAT;AACH,OAFD;AAhCR;;AAoCA;AACH;AACD;AACA;AACA;;AACA,OAAO,SAASG,KAAT,GAAiB;AACpB,MAAIC,CAAC,GAAG,EAAR;;AACA,OAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGL,SAAS,CAACC,MAAhC,EAAwCI,EAAE,EAA1C,EAA8C;AAC1CD,IAAAA,CAAC,CAACC,EAAD,CAAD,GAAQL,SAAS,CAACK,EAAD,CAAjB;AACH;;AACD,SAAOD,CAAP;AACH;AACD;AACA;AACA;;AACA,OAAO,SAASE,SAAT,CAAmBC,CAAnB,EAAsB;AACzB,SAAOA,CAAC,GAAG,CAAX;AACH;AACD;AACA;AACA;;AACA,OAAO,SAASC,SAAT,CAAmBD,CAAnB,EAAsB;AACzB,SAAOA,CAAC,GAAG,CAAX;AACH;AACD;AACA;AACA;;AACA,OAAO,SAASE,MAAT,CAAgBC,CAAhB,EAAmB;AACtB,QAAM,IAAIC,KAAJ,CAAU,qDAAV,CAAN;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,MAAT,CAAgB/C,CAAhB,EAAmB;AACtB,SAAO,UAAUT,CAAV,EAAa;AAAE,WAAOS,CAAC,CAACqC,KAAF,CAAQ,KAAK,CAAb,EAAgB9C,CAAhB,CAAP;AAA4B,GAAlD;AACH;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASyD,QAAT,CAAkBhD,CAAlB,EAAqB;AACxB,SAAO,YAAY;AACf,QAAIT,CAAC,GAAG,EAAR;;AACA,SAAK,IAAIiD,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGL,SAAS,CAACC,MAAhC,EAAwCI,EAAE,EAA1C,EAA8C;AAC1CjD,MAAAA,CAAC,CAACiD,EAAD,CAAD,GAAQL,SAAS,CAACK,EAAD,CAAjB;AACH;;AACD,WAAOxC,CAAC,CAACT,CAAD,CAAR;AACH,GAND;AAOH;AACD,OAAO,SAAS0D,IAAT,CAAc1D,CAAd,EAAiBmC,EAAjB,EAAqBC,EAArB,EAAyBC,EAAzB,EAA6BC,EAA7B,EAAiCC,EAAjC,EAAqCC,EAArC,EAAyCC,EAAzC,EAA6CC,EAA7C,EAAiDC,EAAjD,EAAqDgB,EAArD,EAAyDC,EAAzD,EAA6DC,EAA7D,EAAiEC,EAAjE,EAAqEC,EAArE,EAAyEC,EAAzE,EAA6EC,EAA7E,EAAiFC,EAAjF,EAAqFC,EAArF,EAAyFC,EAAzF,EAA6F;AAChG,UAAQxB,SAAS,CAACC,MAAlB;AACI,SAAK,CAAL;AACI,aAAO7C,CAAP;;AACJ,SAAK,CAAL;AACI,aAAOmC,EAAE,CAACnC,CAAD,CAAT;;AACJ,SAAK,CAAL;AACI,aAAOoC,EAAE,CAACD,EAAE,CAACnC,CAAD,CAAH,CAAT;;AACJ,SAAK,CAAL;AACI,aAAOqC,EAAE,CAACD,EAAE,CAACD,EAAE,CAACnC,CAAD,CAAH,CAAH,CAAT;;AACJ,SAAK,CAAL;AACI,aAAOsC,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACnC,CAAD,CAAH,CAAH,CAAH,CAAT;;AACJ,SAAK,CAAL;AACI,aAAOuC,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACnC,CAAD,CAAH,CAAH,CAAH,CAAH,CAAT;;AACJ,SAAK,CAAL;AACI,aAAOwC,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACnC,CAAD,CAAH,CAAH,CAAH,CAAH,CAAH,CAAT;;AACJ,SAAK,CAAL;AACI,aAAOyC,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACnC,CAAD,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAT;;AACJ,SAAK,CAAL;AACI,aAAO0C,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACnC,CAAD,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAT;;AACJ,SAAK,EAAL;AACI,aAAO2C,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACnC,CAAD,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAT;;AACJ,SAAK,EAAL;AACI,aAAO2D,EAAE,CAAChB,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACnC,CAAD,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAT;;AACJ,SAAK,EAAL;AACI,aAAO4D,EAAE,CAACD,EAAE,CAAChB,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACnC,CAAD,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAT;;AACJ,SAAK,EAAL;AACI,aAAO6D,EAAE,CAACD,EAAE,CAACD,EAAE,CAAChB,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACnC,CAAD,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAT;;AACJ,SAAK,EAAL;AACI,aAAO8D,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAAChB,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACnC,CAAD,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAT;;AACJ,SAAK,EAAL;AACI,aAAO+D,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAAChB,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACnC,CAAD,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAT;;AACJ,SAAK,EAAL;AACI,aAAOgE,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAAChB,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACnC,CAAD,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAT;;AACJ,SAAK,EAAL;AACI,aAAOiE,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAAChB,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACnC,CAAD,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAT;;AACJ,SAAK,EAAL;AACI,aAAOkE,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAAChB,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACnC,CAAD,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAT;;AACJ,SAAK,EAAL;AACI,aAAOmE,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAAChB,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACnC,CAAD,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAT;;AACJ,SAAK,EAAL;AACI,aAAOoE,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAAChB,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACD,EAAE,CAACnC,CAAD,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAH,CAAT;AAxCR;;AA0CA;AACH;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIqE,IAAI,GAAGhB,MAAX","sourcesContent":["// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var getBooleanAlgebra = function (B) { return function () { return ({\n    meet: function (x, y) { return function (a) { return B.meet(x(a), y(a)); }; },\n    join: function (x, y) { return function (a) { return B.join(x(a), y(a)); }; },\n    zero: function () { return B.zero; },\n    one: function () { return B.one; },\n    implies: function (x, y) { return function (a) { return B.implies(x(a), y(a)); }; },\n    not: function (x) { return function (a) { return B.not(x(a)); }; }\n}); }; };\n/**\n * Unary functions form a semigroup as long as you can provide a semigroup for the codomain.\n *\n * @example\n * import { Predicate, getSemigroup } from 'fp-ts/function'\n * import * as B from 'fp-ts/boolean'\n *\n * const f: Predicate<number> = (n) => n <= 2\n * const g: Predicate<number> = (n) => n >= 0\n *\n * const S1 = getSemigroup(B.SemigroupAll)<number>()\n *\n * assert.deepStrictEqual(S1.concat(f, g)(1), true)\n * assert.deepStrictEqual(S1.concat(f, g)(3), false)\n *\n * const S2 = getSemigroup(B.SemigroupAny)<number>()\n *\n * assert.deepStrictEqual(S2.concat(f, g)(1), true)\n * assert.deepStrictEqual(S2.concat(f, g)(3), true)\n *\n * @category instances\n * @since 2.10.0\n */\nexport var getSemigroup = function (S) { return function () { return ({\n    concat: function (f, g) { return function (a) { return S.concat(f(a), g(a)); }; }\n}); }; };\n/**\n * Unary functions form a monoid as long as you can provide a monoid for the codomain.\n *\n * @example\n * import { Predicate, getMonoid } from 'fp-ts/function'\n * import * as B from 'fp-ts/boolean'\n *\n * const f: Predicate<number> = (n) => n <= 2\n * const g: Predicate<number> = (n) => n >= 0\n *\n * const M1 = getMonoid(B.MonoidAll)<number>()\n *\n * assert.deepStrictEqual(M1.concat(f, g)(1), true)\n * assert.deepStrictEqual(M1.concat(f, g)(3), false)\n *\n * const M2 = getMonoid(B.MonoidAny)<number>()\n *\n * assert.deepStrictEqual(M2.concat(f, g)(1), true)\n * assert.deepStrictEqual(M2.concat(f, g)(3), true)\n *\n * @category instances\n * @since 2.10.0\n */\nexport var getMonoid = function (M) {\n    var getSemigroupM = getSemigroup(M);\n    return function () { return ({\n        concat: getSemigroupM().concat,\n        empty: function () { return M.empty; }\n    }); };\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var getSemiring = function (S) { return ({\n    add: function (f, g) { return function (x) { return S.add(f(x), g(x)); }; },\n    zero: function () { return S.zero; },\n    mul: function (f, g) { return function (x) { return S.mul(f(x), g(x)); }; },\n    one: function () { return S.one; }\n}); };\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var getRing = function (R) {\n    var S = getSemiring(R);\n    return {\n        add: S.add,\n        mul: S.mul,\n        one: S.one,\n        zero: S.zero,\n        sub: function (f, g) { return function (x) { return R.sub(f(x), g(x)); }; }\n    };\n};\n/**\n * Endomorphism form a monoid where the `empty` value is the identity function.\n *\n * @category instances\n * @since 2.10.0\n */\nexport var getEndomorphismMonoid = function () { return ({\n    concat: function (x, y) { return function (a) { return y(x(a)); }; },\n    empty: identity\n}); };\n/**\n * @since 2.0.0\n */\nexport function identity(a) {\n    return a;\n}\n/**\n * @since 2.0.0\n */\nexport var unsafeCoerce = identity;\n/**\n * @since 2.0.0\n */\nexport function not(predicate) {\n    return function (a) { return !predicate(a); };\n}\n/**\n * @since 2.0.0\n */\nexport function constant(a) {\n    return function () { return a; };\n}\n/**\n * A thunk that returns always `true`.\n *\n * @since 2.0.0\n */\nexport var constTrue = \n/*#__PURE__*/\nconstant(true);\n/**\n * A thunk that returns always `false`.\n *\n * @since 2.0.0\n */\nexport var constFalse = \n/*#__PURE__*/\nconstant(false);\n/**\n * A thunk that returns always `null`.\n *\n * @since 2.0.0\n */\nexport var constNull = \n/*#__PURE__*/\nconstant(null);\n/**\n * A thunk that returns always `undefined`.\n *\n * @since 2.0.0\n */\nexport var constUndefined = \n/*#__PURE__*/\nconstant(undefined);\n/**\n * A thunk that returns always `void`.\n *\n * @since 2.0.0\n */\nexport var constVoid = constUndefined;\n/**\n * Flips the order of the arguments of a function of two arguments.\n *\n * @since 2.0.0\n */\nexport function flip(f) {\n    return function (b, a) { return f(a, b); };\n}\nexport function flow(ab, bc, cd, de, ef, fg, gh, hi, ij) {\n    switch (arguments.length) {\n        case 1:\n            return ab;\n        case 2:\n            return function () {\n                return bc(ab.apply(this, arguments));\n            };\n        case 3:\n            return function () {\n                return cd(bc(ab.apply(this, arguments)));\n            };\n        case 4:\n            return function () {\n                return de(cd(bc(ab.apply(this, arguments))));\n            };\n        case 5:\n            return function () {\n                return ef(de(cd(bc(ab.apply(this, arguments)))));\n            };\n        case 6:\n            return function () {\n                return fg(ef(de(cd(bc(ab.apply(this, arguments))))));\n            };\n        case 7:\n            return function () {\n                return gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))));\n            };\n        case 8:\n            return function () {\n                return hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments))))))));\n            };\n        case 9:\n            return function () {\n                return ij(hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))))));\n            };\n    }\n    return;\n}\n/**\n * @since 2.0.0\n */\nexport function tuple() {\n    var t = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        t[_i] = arguments[_i];\n    }\n    return t;\n}\n/**\n * @since 2.0.0\n */\nexport function increment(n) {\n    return n + 1;\n}\n/**\n * @since 2.0.0\n */\nexport function decrement(n) {\n    return n - 1;\n}\n/**\n * @since 2.0.0\n */\nexport function absurd(_) {\n    throw new Error('Called `absurd` function which should be uncallable');\n}\n/**\n * Creates a tupled version of this function: instead of `n` arguments, it accepts a single tuple argument.\n *\n * @example\n * import { tupled } from 'fp-ts/function'\n *\n * const add = tupled((x: number, y: number): number => x + y)\n *\n * assert.strictEqual(add([1, 2]), 3)\n *\n * @since 2.4.0\n */\nexport function tupled(f) {\n    return function (a) { return f.apply(void 0, a); };\n}\n/**\n * Inverse function of `tupled`\n *\n * @since 2.4.0\n */\nexport function untupled(f) {\n    return function () {\n        var a = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            a[_i] = arguments[_i];\n        }\n        return f(a);\n    };\n}\nexport function pipe(a, ab, bc, cd, de, ef, fg, gh, hi, ij, jk, kl, lm, mn, no, op, pq, qr, rs, st) {\n    switch (arguments.length) {\n        case 1:\n            return a;\n        case 2:\n            return ab(a);\n        case 3:\n            return bc(ab(a));\n        case 4:\n            return cd(bc(ab(a)));\n        case 5:\n            return de(cd(bc(ab(a))));\n        case 6:\n            return ef(de(cd(bc(ab(a)))));\n        case 7:\n            return fg(ef(de(cd(bc(ab(a))))));\n        case 8:\n            return gh(fg(ef(de(cd(bc(ab(a)))))));\n        case 9:\n            return hi(gh(fg(ef(de(cd(bc(ab(a))))))));\n        case 10:\n            return ij(hi(gh(fg(ef(de(cd(bc(ab(a)))))))));\n        case 11:\n            return jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a))))))))));\n        case 12:\n            return kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a)))))))))));\n        case 13:\n            return lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a))))))))))));\n        case 14:\n            return mn(lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a)))))))))))));\n        case 15:\n            return no(mn(lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a))))))))))))));\n        case 16:\n            return op(no(mn(lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a)))))))))))))));\n        case 17:\n            return pq(op(no(mn(lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a))))))))))))))));\n        case 18:\n            return qr(pq(op(no(mn(lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a)))))))))))))))));\n        case 19:\n            return rs(qr(pq(op(no(mn(lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a))))))))))))))))));\n        case 20:\n            return st(rs(qr(pq(op(no(mn(lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a)))))))))))))))))));\n    }\n    return;\n}\n/**\n * Type hole simulation\n *\n * @since 2.7.0\n */\nexport var hole = absurd;\n"]},"metadata":{},"sourceType":"module"}