{"ast":null,"code":"var _jsxFileName = \"/Users/frankenstein/projects/minter/src/components/common/modals/CancelTokenSale.tsx\";\nimport React from 'react';\nimport { Button, ModalHeader, ModalFooter, ModalBody, ModalCloseButton, Text, useDisclosure } from '@chakra-ui/react';\nimport { MinterButton } from '../../common';\nimport { useDispatch, useSelector } from '../../../reducer';\nimport { cancelTokenSaleAction } from '../../../reducer/async/actions';\nimport FormModal from './FormModal';\nexport function CancelTokenSaleModal(props) {\n  const dispatch = useDispatch();\n  const initialRef = React.useRef(null);\n  return /*#__PURE__*/React.createElement(FormModal, {\n    disclosure: props.disclosure,\n    sync: props.sync,\n    method: \"cancelTokenSale\",\n    dispatchThunk: () => dispatch(cancelTokenSaleAction({\n      contract: props.contract,\n      tokenId: props.tokenId,\n      saleId: props.saleId,\n      saleType: props.saleType\n    })),\n    initialRef: initialRef,\n    pendingMessage: \"Canceling token sale...\",\n    completeMessage: \"Token sale canceled\",\n    body: onSubmit => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ModalHeader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }\n    }, \"Are you sure?\"), /*#__PURE__*/React.createElement(ModalCloseButton, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }\n    }, \"Are you sure you want to cancel the sale?\")), /*#__PURE__*/React.createElement(ModalFooter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"primaryAction\",\n      mr: 3,\n      onClick: () => onSubmit(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }\n    }, \"Yes\"), /*#__PURE__*/React.createElement(Button, {\n      variant: \"cancelAction\",\n      onClick: () => props.disclosure.onClose(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }, \"No\"))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  });\n}\nexport function CancelTokenSaleButton(props) {\n  const disclosure = useDisclosure();\n  const {\n    status\n  } = useSelector(s => s.status.cancelTokenSale);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MinterButton, {\n    variant: \"cancelAction\",\n    onClick: disclosure.onOpen,\n    disabled: status === 'in_transit',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, \"Cancel sale\"), /*#__PURE__*/React.createElement(CancelTokenSaleModal, Object.assign({}, props, {\n    disclosure: disclosure,\n    sync: props.sync,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/src/components/common/modals/CancelTokenSale.tsx"],"names":["React","Button","ModalHeader","ModalFooter","ModalBody","ModalCloseButton","Text","useDisclosure","MinterButton","useDispatch","useSelector","cancelTokenSaleAction","FormModal","CancelTokenSaleModal","props","dispatch","initialRef","useRef","disclosure","sync","contract","tokenId","saleId","saleType","onSubmit","onClose","CancelTokenSaleButton","status","s","cancelTokenSale","onOpen"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,MADF,EAEEC,WAFF,EAGEC,WAHF,EAIEC,SAJF,EAKEC,gBALF,EAMEC,IANF,EAOEC,aAPF,QAQO,kBARP;AASA,SAASC,YAAT,QAA6B,cAA7B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,kBAAzC;AACA,SAASC,qBAAT,QAAsC,gCAAtC;AACA,OAAOC,SAAP,MAAgE,aAAhE;AASA,OAAO,SAASC,oBAAT,CAA8BC,KAA9B,EAAgE;AACrE,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAMO,UAAU,GAAGhB,KAAK,CAACiB,MAAN,CAAa,IAAb,CAAnB;AACA,sBACE,oBAAC,SAAD;AACE,IAAA,UAAU,EAAEH,KAAK,CAACI,UADpB;AAEE,IAAA,IAAI,EAAEJ,KAAK,CAACK,IAFd;AAGE,IAAA,MAAM,EAAC,iBAHT;AAIE,IAAA,aAAa,EAAE,MACbJ,QAAQ,CACNJ,qBAAqB,CAAC;AACpBS,MAAAA,QAAQ,EAAEN,KAAK,CAACM,QADI;AAEpBC,MAAAA,OAAO,EAAEP,KAAK,CAACO,OAFK;AAGpBC,MAAAA,MAAM,EAAER,KAAK,CAACQ,MAHM;AAIpBC,MAAAA,QAAQ,EAAET,KAAK,CAACS;AAJI,KAAD,CADf,CALZ;AAcE,IAAA,UAAU,EAAEP,UAdd;AAeE,IAAA,cAAc,EAAC,yBAfjB;AAgBE,IAAA,eAAe,EAAC,qBAhBlB;AAiBE,IAAA,IAAI,EAAEQ,QAAQ,iBACZ,uDACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,eAEE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDADF,CAHF,eAME,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,eAAhB;AAAgC,MAAA,EAAE,EAAE,CAApC;AAAuC,MAAA,OAAO,EAAE,MAAMA,QAAQ,EAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAIE,oBAAC,MAAD;AACE,MAAA,OAAO,EAAC,cADV;AAEE,MAAA,OAAO,EAAE,MAAMV,KAAK,CAACI,UAAN,CAAiBO,OAAjB,EAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,CANF,CAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAwCD;AASD,OAAO,SAASC,qBAAT,CAA+BZ,KAA/B,EAAkE;AACvE,QAAMI,UAAU,GAAGX,aAAa,EAAhC;AACA,QAAM;AAAEoB,IAAAA;AAAF,MAAajB,WAAW,CAACkB,CAAC,IAAIA,CAAC,CAACD,MAAF,CAASE,eAAf,CAA9B;AAEA,sBACE,uDACE,oBAAC,YAAD;AAAc,IAAA,OAAO,EAAC,cAAtB;AAAqC,IAAA,OAAO,EAAEX,UAAU,CAACY,MAAzD;AAAiE,IAAA,QAAQ,EAAEH,MAAM,KAAK,YAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,eAKE,oBAAC,oBAAD,oBACMb,KADN;AAEE,IAAA,UAAU,EAAEI,UAFd;AAGE,IAAA,IAAI,EAAEJ,KAAK,CAACK,IAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KALF,CADF;AAaD","sourcesContent":["import React from 'react';\nimport {\n  Button,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Text,\n  useDisclosure\n} from '@chakra-ui/react';\nimport { MinterButton } from '../../common';\nimport { useDispatch, useSelector } from '../../../reducer';\nimport { cancelTokenSaleAction } from '../../../reducer/async/actions';\nimport FormModal, { BaseModalProps, BaseModalButtonProps } from './FormModal';\n\ninterface CancelTokenSaleModalProps extends BaseModalProps {\n  contract: string;\n  tokenId: number;\n  saleId: number;\n  saleType: string;\n}\n\nexport function CancelTokenSaleModal(props: CancelTokenSaleModalProps) {\n  const dispatch = useDispatch();\n  const initialRef = React.useRef(null);\n  return (\n    <FormModal\n      disclosure={props.disclosure}\n      sync={props.sync}\n      method=\"cancelTokenSale\"\n      dispatchThunk={() =>\n        dispatch(\n          cancelTokenSaleAction({\n            contract: props.contract,\n            tokenId: props.tokenId,\n            saleId: props.saleId,\n            saleType: props.saleType\n          })\n        )\n      }\n      initialRef={initialRef}\n      pendingMessage=\"Canceling token sale...\"\n      completeMessage=\"Token sale canceled\"\n      body={onSubmit => (\n        <>\n          <ModalHeader>Are you sure?</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Text>Are you sure you want to cancel the sale?</Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button variant=\"primaryAction\" mr={3} onClick={() => onSubmit()}>\n              Yes\n            </Button>\n            <Button\n              variant=\"cancelAction\"\n              onClick={() => props.disclosure.onClose()}\n            >\n              No\n            </Button>\n          </ModalFooter>\n        </>\n      )}\n    />\n  );\n}\n\ninterface CancelTokenSaleButtonProps extends BaseModalButtonProps {\n  contract: string;\n  tokenId: number;\n  saleId: number;\n  saleType: string;\n}\n\nexport function CancelTokenSaleButton(props: CancelTokenSaleButtonProps) {\n  const disclosure = useDisclosure();\n  const { status } = useSelector(s => s.status.cancelTokenSale)\n  \n  return (\n    <>\n      <MinterButton variant=\"cancelAction\" onClick={disclosure.onOpen} disabled={status === 'in_transit'}>\n        Cancel sale\n      </MinterButton>\n\n      <CancelTokenSaleModal\n        {...props}\n        disclosure={disclosure}\n        sync={props.sync}\n      />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}