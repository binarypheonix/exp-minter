{"ast":null,"code":"var _jsxFileName = \"/Users/frankenstein/projects/minter/src/components/common/modals/FormModal.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { Box, Text, Modal, ModalOverlay, ModalContent, Spinner, Flex, Heading } from '@chakra-ui/react';\nimport { CheckCircle, AlertCircle, X } from 'react-feather';\nimport { MinterButton } from '../../common';\nimport { useSelector, useDispatch } from '../../../reducer';\nimport { clearError, setStatus } from '../../../reducer/slices/status';\n\nfunction Content(props) {\n  const {\n    status,\n    onClose,\n    onRetry,\n    onCancel\n  } = props;\n\n  if (status.error) {\n    return /*#__PURE__*/React.createElement(Flex, {\n      flexDir: \"column\",\n      align: \"center\",\n      px: 4,\n      py: 10,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      color: \"brand.blue\",\n      mb: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(AlertCircle, {\n      size: \"70px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Heading, {\n      size: \"lg\",\n      textAlign: \"center\",\n      color: \"gray.500\",\n      mb: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }\n    }, props.errorMessage || 'Operation failed'), /*#__PURE__*/React.createElement(Flex, {\n      flexDir: \"row\",\n      justify: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(MinterButton, {\n      variant: \"primaryAction\",\n      onClick: () => onRetry(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }\n    }, \"Retry\"), /*#__PURE__*/React.createElement(MinterButton, {\n      variant: \"tertiaryAction\",\n      onClick: () => onCancel(),\n      display: \"flex\",\n      alignItems: \"center\",\n      ml: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      color: \"currentcolor\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(X, {\n      size: 16,\n      strokeWidth: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(Text, {\n      fontSize: 16,\n      ml: 1,\n      fontWeight: \"600\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    }, \"Close\"))));\n  }\n\n  if (status.status === 'in_transit') {\n    return /*#__PURE__*/React.createElement(Flex, {\n      flexDir: \"column\",\n      align: \"center\",\n      px: 4,\n      py: 10,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Spinner, {\n      size: \"xl\",\n      mb: 6,\n      color: \"gray.300\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Heading, {\n      size: \"lg\",\n      textAlign: \"center\",\n      color: \"gray.500\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }, props.sync ? props.pendingMessage || 'Operation pending...' : props.pendingAsyncMessage || 'Opening wallet...'));\n  }\n\n  if (status.status === 'complete') {\n    return /*#__PURE__*/React.createElement(Flex, {\n      flexDir: \"column\",\n      align: \"center\",\n      px: 4,\n      py: 10,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      color: \"brand.blue\",\n      mb: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(CheckCircle, {\n      size: \"70px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Heading, {\n      size: \"lg\",\n      textAlign: \"center\",\n      color: \"gray.500\",\n      mb: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, props.completeMessage || 'Operation complete'), /*#__PURE__*/React.createElement(MinterButton, {\n      variant: \"primaryAction\",\n      onClick: () => onClose(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, \"Close\"));\n  }\n\n  return null;\n}\n\nexport default function FormModal(props) {\n  const {\n    sync = false,\n    dispatchOnOpen = false,\n    onComplete,\n    method\n  } = props;\n  const {\n    isOpen,\n    onOpen,\n    onClose\n  } = props.disclosure;\n  const [requestId, setRequestId] = useState(null);\n  const status = useSelector(s => s.status[props.method]);\n  const dispatch = useDispatch();\n  const notification = useSelector(s => s.notifications.find(n => n.requestId === requestId && n.status === 'pending' && !n.delivered)); // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  const onSubmit = async () => {\n    const result = props.dispatchThunk();\n    setRequestId(result.requestId);\n    dispatch(setStatus({\n      method,\n      status: 'in_transit'\n    }));\n    const requestStatus = (await result).meta.requestStatus;\n\n    if (requestStatus === 'fulfilled') {\n      dispatch(setStatus({\n        method,\n        status: sync ? 'complete' : 'ready'\n      }));\n      onComplete === null || onComplete === void 0 ? void 0 : onComplete.call(null);\n    }\n  };\n\n  const hasError = status.error !== null;\n  useEffect(() => {\n    if (!requestId && isOpen && dispatchOnOpen && !hasError) {\n      onSubmit();\n    }\n  }, [isOpen, dispatchOnOpen, hasError, onSubmit, requestId]);\n\n  const closeAndReset = (withCallback = true) => {\n    onClose();\n    setRequestId(null);\n    dispatch(clearError({\n      method: props.method\n    }));\n    withCallback && props.afterClose && props.afterClose();\n  };\n\n  const closeIfReadyOrComplete = () => {\n    if (status.status !== 'in_transit' || hasError) {\n      closeAndReset();\n    }\n  };\n\n  useEffect(() => {\n    if (!sync && isOpen && !hasError && notification) {\n      return closeAndReset();\n    } else if (!isOpen && hasError) {\n      return onOpen();\n    }\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Modal, {\n    isOpen: isOpen,\n    onClose: () => closeIfReadyOrComplete(),\n    initialFocusRef: props.initialRef,\n    closeOnEsc: false,\n    closeOnOverlayClick: false,\n    onEsc: () => closeIfReadyOrComplete(),\n    onOverlayClick: () => closeIfReadyOrComplete(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ModalOverlay, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(ModalContent, {\n    mt: 40,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }, status.status === 'ready' ? props.body ? props.body(onSubmit) : null : /*#__PURE__*/React.createElement(Content, {\n    sync: sync,\n    isOpen: isOpen,\n    status: status,\n    onClose: () => closeIfReadyOrComplete(),\n    onCancel: () => closeAndReset(false),\n    onRetry: () => {\n      dispatch(clearError({\n        method: props.method\n      }));\n      onSubmit();\n    },\n    pendingMessage: props.pendingMessage,\n    pendingAsyncMessage: props.pendingAsyncMessage,\n    completeMessage: props.completeMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }\n  }))));\n}","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/src/components/common/modals/FormModal.tsx"],"names":["React","useState","useEffect","Box","Text","Modal","ModalOverlay","ModalContent","Spinner","Flex","Heading","CheckCircle","AlertCircle","X","MinterButton","useSelector","useDispatch","clearError","setStatus","Content","props","status","onClose","onRetry","onCancel","error","errorMessage","sync","pendingMessage","pendingAsyncMessage","completeMessage","FormModal","dispatchOnOpen","onComplete","method","isOpen","onOpen","disclosure","requestId","setRequestId","s","dispatch","notification","notifications","find","n","delivered","onSubmit","result","dispatchThunk","requestStatus","meta","call","hasError","closeAndReset","withCallback","afterClose","closeIfReadyOrComplete","initialRef","body"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Text,\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  Spinner,\n  Flex,\n  Heading,\n  UseDisclosureReturn\n} from '@chakra-ui/react';\nimport { CheckCircle, AlertCircle, X } from 'react-feather';\nimport { MinterButton } from '../../common';\nimport { useSelector, useDispatch } from '../../../reducer';\nimport {\n  clearError,\n  setStatus,\n  Status,\n  Method\n} from '../../../reducer/slices/status';\n\ninterface ContentProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onRetry: () => void;\n  onCancel: () => void;\n  status: Status;\n  sync: boolean;\n  pendingMessage?: React.ReactNode;\n  pendingAsyncMessage?: React.ReactNode;\n  completeMessage?: React.ReactNode;\n  errorMessage?: React.ReactNode;\n}\n\nfunction Content(props: ContentProps) {\n  const { status, onClose, onRetry, onCancel } = props;\n  if (status.error) {\n    return (\n      <Flex flexDir=\"column\" align=\"center\" px={4} py={10}>\n        <Box color=\"brand.blue\" mb={6}>\n          <AlertCircle size=\"70px\" />\n        </Box>\n        <Heading size=\"lg\" textAlign=\"center\" color=\"gray.500\" mb={6}>\n          {props.errorMessage || 'Operation failed'}\n        </Heading>\n        <Flex flexDir=\"row\" justify=\"center\">\n          <MinterButton variant=\"primaryAction\" onClick={() => onRetry()}>\n            Retry\n          </MinterButton>\n          <MinterButton\n            variant=\"tertiaryAction\"\n            onClick={() => onCancel()}\n            display=\"flex\"\n            alignItems=\"center\"\n            ml={4}\n          >\n            <Box color=\"currentcolor\">\n              <X size={16} strokeWidth=\"3\" />\n            </Box>\n            <Text fontSize={16} ml={1} fontWeight=\"600\">\n              Close\n            </Text>\n          </MinterButton>\n        </Flex>\n      </Flex>\n    );\n  }\n  if (status.status === 'in_transit') {\n    return (\n      <Flex flexDir=\"column\" align=\"center\" px={4} py={10}>\n        <Spinner size=\"xl\" mb={6} color=\"gray.300\" />\n        <Heading size=\"lg\" textAlign=\"center\" color=\"gray.500\">\n          {props.sync\n            ? props.pendingMessage || 'Operation pending...'\n            : props.pendingAsyncMessage || 'Opening wallet...'}\n        </Heading>\n      </Flex>\n    );\n  }\n  if (status.status === 'complete') {\n    return (\n      <Flex flexDir=\"column\" align=\"center\" px={4} py={10}>\n        <Box color=\"brand.blue\" mb={6}>\n          <CheckCircle size=\"70px\" />\n        </Box>\n        <Heading size=\"lg\" textAlign=\"center\" color=\"gray.500\" mb={6}>\n          {props.completeMessage || 'Operation complete'}\n        </Heading>\n        <MinterButton variant=\"primaryAction\" onClick={() => onClose()}>\n          Close\n        </MinterButton>\n      </Flex>\n    );\n  }\n  return null;\n}\n\nexport type AsyncThunkActionResult = { requestId: string } & Promise<{\n  meta: { requestStatus: 'fulfilled' | 'rejected' };\n}>;\n\ninterface FormModalProps {\n  // Required Props\n  disclosure: UseDisclosureReturn;\n  method: Method;\n  dispatchThunk: () => AsyncThunkActionResult;\n  // Optional Props\n  sync?: boolean;\n  body?: (onSubmit: () => Promise<void>) => React.ReactNode;\n  dispatchOnOpen?: boolean;\n  initialRef?: React.MutableRefObject<null>;\n  onComplete?: () => void;\n  afterClose?: () => void;\n  pendingMessage?: React.ReactNode;\n  pendingAsyncMessage?: React.ReactNode;\n  completeMessage?: React.ReactNode;\n}\n\nexport default function FormModal(props: FormModalProps) {\n  const { sync = false, dispatchOnOpen = false, onComplete, method } = props;\n  const { isOpen, onOpen, onClose } = props.disclosure;\n  const [requestId, setRequestId] = useState<string | null>(null);\n  const status = useSelector(s => s.status[props.method]);\n  const dispatch = useDispatch();\n  const notification = useSelector(s =>\n    s.notifications.find(\n      n => n.requestId === requestId && n.status === 'pending' && !n.delivered\n    )\n  );\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const onSubmit = async () => {\n    const result = props.dispatchThunk();\n    setRequestId(result.requestId);\n    dispatch(setStatus({ method, status: 'in_transit' }));\n    const requestStatus = (await result).meta.requestStatus;\n    if (requestStatus === 'fulfilled') {\n      dispatch(setStatus({ method, status: sync ? 'complete' : 'ready' }));\n      onComplete?.call(null);\n    }\n  };\n\n  const hasError = status.error !== null;\n\n  useEffect(() => {\n    if (!requestId && isOpen && dispatchOnOpen && !hasError) {\n      onSubmit();\n    }\n  }, [isOpen, dispatchOnOpen, hasError, onSubmit, requestId]);\n\n  const closeAndReset = (withCallback = true) => {\n    onClose();\n    setRequestId(null);\n    dispatch(clearError({ method: props.method }));\n    withCallback && props.afterClose && props.afterClose();\n  };\n\n  const closeIfReadyOrComplete = () => {\n    if (status.status !== 'in_transit' || hasError) {\n      closeAndReset();\n    }\n  };\n\n  useEffect(() => {\n    if (!sync && isOpen && !hasError && notification) {\n      return closeAndReset();\n    } else if (!isOpen && hasError) {\n      return onOpen();\n    }\n  });\n\n  return (\n    <>\n      <Modal\n        isOpen={isOpen}\n        onClose={() => closeIfReadyOrComplete()}\n        initialFocusRef={props.initialRef}\n        closeOnEsc={false}\n        closeOnOverlayClick={false}\n        onEsc={() => closeIfReadyOrComplete()}\n        onOverlayClick={() => closeIfReadyOrComplete()}\n      >\n        <ModalOverlay />\n        <ModalContent mt={40}>\n          {status.status === 'ready' ? (\n            props.body ? (\n              props.body(onSubmit)\n            ) : null\n          ) : (\n            <Content\n              sync={sync}\n              isOpen={isOpen}\n              status={status}\n              onClose={() => closeIfReadyOrComplete()}\n              onCancel={() => closeAndReset(false)}\n              onRetry={() => {\n                dispatch(clearError({ method: props.method }));\n                onSubmit();\n              }}\n              pendingMessage={props.pendingMessage}\n              pendingAsyncMessage={props.pendingAsyncMessage}\n              completeMessage={props.completeMessage}\n            />\n          )}\n        </ModalContent>\n      </Modal>\n    </>\n  );\n}\n\nexport interface BaseModalProps {\n  disclosure: UseDisclosureReturn;\n  sync?: boolean;\n}\n\nexport interface BaseModalButtonProps {\n  sync?: boolean;\n}\n"]},"metadata":{},"sourceType":"module"}