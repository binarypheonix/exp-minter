{"ast":null,"code":"import { TezosToolkit, MichelCodecPacker, Context } from '@taquito/taquito';\nimport { BeaconWallet } from '@taquito/beacon-wallet';\nimport { MetadataProvider, DEFAULT_HANDLERS } from '@taquito/tzip16';\nimport { Tzip12Module } from '@taquito/tzip12';\nimport CustomIpfsHttpHandler from './util/taquito-custom-ipfs-http-handler';\nimport { BetterCallDev } from './service/bcd';\nimport * as tzUtils from './util/tezosToolkit';\nimport { NetworkType } from '@airgap/beacon-sdk';\nimport { TzKt } from './service/tzkt';\nimport { isIpfsUri } from './util/ipfs';\nexport let Status;\n\n(function (Status) {\n  Status[\"Configured\"] = \"Configured\";\n  Status[\"ToolkitConnected\"] = \"ToolkitConnected\";\n  Status[\"WalletConnected\"] = \"WalletConnected\";\n})(Status || (Status = {}));\n\nexport function configure(config) {\n  // Upgrade `edonet` reference in config to `edo2net`. This is done for the\n  // sake of compatibility since the meaning of \"edonet\" is ambiguous: in some\n  // parts of the ecosystem it refers to latest version of edonet, which is also\n  // referred to as \"edo2net\".\n  const compatibilityConfig = { ...config,\n    network: config.network === 'edonet' ? 'edo2net' : config.network\n  };\n  return {\n    status: Status.Configured,\n    config: compatibilityConfig,\n    betterCallDev: new BetterCallDev(compatibilityConfig),\n    tzkt: new TzKt(compatibilityConfig),\n    toolkit: null,\n    wallet: null,\n    walletReconnectAttempted: false,\n    tzPublicKey: null\n  };\n}\n\nfunction createMetadataResolver(system, toolkit, contractAddress) {\n  const ipfsUrl = system.config.ipfsGateway;\n  const ipfsGateway = ipfsUrl.replace(/^https?:\\/\\//, '');\n  const gatewayProtocol = ipfsUrl.startsWith('https') ? 'https' : 'http';\n  const ipfsHandler = new CustomIpfsHttpHandler(ipfsGateway, gatewayProtocol);\n  DEFAULT_HANDLERS.set('ipfs', ipfsHandler);\n  const provider = new MetadataProvider(DEFAULT_HANDLERS);\n  const context = new Context(toolkit.rpc);\n  const defaultContract = toolkit.contract.at(contractAddress);\n  const contractCache = {};\n  return async (uri, address) => {\n    if (isIpfsUri(uri)) {\n      const contract = await defaultContract;\n      return provider.provideMetadata(contract, uri, context);\n    }\n\n    if (!contractCache[address]) {\n      contractCache[address] = await toolkit.contract.at(address);\n    }\n\n    return provider.provideMetadata(contractCache[address], uri, context);\n  };\n}\n\nexport function connectToolkit(system) {\n  const toolkit = new TezosToolkit(system.config.rpc);\n  toolkit.addExtension(new Tzip12Module());\n  toolkit.setPackerProvider(new MichelCodecPacker());\n  const faucetAddress = system.config.contracts.nftFaucet;\n  return { ...system,\n    status: Status.ToolkitConnected,\n    toolkit: toolkit,\n    resolveMetadata: createMetadataResolver(system, toolkit, faucetAddress),\n    walletReconnectAttempted: false\n  };\n}\n\nfunction networkType(config) {\n  if (config.network === 'mainnet') {\n    return NetworkType.MAINNET;\n  }\n\n  if (config.network === 'delphinet') {\n    return NetworkType.DELPHINET;\n  } // Edonet support is split between two network types, edonet and edo2net. For\n  // now, .CUSTOM must be used when referring to edo2net.\n\n\n  if (config.network === 'edonet') {\n    return NetworkType.EDONET;\n  }\n\n  if (config.network === 'edo2net') {\n    return NetworkType.CUSTOM;\n  }\n\n  if (config.network === 'florencenet') {\n    return NetworkType.FLORENCENET;\n  }\n\n  return NetworkType.CUSTOM;\n}\n\nlet wallet = null;\n\nfunction getWallet(system, eventHandlers) {\n  if (wallet === null) {\n    wallet = new BeaconWallet({\n      name: 'OpenSystem dApp',\n      preferredNetwork: networkType(system.config),\n      eventHandlers\n    });\n  }\n\n  return wallet;\n}\n\nasync function initWallet(system, forceConnect, eventHandlers) {\n  const network = networkType(system.config);\n  const wallet = getWallet(system, eventHandlers);\n  const activeAccount = await wallet.client.getActiveAccount();\n\n  if (!activeAccount) {\n    if (forceConnect) {\n      try {\n        await wallet.requestPermissions({\n          network: {\n            type: system.config.network === 'edo2net' ? system.config.network : network,\n            rpcUrl: system.config.rpc\n          }\n        });\n      } catch (error) {\n        // requestPermissions failed - reset wallet selection\n        wallet.clearActiveAccount();\n        throw error;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nasync function createSystemWithWallet(system) {\n  const wallet = getWallet(system);\n  system.toolkit.setWalletProvider(wallet);\n  tzUtils.setConfirmationPollingInterval(system.toolkit);\n  const tzPublicKey = await wallet.getPKH();\n  return { ...system,\n    status: Status.WalletConnected,\n    wallet: wallet,\n    tzPublicKey: tzPublicKey\n  };\n}\n\nexport async function reconnectWallet(system, eventHandlers) {\n  const connected = await initWallet(system, false, eventHandlers);\n\n  if (connected) {\n    const systemWithWallet = await createSystemWithWallet(system);\n    return { ...systemWithWallet,\n      walletReconnectAttempted: true\n    };\n  } else {\n    return { ...system,\n      walletReconnectAttempted: true\n    };\n  }\n}\nexport async function connectWallet(system, eventHandlers) {\n  await initWallet(system, true, eventHandlers);\n  return await createSystemWithWallet(system);\n}\nexport async function disconnectWallet(system) {\n  await system.wallet.disconnect();\n  const toolkit = new TezosToolkit(system.config.rpc);\n  toolkit.setPackerProvider(new MichelCodecPacker());\n  toolkit.addExtension(new Tzip12Module());\n  wallet = null;\n  return { ...system,\n    status: Status.ToolkitConnected,\n    toolkit: toolkit,\n    wallet: null,\n    tzPublicKey: null\n  };\n}\nexport const Minter = {\n  configure,\n  reconnectWallet,\n  connectToolkit,\n  connectWallet,\n  disconnectWallet\n};","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/src/lib/system.ts"],"names":["TezosToolkit","MichelCodecPacker","Context","BeaconWallet","MetadataProvider","DEFAULT_HANDLERS","Tzip12Module","CustomIpfsHttpHandler","BetterCallDev","tzUtils","NetworkType","TzKt","isIpfsUri","Status","configure","config","compatibilityConfig","network","status","Configured","betterCallDev","tzkt","toolkit","wallet","walletReconnectAttempted","tzPublicKey","createMetadataResolver","system","contractAddress","ipfsUrl","ipfsGateway","replace","gatewayProtocol","startsWith","ipfsHandler","set","provider","context","rpc","defaultContract","contract","at","contractCache","uri","address","provideMetadata","connectToolkit","addExtension","setPackerProvider","faucetAddress","contracts","nftFaucet","ToolkitConnected","resolveMetadata","networkType","MAINNET","DELPHINET","EDONET","CUSTOM","FLORENCENET","getWallet","eventHandlers","name","preferredNetwork","initWallet","forceConnect","activeAccount","client","getActiveAccount","requestPermissions","type","rpcUrl","error","clearActiveAccount","createSystemWithWallet","setWalletProvider","setConfirmationPollingInterval","getPKH","WalletConnected","reconnectWallet","connected","systemWithWallet","connectWallet","disconnectWallet","disconnect","Minter"],"mappings":"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","sourcesContent":["import {\n  TezosToolkit,\n  MichelCodecPacker,\n  Context,\n  ContractAbstraction,\n  ContractProvider\n} from '@taquito/taquito';\nimport { BeaconWallet } from '@taquito/beacon-wallet';\nimport { MetadataProvider, DEFAULT_HANDLERS } from '@taquito/tzip16';\nimport { Tzip12Module } from '@taquito/tzip12';\nimport CustomIpfsHttpHandler from './util/taquito-custom-ipfs-http-handler';\nimport { BetterCallDev } from './service/bcd';\nimport * as tzUtils from './util/tezosToolkit';\nimport { DAppClientOptions, NetworkType } from '@airgap/beacon-sdk';\nimport { TzKt } from './service/tzkt';\nimport { isIpfsUri } from './util/ipfs';\n\nexport interface Config {\n  rpc: string;\n  network: string;\n  bcd: {\n    api: string;\n    gui: string;\n  };\n  tzkt: {\n    api: string;\n  };\n  contracts: {\n    nftFaucet: string;\n    marketplace: {\n      fixedPrice: {\n        tez: string;\n      };\n    };\n  };\n  ipfsApi: string;\n  ipfsGateway: string;\n}\n\nexport enum Status {\n  Configured = 'Configured',\n  ToolkitConnected = 'ToolkitConnected',\n  WalletConnected = 'WalletConnected'\n}\n\nexport interface SystemConfigured {\n  status: Status.Configured;\n  config: Config;\n  betterCallDev: BetterCallDev;\n  tzkt: TzKt;\n  toolkit: null;\n  wallet: null;\n  walletReconnectAttempted: boolean;\n  tzPublicKey: null;\n}\n\ntype ResolveMetadata = (\n  uri: string,\n  address: string\n) => ReturnType<MetadataProvider['provideMetadata']>;\n\nexport interface SystemWithToolkit {\n  status: Status.ToolkitConnected;\n  config: Config;\n  betterCallDev: BetterCallDev;\n  tzkt: TzKt;\n  toolkit: TezosToolkit;\n  resolveMetadata: ResolveMetadata;\n  wallet: null;\n  walletReconnectAttempted: boolean;\n  tzPublicKey: null;\n}\n\nexport interface SystemWithWallet {\n  status: Status.WalletConnected;\n  config: Config;\n  betterCallDev: BetterCallDev;\n  tzkt: TzKt;\n  toolkit: TezosToolkit;\n  resolveMetadata: ResolveMetadata;\n  wallet: BeaconWallet;\n  walletReconnectAttempted: boolean;\n  tzPublicKey: string;\n}\n\nexport type System = SystemConfigured | SystemWithToolkit | SystemWithWallet;\n\nexport function configure(config: Config): SystemConfigured {\n  // Upgrade `edonet` reference in config to `edo2net`. This is done for the\n  // sake of compatibility since the meaning of \"edonet\" is ambiguous: in some\n  // parts of the ecosystem it refers to latest version of edonet, which is also\n  // referred to as \"edo2net\".\n  const compatibilityConfig = {\n    ...config,\n    network: config.network === 'edonet' ? 'edo2net' : config.network\n  };\n  return {\n    status: Status.Configured,\n    config: compatibilityConfig,\n    betterCallDev: new BetterCallDev(compatibilityConfig),\n    tzkt: new TzKt(compatibilityConfig),\n    toolkit: null,\n    wallet: null,\n    walletReconnectAttempted: false,\n    tzPublicKey: null\n  };\n}\n\nfunction createMetadataResolver(\n  system: SystemConfigured,\n  toolkit: TezosToolkit,\n  contractAddress: string\n): ResolveMetadata {\n  const ipfsUrl = system.config.ipfsGateway;\n  const ipfsGateway = ipfsUrl.replace(/^https?:\\/\\//, '');\n  const gatewayProtocol = ipfsUrl.startsWith('https') ? 'https' : 'http';\n\n  const ipfsHandler = new CustomIpfsHttpHandler(ipfsGateway, gatewayProtocol);\n  DEFAULT_HANDLERS.set('ipfs', ipfsHandler);\n  const provider = new MetadataProvider(DEFAULT_HANDLERS);\n  const context = new Context(toolkit.rpc);\n\n  const defaultContract = toolkit.contract.at(contractAddress);\n  type Contract = ContractAbstraction<ContractProvider>;\n  const contractCache: Record<string, Contract> = {};\n\n  return async (uri, address) => {\n    if (isIpfsUri(uri)) {\n      const contract = await defaultContract;\n      return provider.provideMetadata(contract, uri, context);\n    }\n    if (!contractCache[address]) {\n      contractCache[address] = await toolkit.contract.at(address);\n    }\n    return provider.provideMetadata(contractCache[address], uri, context);\n  };\n}\n\nexport function connectToolkit(system: SystemConfigured): SystemWithToolkit {\n  const toolkit = new TezosToolkit(system.config.rpc);\n  toolkit.addExtension(new Tzip12Module());\n  toolkit.setPackerProvider(new MichelCodecPacker());\n  const faucetAddress = system.config.contracts.nftFaucet;\n  return {\n    ...system,\n    status: Status.ToolkitConnected,\n    toolkit: toolkit,\n    resolveMetadata: createMetadataResolver(system, toolkit, faucetAddress),\n    walletReconnectAttempted: false\n  };\n}\n\nfunction networkType(config: Config) {\n  if (config.network === 'mainnet') {\n    return NetworkType.MAINNET;\n  }\n  if (config.network === 'delphinet') {\n    return NetworkType.DELPHINET;\n  }\n  // Edonet support is split between two network types, edonet and edo2net. For\n  // now, .CUSTOM must be used when referring to edo2net.\n  if (config.network === 'edonet') {\n    return NetworkType.EDONET;\n  }\n  if (config.network === 'edo2net') {\n    return NetworkType.CUSTOM;\n  }\n  if (config.network === 'florencenet') {\n    return NetworkType.FLORENCENET;\n  }\n  return NetworkType.CUSTOM;\n}\n\nlet wallet: BeaconWallet | null = null;\n\nfunction getWallet(\n  system: SystemWithToolkit,\n  eventHandlers?: DAppClientOptions['eventHandlers']\n): BeaconWallet {\n  if (wallet === null) {\n    wallet = new BeaconWallet({\n      name: 'OpenSystem dApp',\n      preferredNetwork: networkType(system.config),\n      eventHandlers\n    });\n  }\n  return wallet;\n}\n\nasync function initWallet(\n  system: SystemWithToolkit,\n  forceConnect: boolean,\n  eventHandlers?: DAppClientOptions['eventHandlers']\n): Promise<boolean> {\n  const network = networkType(system.config);\n  const wallet = getWallet(system, eventHandlers);\n\n  const activeAccount = await wallet.client.getActiveAccount();\n\n  if (!activeAccount) {\n    if (forceConnect) {\n      try {\n        await wallet.requestPermissions({\n          network: {\n            type:\n              system.config.network === 'edo2net'\n                ? (system.config.network as NetworkType)\n                : network,\n            rpcUrl: system.config.rpc\n          }\n        });\n      } catch (error) {\n        // requestPermissions failed - reset wallet selection\n        wallet.clearActiveAccount();\n        throw error;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nasync function createSystemWithWallet(\n  system: SystemWithToolkit\n): Promise<SystemWithWallet> {\n  const wallet = getWallet(system);\n\n  system.toolkit.setWalletProvider(wallet);\n  tzUtils.setConfirmationPollingInterval(system.toolkit);\n\n  const tzPublicKey = await wallet.getPKH();\n\n  return {\n    ...system,\n    status: Status.WalletConnected,\n    wallet: wallet,\n    tzPublicKey: tzPublicKey\n  };\n}\n\nexport async function reconnectWallet(\n  system: SystemWithToolkit,\n  eventHandlers?: DAppClientOptions['eventHandlers']\n): Promise<SystemWithWallet | SystemWithToolkit> {\n  const connected = await initWallet(system, false, eventHandlers);\n  if (connected) {\n    const systemWithWallet = await createSystemWithWallet(system);\n    return { ...systemWithWallet, walletReconnectAttempted: true };\n  } else {\n    return { ...system, walletReconnectAttempted: true };\n  }\n}\n\nexport async function connectWallet(\n  system: SystemWithToolkit,\n  eventHandlers?: DAppClientOptions['eventHandlers']\n): Promise<SystemWithWallet> {\n  await initWallet(system, true, eventHandlers);\n  return await createSystemWithWallet(system);\n}\n\nexport async function disconnectWallet(\n  system: SystemWithWallet\n): Promise<SystemWithToolkit> {\n  await system.wallet.disconnect();\n  const toolkit = new TezosToolkit(system.config.rpc);\n  toolkit.setPackerProvider(new MichelCodecPacker());\n  toolkit.addExtension(new Tzip12Module());\n  wallet = null;\n  return {\n    ...system,\n    status: Status.ToolkitConnected,\n    toolkit: toolkit,\n    wallet: null,\n    tzPublicKey: null\n  };\n}\n\nexport const Minter = {\n  configure,\n  reconnectWallet,\n  connectToolkit,\n  connectWallet,\n  disconnectWallet\n};\n"]},"metadata":{},"sourceType":"module"}