{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.showNumber = exports.showString = exports.showBoolean = exports.getStructShow = exports.getTupleShow = exports.tuple = exports.struct = void 0;\n/**\n * The `Show` type class represents those types which can be converted into\n * a human-readable `string` representation.\n *\n * While not required, it is recommended that for any expression `x`, the\n * string `show(x)` be executable TypeScript code which evaluates to the same\n * value as the expression `x`.\n *\n * @since 2.0.0\n */\n\nvar _ = __importStar(require(\"./internal\")); // -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n\n/**\n * @category combinators\n * @since 2.10.0\n */\n\n\nvar struct = function struct(shows) {\n  return {\n    show: function show(a) {\n      var s = '{';\n\n      for (var k in shows) {\n        if (_.has.call(shows, k)) {\n          s += \" \" + k + \": \" + shows[k].show(a[k]) + \",\";\n        }\n      }\n\n      if (s.length > 1) {\n        s = s.slice(0, -1) + ' ';\n      }\n\n      s += '}';\n      return s;\n    }\n  };\n};\n\nexports.struct = struct;\n/**\n * @category combinators\n * @since 2.10.0\n */\n\nvar tuple = function tuple() {\n  var shows = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    shows[_i] = arguments[_i];\n  }\n\n  return {\n    show: function show(t) {\n      return \"[\" + t.map(function (a, i) {\n        return shows[i].show(a);\n      }).join(', ') + \"]\";\n    }\n  };\n};\n\nexports.tuple = tuple; // -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n\n/**\n * Use [`tuple`](#tuple) instead.\n *\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\n\nexports.getTupleShow = exports.tuple;\n/**\n * Use [`struct`](#struct) instead.\n *\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\n\nexports.getStructShow = exports.struct;\n/**\n * Use [`Show`](./boolean.ts.html#Show) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexports.showBoolean = {\n  show: function show(a) {\n    return JSON.stringify(a);\n  }\n};\n/**\n * Use [`Show`](./string.ts.html#Show) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexports.showString = {\n  show: function show(a) {\n    return JSON.stringify(a);\n  }\n};\n/**\n * Use [`Show`](./number.ts.html#Show) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexports.showNumber = {\n  show: function show(a) {\n    return JSON.stringify(a);\n  }\n};","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/node_modules/fp-ts/lib/Show.js"],"names":["__createBinding","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__setModuleDefault","v","value","__importStar","mod","__esModule","result","prototype","hasOwnProperty","call","exports","showNumber","showString","showBoolean","getStructShow","getTupleShow","tuple","struct","_","require","shows","show","a","s","has","length","slice","_i","arguments","t","map","i","join","JSON","stringify"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.showNumber = exports.showString = exports.showBoolean = exports.getStructShow = exports.getTupleShow = exports.tuple = exports.struct = void 0;\n/**\n * The `Show` type class represents those types which can be converted into\n * a human-readable `string` representation.\n *\n * While not required, it is recommended that for any expression `x`, the\n * string `show(x)` be executable TypeScript code which evaluates to the same\n * value as the expression `x`.\n *\n * @since 2.0.0\n */\nvar _ = __importStar(require(\"./internal\"));\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * @category combinators\n * @since 2.10.0\n */\nvar struct = function (shows) { return ({\n    show: function (a) {\n        var s = '{';\n        for (var k in shows) {\n            if (_.has.call(shows, k)) {\n                s += \" \" + k + \": \" + shows[k].show(a[k]) + \",\";\n            }\n        }\n        if (s.length > 1) {\n            s = s.slice(0, -1) + ' ';\n        }\n        s += '}';\n        return s;\n    }\n}); };\nexports.struct = struct;\n/**\n * @category combinators\n * @since 2.10.0\n */\nvar tuple = function () {\n    var shows = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        shows[_i] = arguments[_i];\n    }\n    return ({\n        show: function (t) { return \"[\" + t.map(function (a, i) { return shows[i].show(a); }).join(', ') + \"]\"; }\n    });\n};\nexports.tuple = tuple;\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use [`tuple`](#tuple) instead.\n *\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\nexports.getTupleShow = exports.tuple;\n/**\n * Use [`struct`](#struct) instead.\n *\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\nexports.getStructShow = exports.struct;\n/**\n * Use [`Show`](./boolean.ts.html#Show) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexports.showBoolean = {\n    show: function (a) { return JSON.stringify(a); }\n};\n/**\n * Use [`Show`](./string.ts.html#Show) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexports.showString = {\n    show: function (a) { return JSON.stringify(a); }\n};\n/**\n * Use [`Show`](./number.ts.html#Show) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexports.showNumber = {\n    show: function (a) { return JSON.stringify(a); }\n};\n"]},"metadata":{},"sourceType":"script"}