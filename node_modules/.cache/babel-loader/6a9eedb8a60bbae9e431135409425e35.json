{"ast":null,"code":"import React,{useEffect,useRef}from'react';// Based on https://github.com/olistic/react-use-visibility#readme MIT License\nfunction isElementNearViewport(element){var allowedDistanceToViewport=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;var _element$getBoundingC=element.getBoundingClientRect(),top=_element$getBoundingC.top,right=_element$getBoundingC.right,bottom=_element$getBoundingC.bottom,left=_element$getBoundingC.left,height=_element$getBoundingC.height,width=_element$getBoundingC.width;var windowWidth=window.innerWidth;var windowHeight=window.innerHeight;var topCheck=top+height;var leftCheck=left+width;var bottomCheck=bottom-height;var rightCheck=right-width;return topCheck>=-allowedDistanceToViewport&&leftCheck>=-allowedDistanceToViewport&&bottomCheck<=windowHeight+allowedDistanceToViewport&&rightCheck<=windowWidth+allowedDistanceToViewport;}/** Simple Cross Browser Visibility Trigger */export var useVisibilityTrigger=function useVisibilityTrigger(elementRef,onVisible){var allowedDistanceToViewport=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var hasTriggered=useRef(false);useEffect(function(){var intervalId=setInterval(function(){if(hasTriggered.current){return;}if(!elementRef.current){return;}if(!isElementNearViewport(elementRef.current,allowedDistanceToViewport)){return;}hasTriggered.current=true;onVisible();},100);return function(){return clearInterval(intervalId);};},[allowedDistanceToViewport,elementRef,onVisible]);return{reset:function reset(){hasTriggered.current=false;}};};export var VisibilityTrigger=function VisibilityTrigger(_ref){var onVisible=_ref.onVisible,allowedDistanceToViewport=_ref.allowedDistanceToViewport;var divRef=useRef(null);useVisibilityTrigger(divRef,onVisible,allowedDistanceToViewport!==null&&allowedDistanceToViewport!==void 0?allowedDistanceToViewport:0);return/*#__PURE__*/React.createElement(\"div\",{ref:divRef});};","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/src/components/common/VisibilityTrigger.tsx"],"names":["React","useEffect","useRef","isElementNearViewport","element","allowedDistanceToViewport","getBoundingClientRect","top","right","bottom","left","height","width","windowWidth","window","innerWidth","windowHeight","innerHeight","topCheck","leftCheck","bottomCheck","rightCheck","useVisibilityTrigger","elementRef","onVisible","hasTriggered","intervalId","setInterval","current","clearInterval","reset","VisibilityTrigger","divRef"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,MAA3B,KAAyC,OAAzC,CAEA;AACA,QAASC,CAAAA,qBAAT,CACEC,OADF,CAGE,IADAC,CAAAA,yBACA,2DAD4B,CAC5B,CACA,0BAOID,OAAO,CAACE,qBAAR,EAPJ,CACEC,GADF,uBACEA,GADF,CAEEC,KAFF,uBAEEA,KAFF,CAGEC,MAHF,uBAGEA,MAHF,CAIEC,IAJF,uBAIEA,IAJF,CAKEC,MALF,uBAKEA,MALF,CAMEC,KANF,uBAMEA,KANF,CASA,GAAMC,CAAAA,WAAW,CAAGC,MAAM,CAACC,UAA3B,CACA,GAAMC,CAAAA,YAAY,CAAGF,MAAM,CAACG,WAA5B,CAEA,GAAMC,CAAAA,QAAQ,CAAGX,GAAG,CAAGI,MAAvB,CACA,GAAMQ,CAAAA,SAAS,CAAGT,IAAI,CAAGE,KAAzB,CACA,GAAMQ,CAAAA,WAAW,CAAGX,MAAM,CAAGE,MAA7B,CACA,GAAMU,CAAAA,UAAU,CAAGb,KAAK,CAAGI,KAA3B,CAEA,MACEM,CAAAA,QAAQ,EAAI,CAACb,yBAAb,EACAc,SAAS,EAAI,CAACd,yBADd,EAEAe,WAAW,EAAIJ,YAAY,CAAGX,yBAF9B,EAGAgB,UAAU,EAAIR,WAAW,CAAGR,yBAJ9B,CAMD,CAED,8CACA,MAAO,IAAMiB,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAClCC,UADkC,CAElCC,SAFkC,CAI/B,IADHnB,CAAAA,yBACG,2DADyB,CACzB,CACH,GAAMoB,CAAAA,YAAY,CAAGvB,MAAM,CAAC,KAAD,CAA3B,CAEAD,SAAS,CAAC,UAAM,CACd,GAAMyB,CAAAA,UAAU,CAAGC,WAAW,CAAC,UAAM,CACnC,GAAIF,YAAY,CAACG,OAAjB,CAA0B,CACxB,OACD,CACD,GAAI,CAACL,UAAU,CAACK,OAAhB,CAAyB,CACvB,OACD,CAED,GACE,CAACzB,qBAAqB,CAACoB,UAAU,CAACK,OAAZ,CAAqBvB,yBAArB,CADxB,CAEE,CACA,OACD,CAEDoB,YAAY,CAACG,OAAb,CAAuB,IAAvB,CACAJ,SAAS,GACV,CAhB6B,CAgB3B,GAhB2B,CAA9B,CAiBA,MAAO,kBAAMK,CAAAA,aAAa,CAACH,UAAD,CAAnB,EAAP,CACD,CAnBQ,CAmBN,CAACrB,yBAAD,CAA4BkB,UAA5B,CAAwCC,SAAxC,CAnBM,CAAT,CAqBA,MAAO,CACLM,KAAK,CAAE,gBAAM,CACXL,YAAY,CAACG,OAAb,CAAuB,KAAvB,CACD,CAHI,CAAP,CAKD,CAjCM,CAmCP,MAAO,IAAMG,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,MAM3B,IALJP,CAAAA,SAKI,MALJA,SAKI,CAJJnB,yBAII,MAJJA,yBAII,CACJ,GAAM2B,CAAAA,MAAM,CAAG9B,MAAM,CAAC,IAAD,CAArB,CACAoB,oBAAoB,CAACU,MAAD,CAASR,SAAT,CAAoBnB,yBAApB,SAAoBA,yBAApB,UAAoBA,yBAApB,CAAiD,CAAjD,CAApB,CAEA,mBAAO,2BAAK,GAAG,CAAE2B,MAAV,EAAP,CACD,CAXM","sourcesContent":["import React, { useEffect, useRef } from 'react';\n\n// Based on https://github.com/olistic/react-use-visibility#readme MIT License\nfunction isElementNearViewport(\n  element: HTMLElement,\n  allowedDistanceToViewport = 0\n) {\n  const {\n    top,\n    right,\n    bottom,\n    left,\n    height,\n    width\n  } = element.getBoundingClientRect();\n\n  const windowWidth = window.innerWidth;\n  const windowHeight = window.innerHeight;\n\n  const topCheck = top + height;\n  const leftCheck = left + width;\n  const bottomCheck = bottom - height;\n  const rightCheck = right - width;\n\n  return (\n    topCheck >= -allowedDistanceToViewport &&\n    leftCheck >= -allowedDistanceToViewport &&\n    bottomCheck <= windowHeight + allowedDistanceToViewport &&\n    rightCheck <= windowWidth + allowedDistanceToViewport\n  );\n}\n\n/** Simple Cross Browser Visibility Trigger */\nexport const useVisibilityTrigger = (\n  elementRef: { current: undefined | null | HTMLElement },\n  onVisible: () => void,\n  allowedDistanceToViewport = 0\n) => {\n  const hasTriggered = useRef(false);\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      if (hasTriggered.current) {\n        return;\n      }\n      if (!elementRef.current) {\n        return;\n      }\n\n      if (\n        !isElementNearViewport(elementRef.current, allowedDistanceToViewport)\n      ) {\n        return;\n      }\n\n      hasTriggered.current = true;\n      onVisible();\n    }, 100);\n    return () => clearInterval(intervalId);\n  }, [allowedDistanceToViewport, elementRef, onVisible]);\n\n  return {\n    reset: () => {\n      hasTriggered.current = false;\n    }\n  };\n};\n\nexport const VisibilityTrigger = ({\n  onVisible,\n  allowedDistanceToViewport\n}: {\n  onVisible: () => void;\n  allowedDistanceToViewport?: number;\n}) => {\n  const divRef = useRef(null as null | HTMLDivElement);\n  useVisibilityTrigger(divRef, onVisible, allowedDistanceToViewport ?? 0);\n\n  return <div ref={divRef} />;\n};\n"]},"metadata":{},"sourceType":"module"}