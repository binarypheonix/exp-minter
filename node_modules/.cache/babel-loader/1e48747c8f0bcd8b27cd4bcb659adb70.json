{"ast":null,"code":"import _objectSpread from\"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{createSlice}from'@reduxjs/toolkit';import{pushNotification,readNotification,deliverNotification}from'./notificationsActions';import{createAssetContractAction,mintTokenAction,transferTokenAction,listTokenAction,cancelTokenSaleAction,buyTokenAction}from'../async/actions';import{connectWallet,disconnectWallet}from'../async/wallet';import{getContractNftsQuery,getNftAssetContractQuery,getWalletAssetContractsQuery}from'../async/queries';var initialState=[];var slice=createSlice({name:'notifications',initialState:initialState,reducers:{},extraReducers:function extraReducers(_ref){var addCase=_ref.addCase;addCase(pushNotification,function(state,_ref2){var payload=_ref2.payload;state.push(payload);});addCase(readNotification,function(state,_ref3){var requestId=_ref3.payload;return state.map(function(n){return n.requestId===requestId?_objectSpread(_objectSpread({},n),{},{read:true}):n;});});addCase(deliverNotification,function(state,_ref4){var requestId=_ref4.payload;return state.map(function(n){return n.requestId===requestId?_objectSpread(_objectSpread({},n),{},{delivered:true}):n;});});// Action errors are abstracted by their payloads. This allows us to iterate\n// through a list of actions and assign a notification without individually\n// matching against each one through `addCase`\n[createAssetContractAction,mintTokenAction,transferTokenAction,listTokenAction,cancelTokenSaleAction,buyTokenAction,getContractNftsQuery,getNftAssetContractQuery,getWalletAssetContractsQuery,connectWallet,disconnectWallet].forEach(function(action){addCase(action.rejected,function(state,_ref5){var meta=_ref5.meta,payload=_ref5.payload;if(!payload){return;}state.push({requestId:meta.requestId,read:false,delivered:false,status:'error',title:'Error',description:payload.message,kind:payload.kind});});});}});export default slice;","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/src/reducer/slices/notifications.ts"],"names":["createSlice","pushNotification","readNotification","deliverNotification","createAssetContractAction","mintTokenAction","transferTokenAction","listTokenAction","cancelTokenSaleAction","buyTokenAction","connectWallet","disconnectWallet","getContractNftsQuery","getNftAssetContractQuery","getWalletAssetContractsQuery","initialState","slice","name","reducers","extraReducers","addCase","state","payload","push","requestId","map","n","read","delivered","forEach","action","rejected","meta","status","title","description","message","kind"],"mappings":"yJAAA,OAASA,WAAT,KAA4B,kBAA5B,CACA,OACEC,gBADF,CAEEC,gBAFF,CAGEC,mBAHF,KAIO,wBAJP,CAKA,OACEC,yBADF,CAEEC,eAFF,CAGEC,mBAHF,CAIEC,eAJF,CAKEC,qBALF,CAMEC,cANF,KAOO,kBAPP,CAQA,OAASC,aAAT,CAAwBC,gBAAxB,KAAgD,iBAAhD,CACA,OACEC,oBADF,CAEEC,wBAFF,CAGEC,4BAHF,KAIO,kBAJP,CAmBA,GAAMC,CAAAA,YAA+B,CAAG,EAAxC,CAEA,GAAMC,CAAAA,KAAK,CAAGhB,WAAW,CAAC,CACxBiB,IAAI,CAAE,eADkB,CAExBF,YAAY,CAAZA,YAFwB,CAGxBG,QAAQ,CAAE,EAHc,CAIxBC,aAAa,CAAE,4BAAiB,IAAdC,CAAAA,OAAc,MAAdA,OAAc,CAC9BA,OAAO,CAACnB,gBAAD,CAAmB,SAACoB,KAAD,OAAwB,IAAdC,CAAAA,OAAc,OAAdA,OAAc,CAChDD,KAAK,CAACE,IAAN,CAAWD,OAAX,EACD,CAFM,CAAP,CAIAF,OAAO,CAAClB,gBAAD,CAAmB,SAACmB,KAAD,OAAmC,IAAhBG,CAAAA,SAAgB,OAAzBF,OAAyB,CAC3D,MAAOD,CAAAA,KAAK,CAACI,GAAN,CAAU,SAAAC,CAAC,CAAI,CACpB,MAAOA,CAAAA,CAAC,CAACF,SAAF,GAAgBA,SAAhB,gCAAiCE,CAAjC,MAAoCC,IAAI,CAAE,IAA1C,GAAmDD,CAA1D,CACD,CAFM,CAAP,CAGD,CAJM,CAAP,CAMAN,OAAO,CAACjB,mBAAD,CAAsB,SAACkB,KAAD,OAAmC,IAAhBG,CAAAA,SAAgB,OAAzBF,OAAyB,CAC9D,MAAOD,CAAAA,KAAK,CAACI,GAAN,CAAU,SAAAC,CAAC,CAAI,CACpB,MAAOA,CAAAA,CAAC,CAACF,SAAF,GAAgBA,SAAhB,gCAAiCE,CAAjC,MAAoCE,SAAS,CAAE,IAA/C,GAAwDF,CAA/D,CACD,CAFM,CAAP,CAGD,CAJM,CAAP,CAMA;AACA;AACA;AACA,CACEtB,yBADF,CAEEC,eAFF,CAGEC,mBAHF,CAIEC,eAJF,CAKEC,qBALF,CAMEC,cANF,CAOEG,oBAPF,CAQEC,wBARF,CASEC,4BATF,CAUEJ,aAVF,CAWEC,gBAXF,EAYEkB,OAZF,CAYU,SAAAC,MAAM,CAAI,CAClBV,OAAO,CAACU,MAAM,CAACC,QAAR,CAAkB,SAACV,KAAD,OAA8B,IAApBW,CAAAA,IAAoB,OAApBA,IAAoB,CAAdV,OAAc,OAAdA,OAAc,CACrD,GAAI,CAACA,OAAL,CAAc,CACZ,OACD,CACDD,KAAK,CAACE,IAAN,CAAW,CACTC,SAAS,CAAEQ,IAAI,CAACR,SADP,CAETG,IAAI,CAAE,KAFG,CAGTC,SAAS,CAAE,KAHF,CAITK,MAAM,CAAE,OAJC,CAKTC,KAAK,CAAE,OALE,CAMTC,WAAW,CAAEb,OAAO,CAACc,OANZ,CAOTC,IAAI,CAAEf,OAAO,CAACe,IAPL,CAAX,EASD,CAbM,CAAP,CAcD,CA3BD,EA4BD,CApDuB,CAAD,CAAzB,CAuDA,cAAerB,CAAAA,KAAf","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport {\n  pushNotification,\n  readNotification,\n  deliverNotification\n} from './notificationsActions';\nimport {\n  createAssetContractAction,\n  mintTokenAction,\n  transferTokenAction,\n  listTokenAction,\n  cancelTokenSaleAction,\n  buyTokenAction\n} from '../async/actions';\nimport { connectWallet, disconnectWallet } from '../async/wallet';\nimport {\n  getContractNftsQuery,\n  getNftAssetContractQuery,\n  getWalletAssetContractsQuery\n} from '../async/queries';\nimport { ErrorKind } from '../async/errors';\n\nexport interface Notification {\n  requestId: string;\n  read: boolean;\n  delivered: boolean;\n  status: 'success' | 'pending' | 'error';\n  title: string;\n  description: string;\n  kind: ErrorKind | null;\n}\n\nexport type NotificationState = Notification[];\n\nconst initialState: NotificationState = [];\n\nconst slice = createSlice({\n  name: 'notifications',\n  initialState,\n  reducers: {},\n  extraReducers: ({ addCase }) => {\n    addCase(pushNotification, (state, { payload }) => {\n      state.push(payload);\n    });\n\n    addCase(readNotification, (state, { payload: requestId }) => {\n      return state.map(n => {\n        return n.requestId === requestId ? { ...n, read: true } : n;\n      });\n    });\n\n    addCase(deliverNotification, (state, { payload: requestId }) => {\n      return state.map(n => {\n        return n.requestId === requestId ? { ...n, delivered: true } : n;\n      });\n    });\n\n    // Action errors are abstracted by their payloads. This allows us to iterate\n    // through a list of actions and assign a notification without individually\n    // matching against each one through `addCase`\n    [\n      createAssetContractAction,\n      mintTokenAction,\n      transferTokenAction,\n      listTokenAction,\n      cancelTokenSaleAction,\n      buyTokenAction,\n      getContractNftsQuery,\n      getNftAssetContractQuery,\n      getWalletAssetContractsQuery,\n      connectWallet,\n      disconnectWallet\n    ].forEach(action => {\n      addCase(action.rejected, (state, { meta, payload }) => {\n        if (!payload) {\n          return;\n        }\n        state.push({\n          requestId: meta.requestId,\n          read: false,\n          delivered: false,\n          status: 'error',\n          title: 'Error',\n          description: payload.message,\n          kind: payload.kind\n        });\n      });\n    });\n  }\n});\n\nexport default slice;\n"]},"metadata":{},"sourceType":"module"}