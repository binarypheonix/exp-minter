{"ast":null,"code":"import _regeneratorRuntime from \"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport * as bs58check from 'bs58check';\n/**\n * @internalapi\n *\n * The Serializer is used to serialize / deserialize JSON objects and encode them with bs58check\n */\n\nexport var Serializer = /*#__PURE__*/function () {\n  function Serializer() {\n    _classCallCheck(this, Serializer);\n  }\n\n  _createClass(Serializer, [{\n    key: \"serialize\",\n    value:\n    /**\n     * Serialize and bs58check encode an object\n     *\n     * @param message JSON object to serialize\n     */\n    function serialize(message) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var str;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                str = JSON.stringify(message);\n                return _context.abrupt(\"return\", bs58check.encode(Buffer.from(str)));\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n    }\n    /**\n     * Deserialize a bs58check encoded string\n     *\n     * @param encoded String to be deserialized\n     */\n\n  }, {\n    key: \"deserialize\",\n    value: function deserialize(encoded) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(typeof encoded !== 'string')) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw new Error('Encoded payload needs to be a string');\n\n              case 2:\n                return _context2.abrupt(\"return\", JSON.parse(bs58check.decode(encoded).toString()));\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n    }\n  }]);\n\n  return Serializer;\n}();","map":{"version":3,"sources":["../../src/Serializer.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAK,SAAZ,MAA2B,WAA3B;AAEA;;;;AAIG;;AACH,WAAa,UAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AACE;;;;AAIG;AACU,uBAAU,OAAV,EAA0B;;;;;;;AAC/B,gBAAA,G,GAAM,IAAI,CAAC,SAAL,CAAe,OAAf,C;iDAEL,SAAS,CAAC,MAAV,CAAiB,MAAM,CAAC,IAAP,CAAY,GAAZ,CAAjB,C;;;;;;;;;AACR;AAED;;;;AAIG;;AAhBL;AAAA;AAAA,WAiBe,qBAAY,OAAZ,EAA2B;;;;;;sBAClC,OAAO,OAAP,KAAmB,Q;;;;;sBACf,IAAI,KAAJ,CAAU,sCAAV,C;;;kDAGD,IAAI,CAAC,KAAL,CAAW,SAAS,CAAC,MAAV,CAAiB,OAAjB,EAA0B,QAA1B,EAAX,C;;;;;;;;;AACR;AAvBH;;AAAA;AAAA","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as bs58check from 'bs58check';\n/**\n * @internalapi\n *\n * The Serializer is used to serialize / deserialize JSON objects and encode them with bs58check\n */\nexport class Serializer {\n    /**\n     * Serialize and bs58check encode an object\n     *\n     * @param message JSON object to serialize\n     */\n    serialize(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const str = JSON.stringify(message);\n            return bs58check.encode(Buffer.from(str));\n        });\n    }\n    /**\n     * Deserialize a bs58check encoded string\n     *\n     * @param encoded String to be deserialized\n     */\n    deserialize(encoded) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof encoded !== 'string') {\n                throw new Error('Encoded payload needs to be a string');\n            }\n            return JSON.parse(bs58check.decode(encoded).toString());\n        });\n    }\n}\n//# sourceMappingURL=Serializer.js.map"]},"metadata":{},"sourceType":"module"}