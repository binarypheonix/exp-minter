{"ast":null,"code":"import _toConsumableArray from \"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable no-console */\nimport { getDebugEnabled } from '../debug'; // Code taken from https://www.bennadel.com/blog/3941-styling-console-log-output-formatting-with-css.htm\n// const echo = (() => {\n//   let queue: any[] = []\n//   const ECHO_TOKEN = {}\n//   const RESET_INPUT = '%c '\n//   const RESET_CSS = ''\n//   // Attach formatting utility method.\n//   function alertFormatting(value: any): any {\n//     queue.push({\n//       value: value,\n//       css:\n//         'display: inline-block ; background-color: #e0005a ; color: #ffffff ; font-weight: bold ; padding: 3px 7px 3px 7px ; border-radius: 3px 3px 3px 3px ;'\n//     })\n//     return ECHO_TOKEN\n//   }\n//   // Attach formatting utility method.\n//   function warningFormatting(value: any): any {\n//     queue.push({\n//       value: value,\n//       css:\n//         'display: inline-block ; background-color: gold ; color: black ; font-weight: bold ; padding: 3px 7px 3px 7px ; border-radius: 3px 3px 3px 3px ;'\n//     })\n//     return ECHO_TOKEN\n//   }\n//   // I provide an echo-based proxy to the given Console Function. This uses an\n//   // internal queue to aggregate values before calling the given Console\n//   // Function with the desired formatting.\n//   function using(consoleFunction: any): any {\n//     function consoleFunctionProxy() {\n//       // As we loop over the arguments, we're going to aggregate a set of\n//       // inputs and modifiers. The Inputs will ultimately be collapsed down\n//       // into a single string that acts as the first console.log parameter\n//       // while the modifiers are then SPREAD into console.log as 2...N.\n//       // --\n//       // NOTE: After each input/modifier pair, I'm adding a RESET pairing.\n//       // This implicitly resets the CSS after every formatted pairing.\n//       var inputs = []\n//       var modifiers = []\n//       for (var i = 0; i < arguments.length; i++) {\n//         // When the formatting utility methods are called, they return\n//         // a special token. This indicates that we should pull the\n//         // corresponding value out of the QUEUE instead of trying to\n//         // output the given argument directly.\n//         if (arguments[i] === ECHO_TOKEN) {\n//           var item = queue.shift()\n//           inputs.push('%c' + item.value, RESET_INPUT)\n//           modifiers.push(item.css, RESET_CSS)\n//           // For every other argument type, output the value directly.\n//         } else {\n//           var arg = arguments[i]\n//           if (typeof arg === 'object' || typeof arg === 'function') {\n//             inputs.push('%o', RESET_INPUT)\n//             modifiers.push(arg, RESET_CSS)\n//           } else {\n//             inputs.push('%c' + arg, RESET_INPUT)\n//             modifiers.push(RESET_CSS, RESET_CSS)\n//           }\n//         }\n//       }\n//       consoleFunction(inputs.join(''), ...modifiers)\n//       // Once we output the aggregated value, reset the queue. This should have\n//       // already been emptied by the .shift() calls; but the explicit reset\n//       // here acts as both a marker of intention as well as a fail-safe.\n//       queue = []\n//     }\n//     return consoleFunctionProxy\n//   }\n//   return {\n//     // Console(ish) functions.\n//     log: using(console.log),\n//     warn: using(console.warn),\n//     error: using(console.error),\n//     trace: using(console.trace),\n//     group: using(console.group),\n//     groupEnd: using(console.groupEnd),\n//     // Formatting functions.\n//     asAlert: alertFormatting,\n//     asWarning: warningFormatting\n//   }\n// })()\n\n/**\n * The logger that is used internally\n */\n\nexport var Logger = /*#__PURE__*/function () {\n  function Logger(service) {\n    _classCallCheck(this, Logger);\n\n    this.name = service;\n  }\n\n  _createClass(Logger, [{\n    key: \"debug\",\n    value: function debug(method) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      this._log('debug', method, args);\n    }\n  }, {\n    key: \"log\",\n    value: function log(method) {\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      this._log('log', method, args);\n    }\n  }, {\n    key: \"warn\",\n    value: function warn(method) {\n      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n        args[_key3 - 1] = arguments[_key3];\n      }\n\n      this._log('warn', method, args);\n    }\n  }, {\n    key: \"error\",\n    value: function error(method) {\n      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        args[_key4 - 1] = arguments[_key4];\n      }\n\n      this._log('error', method, args);\n    }\n  }, {\n    key: \"_log\",\n    value: function _log(type, method) {\n      var _console, _console2, _console3, _console4;\n\n      var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n      if (!getDebugEnabled()) {\n        return;\n      }\n\n      var groupText = \"[BEACON] \".concat(new Date().toISOString(), \" [\").concat(this.name, \"](\").concat(method, \")\");\n      var data = args;\n\n      if (args[0] && typeof args[0] === 'string') {\n        groupText += \" \".concat(args[0]);\n        data = args.slice(1);\n      }\n\n      switch (type) {\n        case 'error':\n          console.group(groupText);\n\n          (_console = console).error.apply(_console, _toConsumableArray(data));\n\n          break;\n\n        case 'warn':\n          console.group(groupText);\n\n          (_console2 = console).warn.apply(_console2, _toConsumableArray(data));\n\n          break;\n\n        case 'debug':\n          console.groupCollapsed(groupText);\n\n          (_console3 = console).debug.apply(_console3, _toConsumableArray(data));\n\n          break;\n\n        default:\n          console.group(groupText);\n\n          (_console4 = console).log.apply(_console4, _toConsumableArray(data));\n\n      }\n\n      console.groupEnd(); // echo.group(echo.asWarning(`[BEACON] ${message}`))\n      // echo.log(echo.asWarning(`[${this.name}]`), echo.asAlert(`(${method})`), ...args)\n      // echo.groupEnd()\n    }\n  }]);\n\n  return Logger;\n}();","map":{"version":3,"sources":["../../../src/utils/Logger.ts"],"names":[],"mappings":";;;;AAAA;;AACA;AAEA,SAAS,eAAT,QAAgC,UAAhC,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEG;;AACH,WAAa,MAAb;AAGE,kBAAY,OAAZ,EAA2B;AAAA;;AACzB,SAAK,IAAL,GAAY,OAAZ;AACD;;AALH;AAAA;AAAA,WAOS,eAAM,MAAN,EAAoC;AAAA,wCAAX,IAAW;AAAX,QAAA,IAAW;AAAA;;AACzC,WAAK,IAAL,CAAU,OAAV,EAAmB,MAAnB,EAA2B,IAA3B;AACD;AATH;AAAA;AAAA,WAWS,aAAI,MAAJ,EAAkC;AAAA,yCAAX,IAAW;AAAX,QAAA,IAAW;AAAA;;AACvC,WAAK,IAAL,CAAU,KAAV,EAAiB,MAAjB,EAAyB,IAAzB;AACD;AAbH;AAAA;AAAA,WAeS,cAAK,MAAL,EAAmC;AAAA,yCAAX,IAAW;AAAX,QAAA,IAAW;AAAA;;AACxC,WAAK,IAAL,CAAU,MAAV,EAAkB,MAAlB,EAA0B,IAA1B;AACD;AAjBH;AAAA;AAAA,WAmBS,eAAM,MAAN,EAAoC;AAAA,yCAAX,IAAW;AAAX,QAAA,IAAW;AAAA;;AACzC,WAAK,IAAL,CAAU,OAAV,EAAmB,MAAnB,EAA2B,IAA3B;AACD;AArBH;AAAA;AAAA,WAuBU,cAAK,IAAL,EAA+C,MAA/C,EAA+E;AAAA;;AAAA,UAAhB,IAAgB,uEAAF,EAAE;;AACrF,UAAI,CAAC,eAAe,EAApB,EAAwB;AACtB;AACD;;AAED,UAAI,SAAS,sBAAe,IAAI,IAAJ,GAAW,WAAX,EAAf,eAA4C,KAAK,IAAjD,eAA0D,MAA1D,MAAb;AACA,UAAI,IAAI,GAAG,IAAX;;AACA,UAAI,IAAI,CAAC,CAAD,CAAJ,IAAW,OAAO,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAlC,EAA4C;AAC1C,QAAA,SAAS,eAAQ,IAAI,CAAC,CAAD,CAAZ,CAAT;AACA,QAAA,IAAI,GAAG,IAAI,CAAC,KAAL,CAAW,CAAX,CAAP;AACD;;AAED,cAAQ,IAAR;AACE,aAAK,OAAL;AACE,UAAA,OAAO,CAAC,KAAR,CAAc,SAAd;;AACA,sBAAA,OAAO,EAAC,KAAR,oCAAiB,IAAjB;;AACA;;AACF,aAAK,MAAL;AACE,UAAA,OAAO,CAAC,KAAR,CAAc,SAAd;;AACA,uBAAA,OAAO,EAAC,IAAR,qCAAgB,IAAhB;;AACA;;AACF,aAAK,OAAL;AACE,UAAA,OAAO,CAAC,cAAR,CAAuB,SAAvB;;AACA,uBAAA,OAAO,EAAC,KAAR,qCAAiB,IAAjB;;AACA;;AAEF;AACE,UAAA,OAAO,CAAC,KAAR,CAAc,SAAd;;AACA,uBAAA,OAAO,EAAC,GAAR,qCAAe,IAAf;;AAhBJ;;AAkBA,MAAA,OAAO,CAAC,QAAR,GA9BqF,CAgCrF;AACA;AACA;AACD;AA1DH;;AAAA;AAAA","sourceRoot":"","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable no-console */\nimport { getDebugEnabled } from '../debug';\n// Code taken from https://www.bennadel.com/blog/3941-styling-console-log-output-formatting-with-css.htm\n// const echo = (() => {\n//   let queue: any[] = []\n//   const ECHO_TOKEN = {}\n//   const RESET_INPUT = '%c '\n//   const RESET_CSS = ''\n//   // Attach formatting utility method.\n//   function alertFormatting(value: any): any {\n//     queue.push({\n//       value: value,\n//       css:\n//         'display: inline-block ; background-color: #e0005a ; color: #ffffff ; font-weight: bold ; padding: 3px 7px 3px 7px ; border-radius: 3px 3px 3px 3px ;'\n//     })\n//     return ECHO_TOKEN\n//   }\n//   // Attach formatting utility method.\n//   function warningFormatting(value: any): any {\n//     queue.push({\n//       value: value,\n//       css:\n//         'display: inline-block ; background-color: gold ; color: black ; font-weight: bold ; padding: 3px 7px 3px 7px ; border-radius: 3px 3px 3px 3px ;'\n//     })\n//     return ECHO_TOKEN\n//   }\n//   // I provide an echo-based proxy to the given Console Function. This uses an\n//   // internal queue to aggregate values before calling the given Console\n//   // Function with the desired formatting.\n//   function using(consoleFunction: any): any {\n//     function consoleFunctionProxy() {\n//       // As we loop over the arguments, we're going to aggregate a set of\n//       // inputs and modifiers. The Inputs will ultimately be collapsed down\n//       // into a single string that acts as the first console.log parameter\n//       // while the modifiers are then SPREAD into console.log as 2...N.\n//       // --\n//       // NOTE: After each input/modifier pair, I'm adding a RESET pairing.\n//       // This implicitly resets the CSS after every formatted pairing.\n//       var inputs = []\n//       var modifiers = []\n//       for (var i = 0; i < arguments.length; i++) {\n//         // When the formatting utility methods are called, they return\n//         // a special token. This indicates that we should pull the\n//         // corresponding value out of the QUEUE instead of trying to\n//         // output the given argument directly.\n//         if (arguments[i] === ECHO_TOKEN) {\n//           var item = queue.shift()\n//           inputs.push('%c' + item.value, RESET_INPUT)\n//           modifiers.push(item.css, RESET_CSS)\n//           // For every other argument type, output the value directly.\n//         } else {\n//           var arg = arguments[i]\n//           if (typeof arg === 'object' || typeof arg === 'function') {\n//             inputs.push('%o', RESET_INPUT)\n//             modifiers.push(arg, RESET_CSS)\n//           } else {\n//             inputs.push('%c' + arg, RESET_INPUT)\n//             modifiers.push(RESET_CSS, RESET_CSS)\n//           }\n//         }\n//       }\n//       consoleFunction(inputs.join(''), ...modifiers)\n//       // Once we output the aggregated value, reset the queue. This should have\n//       // already been emptied by the .shift() calls; but the explicit reset\n//       // here acts as both a marker of intention as well as a fail-safe.\n//       queue = []\n//     }\n//     return consoleFunctionProxy\n//   }\n//   return {\n//     // Console(ish) functions.\n//     log: using(console.log),\n//     warn: using(console.warn),\n//     error: using(console.error),\n//     trace: using(console.trace),\n//     group: using(console.group),\n//     groupEnd: using(console.groupEnd),\n//     // Formatting functions.\n//     asAlert: alertFormatting,\n//     asWarning: warningFormatting\n//   }\n// })()\n/**\n * The logger that is used internally\n */\nexport class Logger {\n    constructor(service) {\n        this.name = service;\n    }\n    debug(method, ...args) {\n        this._log('debug', method, args);\n    }\n    log(method, ...args) {\n        this._log('log', method, args);\n    }\n    warn(method, ...args) {\n        this._log('warn', method, args);\n    }\n    error(method, ...args) {\n        this._log('error', method, args);\n    }\n    _log(type, method, args = []) {\n        if (!getDebugEnabled()) {\n            return;\n        }\n        let groupText = `[BEACON] ${new Date().toISOString()} [${this.name}](${method})`;\n        let data = args;\n        if (args[0] && typeof args[0] === 'string') {\n            groupText += ` ${args[0]}`;\n            data = args.slice(1);\n        }\n        switch (type) {\n            case 'error':\n                console.group(groupText);\n                console.error(...data);\n                break;\n            case 'warn':\n                console.group(groupText);\n                console.warn(...data);\n                break;\n            case 'debug':\n                console.groupCollapsed(groupText);\n                console.debug(...data);\n                break;\n            default:\n                console.group(groupText);\n                console.log(...data);\n        }\n        console.groupEnd();\n        // echo.group(echo.asWarning(`[BEACON] ${message}`))\n        // echo.log(echo.asWarning(`[${this.name}]`), echo.asAlert(`(${method})`), ...args)\n        // echo.groupEnd()\n    }\n}\n//# sourceMappingURL=Logger.js.map"]},"metadata":{},"sourceType":"module"}