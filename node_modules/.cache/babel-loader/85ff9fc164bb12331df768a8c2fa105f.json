{"ast":null,"code":"import _regeneratorRuntime from \"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { BeaconMessageType } from '..';\nimport { Logger } from '../utils/Logger';\nvar logger = new Logger('IncomingRequestInterceptor');\n/**\n * @internalapi\n *\n * The IncomingRequestInterceptor is used in the WalletClient to intercept an incoming request and enrich it with data, like app metadata.\n */\n\nexport var IncomingRequestInterceptor = /*#__PURE__*/function () {\n  function IncomingRequestInterceptor() {\n    _classCallCheck(this, IncomingRequestInterceptor);\n  }\n\n  _createClass(IncomingRequestInterceptor, null, [{\n    key: \"intercept\",\n    value:\n    /**\n     * The method that is called during the interception\n     *\n     * @param config\n     */\n    function intercept(config) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var message, connectionInfo, appMetadataManager, interceptorCallback, request, appMetadata, _request, _appMetadata, _request2, _appMetadata2, _request3;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                message = config.message, connectionInfo = config.connectionInfo, appMetadataManager = config.appMetadataManager, interceptorCallback = config.interceptorCallback; // TODO: Remove v1 compatibility in later version\n\n                if (message.beaconId && !message.senderId) {\n                  message.senderId = message.beaconId;\n                  delete message.beaconId;\n                }\n\n                _context.t0 = message.type;\n                _context.next = _context.t0 === BeaconMessageType.PermissionRequest ? 5 : _context.t0 === BeaconMessageType.OperationRequest ? 11 : _context.t0 === BeaconMessageType.SignPayloadRequest ? 17 : _context.t0 === BeaconMessageType.BroadcastRequest ? 23 : 29;\n                break;\n\n              case 5:\n                // TODO: Remove v1 compatibility in later version\n                if (message.appMetadata.beaconId && !message.appMetadata.senderId) {\n                  message.appMetadata.senderId = message.appMetadata.beaconId;\n                  delete message.appMetadata.beaconId;\n                }\n\n                _context.next = 8;\n                return appMetadataManager.addAppMetadata(message.appMetadata);\n\n              case 8:\n                request = message;\n                interceptorCallback(request, connectionInfo);\n                return _context.abrupt(\"break\", 30);\n\n              case 11:\n                _context.next = 13;\n                return IncomingRequestInterceptor.getAppMetadata(appMetadataManager, message.senderId);\n\n              case 13:\n                appMetadata = _context.sent;\n                _request = Object.assign({\n                  appMetadata: appMetadata\n                }, message);\n                interceptorCallback(_request, connectionInfo);\n                return _context.abrupt(\"break\", 30);\n\n              case 17:\n                _context.next = 19;\n                return IncomingRequestInterceptor.getAppMetadata(appMetadataManager, message.senderId);\n\n              case 19:\n                _appMetadata = _context.sent;\n                _request2 = Object.assign({\n                  appMetadata: _appMetadata\n                }, message);\n                interceptorCallback(_request2, connectionInfo);\n                return _context.abrupt(\"break\", 30);\n\n              case 23:\n                _context.next = 25;\n                return IncomingRequestInterceptor.getAppMetadata(appMetadataManager, message.senderId);\n\n              case 25:\n                _appMetadata2 = _context.sent;\n                _request3 = Object.assign({\n                  appMetadata: _appMetadata2\n                }, message);\n                interceptorCallback(_request3, connectionInfo);\n                return _context.abrupt(\"break\", 30);\n\n              case 29:\n                logger.log('intercept', 'Message not handled');\n\n              case 30:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n    }\n  }, {\n    key: \"getAppMetadata\",\n    value: function getAppMetadata(appMetadataManager, senderId) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var appMetadata;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return appMetadataManager.getAppMetadata(senderId);\n\n              case 2:\n                appMetadata = _context2.sent;\n\n                if (appMetadata) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                throw new Error('AppMetadata not found');\n\n              case 5:\n                return _context2.abrupt(\"return\", appMetadata);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n    }\n  }]);\n\n  return IncomingRequestInterceptor;\n}();","map":{"version":3,"sources":["../../../src/interceptors/IncomingRequestInterceptor.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAEE,iBAFF,QAQO,IARP;AAYA,SAAS,MAAT,QAAuB,iBAAvB;AAEA,IAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,4BAAX,CAAf;AASA;;;;AAIG;;AACH,WAAa,0BAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AACE;;;;AAIG;AACI,uBAAuB,MAAvB,EAAgE;;;;;;;;AAEnE,gBAAA,O,GAIqC,M,CAJrC,O,EACA,c,GAGqC,M,CAHrC,c,EACA,kB,GAEqC,M,CAFrC,kB,EACA,mB,GACqC,M,CADrC,mB,EAGF;;AACA,oBAAK,OAAe,CAAC,QAAhB,IAA4B,CAAC,OAAO,CAAC,QAA1C,EAAoD;AAClD,kBAAA,OAAO,CAAC,QAAR,GAAoB,OAAe,CAAC,QAApC;AACA,yBAAQ,OAAe,CAAC,QAAxB;AACD;;8BAEO,OAAO,CAAC,I;gDACT,iBAAiB,CAAC,iB,uBAalB,iBAAiB,CAAC,gB,wBAalB,iBAAiB,CAAC,kB,wBAalB,iBAAiB,CAAC,gB;;;;AArCnB;AACA,oBAAK,OAAO,CAAC,WAAR,CAA4B,QAA5B,IAAwC,CAAC,OAAO,CAAC,WAAR,CAAoB,QAAlE,EAA4E;AAC1E,kBAAA,OAAO,CAAC,WAAR,CAAoB,QAApB,GAAgC,OAAO,CAAC,WAAR,CAA4B,QAA5D;AACA,yBAAQ,OAAO,CAAC,WAAR,CAA4B,QAApC;AACD;;;AAED,uBAAM,kBAAkB,CAAC,cAAnB,CAAkC,OAAO,CAAC,WAA1C,CAAN;;;AACM,gBAAA,O,GAAmC,O;AACzC,gBAAA,mBAAmB,CAAC,OAAD,EAAU,cAAV,CAAnB;;;;;AAKiC,uBAAM,0BAA0B,CAAC,cAA3B,CACrC,kBADqC,EAErC,OAAO,CAAC,QAF6B,CAAN;;;AAA3B,gBAAA,W;AAIA,gBAAA,Q,GAAO,MAAA,CAAA,MAAA,CAAA;AACX,kBAAA,WAAW,EAAX;AADW,iBAAA,EAER,OAFQ,C;AAIb,gBAAA,mBAAmB,CAAC,QAAD,EAAU,cAAV,CAAnB;;;;;AAKiC,uBAAM,0BAA0B,CAAC,cAA3B,CACrC,kBADqC,EAErC,OAAO,CAAC,QAF6B,CAAN;;;AAA3B,gBAAA,Y;AAIA,gBAAA,S,GAAO,MAAA,CAAA,MAAA,CAAA;AACX,kBAAA,WAAW,EAAX;AADW,iBAAA,EAER,OAFQ,C;AAIb,gBAAA,mBAAmB,CAAC,SAAD,EAAU,cAAV,CAAnB;;;;;AAKiC,uBAAM,0BAA0B,CAAC,cAA3B,CACrC,kBADqC,EAErC,OAAO,CAAC,QAF6B,CAAN;;;AAA3B,gBAAA,a;AAIA,gBAAA,S,GAAO,MAAA,CAAA,MAAA,CAAA;AACX,kBAAA,WAAW,EAAX;AADW,iBAAA,EAER,OAFQ,C;AAIb,gBAAA,mBAAmB,CAAC,SAAD,EAAU,cAAV,CAAnB;;;;AAKF,gBAAA,MAAM,CAAC,GAAP,CAAW,WAAX,EAAwB,qBAAxB;;;;;;;;;AAEL;AA7EH;AAAA;AAAA,WA+EU,wBACN,kBADM,EAEN,QAFM,EAEU;;;;;;;;AAE6B,uBAAM,kBAAkB,CAAC,cAAnB,CAAkC,QAAlC,CAAN;;;AAAvC,gBAAA,W;;oBACD,W;;;;;sBACG,IAAI,KAAJ,CAAU,uBAAV,C;;;kDAGD,W;;;;;;;;;AACR;AAzFH;;AAAA;AAAA","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BeaconMessageType } from '..';\nimport { Logger } from '../utils/Logger';\nconst logger = new Logger('IncomingRequestInterceptor');\n/**\n * @internalapi\n *\n * The IncomingRequestInterceptor is used in the WalletClient to intercept an incoming request and enrich it with data, like app metadata.\n */\nexport class IncomingRequestInterceptor {\n    /**\n     * The method that is called during the interception\n     *\n     * @param config\n     */\n    static intercept(config) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { message, connectionInfo, appMetadataManager, interceptorCallback } = config;\n            // TODO: Remove v1 compatibility in later version\n            if (message.beaconId && !message.senderId) {\n                message.senderId = message.beaconId;\n                delete message.beaconId;\n            }\n            switch (message.type) {\n                case BeaconMessageType.PermissionRequest:\n                    {\n                        // TODO: Remove v1 compatibility in later version\n                        if (message.appMetadata.beaconId && !message.appMetadata.senderId) {\n                            message.appMetadata.senderId = message.appMetadata.beaconId;\n                            delete message.appMetadata.beaconId;\n                        }\n                        yield appMetadataManager.addAppMetadata(message.appMetadata);\n                        const request = message;\n                        interceptorCallback(request, connectionInfo);\n                    }\n                    break;\n                case BeaconMessageType.OperationRequest:\n                    {\n                        const appMetadata = yield IncomingRequestInterceptor.getAppMetadata(appMetadataManager, message.senderId);\n                        const request = Object.assign({ appMetadata }, message);\n                        interceptorCallback(request, connectionInfo);\n                    }\n                    break;\n                case BeaconMessageType.SignPayloadRequest:\n                    {\n                        const appMetadata = yield IncomingRequestInterceptor.getAppMetadata(appMetadataManager, message.senderId);\n                        const request = Object.assign({ appMetadata }, message);\n                        interceptorCallback(request, connectionInfo);\n                    }\n                    break;\n                case BeaconMessageType.BroadcastRequest:\n                    {\n                        const appMetadata = yield IncomingRequestInterceptor.getAppMetadata(appMetadataManager, message.senderId);\n                        const request = Object.assign({ appMetadata }, message);\n                        interceptorCallback(request, connectionInfo);\n                    }\n                    break;\n                default:\n                    logger.log('intercept', 'Message not handled');\n            }\n        });\n    }\n    static getAppMetadata(appMetadataManager, senderId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const appMetadata = yield appMetadataManager.getAppMetadata(senderId);\n            if (!appMetadata) {\n                throw new Error('AppMetadata not found');\n            }\n            return appMetadata;\n        });\n    }\n}\n//# sourceMappingURL=IncomingRequestInterceptor.js.map"]},"metadata":{},"sourceType":"module"}