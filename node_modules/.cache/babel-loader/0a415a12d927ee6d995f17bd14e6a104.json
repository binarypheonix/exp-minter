{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.eqDate = exports.eqNumber = exports.eqString = exports.eqBoolean = exports.eq = exports.strictEqual = exports.getStructEq = exports.getTupleEq = exports.Contravariant = exports.getMonoid = exports.getSemigroup = exports.eqStrict = exports.URI = exports.contramap = exports.tuple = exports.struct = exports.fromEquals = void 0;\n\nvar function_1 = require(\"./function\"); // -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n\n/**\n * @category constructors\n * @since 2.0.0\n */\n\n\nfunction fromEquals(_equals) {\n  return {\n    equals: function equals(x, y) {\n      return x === y || _equals(x, y);\n    }\n  };\n}\n\nexports.fromEquals = fromEquals; // -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n\n/**\n * @category combinators\n * @since 2.10.0\n */\n\nvar struct = function struct(eqs) {\n  return fromEquals(function (first, second) {\n    for (var key in eqs) {\n      if (!eqs[key].equals(first[key], second[key])) {\n        return false;\n      }\n    }\n\n    return true;\n  });\n};\n\nexports.struct = struct;\n/**\n * Given a tuple of `Eq`s returns a `Eq` for the tuple\n *\n * @example\n * import { tuple } from 'fp-ts/Eq'\n * import * as S from 'fp-ts/string'\n * import * as N from 'fp-ts/number'\n * import * as B from 'fp-ts/boolean'\n *\n * const E = tuple(S.Eq, N.Eq, B.Eq)\n * assert.strictEqual(E.equals(['a', 1, true], ['a', 1, true]), true)\n * assert.strictEqual(E.equals(['a', 1, true], ['b', 1, true]), false)\n * assert.strictEqual(E.equals(['a', 1, true], ['a', 2, true]), false)\n * assert.strictEqual(E.equals(['a', 1, true], ['a', 1, false]), false)\n *\n * @category combinators\n * @since 2.10.0\n */\n\nvar tuple = function tuple() {\n  var eqs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    eqs[_i] = arguments[_i];\n  }\n\n  return fromEquals(function (first, second) {\n    return eqs.every(function (E, i) {\n      return E.equals(first[i], second[i]);\n    });\n  });\n};\n\nexports.tuple = tuple; // -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\n\n/* istanbul ignore next */\n\nvar contramap_ = function contramap_(fa, f) {\n  return function_1.pipe(fa, exports.contramap(f));\n}; // -------------------------------------------------------------------------------------\n// type class members\n// -------------------------------------------------------------------------------------\n\n/**\n * @category Contravariant\n * @since 2.0.0\n */\n\n\nvar contramap = function contramap(f) {\n  return function (fa) {\n    return fromEquals(function (x, y) {\n      return fa.equals(f(x), f(y));\n    });\n  };\n};\n\nexports.contramap = contramap; // -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n\n/**\n * @category instances\n * @since 2.0.0\n */\n\nexports.URI = 'Eq';\n/**\n * @category instances\n * @since 2.5.0\n */\n\nexports.eqStrict = {\n  equals: function equals(a, b) {\n    return a === b;\n  }\n};\nvar empty = {\n  equals: function equals() {\n    return true;\n  }\n};\n/**\n * @category instances\n * @since 2.10.0\n */\n\nvar getSemigroup = function getSemigroup() {\n  return {\n    concat: function concat(x, y) {\n      return fromEquals(function (a, b) {\n        return x.equals(a, b) && y.equals(a, b);\n      });\n    }\n  };\n};\n\nexports.getSemigroup = getSemigroup;\n/**\n * @category instances\n * @since 2.6.0\n */\n\nvar getMonoid = function getMonoid() {\n  return {\n    concat: exports.getSemigroup().concat,\n    empty: empty\n  };\n};\n\nexports.getMonoid = getMonoid;\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexports.Contravariant = {\n  URI: exports.URI,\n  contramap: contramap_\n}; // -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n\n/**\n * Use [`tuple`](#tuple) instead.\n *\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\n\nexports.getTupleEq = exports.tuple;\n/**\n * Use [`struct`](#struct) instead.\n *\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\n\nexports.getStructEq = exports.struct;\n/**\n * Use [`eqStrict`](#eqstrict) instead\n *\n * @since 2.0.0\n * @deprecated\n */\n\nexports.strictEqual = exports.eqStrict.equals;\n/**\n * Use small, specific instances instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexports.eq = exports.Contravariant;\n/**\n * Use [`Eq`](./boolean.ts.html#Eq) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexports.eqBoolean = exports.eqStrict;\n/**\n * Use [`Eq`](./string.ts.html#Eq) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexports.eqString = exports.eqStrict;\n/**\n * Use [`Eq`](./number.ts.html#Eq) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexports.eqNumber = exports.eqStrict;\n/**\n * Use [`Eq`](./Date.ts.html#Eq) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexports.eqDate = {\n  equals: function equals(first, second) {\n    return first.valueOf() === second.valueOf();\n  }\n};","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/node_modules/fp-ts/lib/Eq.js"],"names":["Object","defineProperty","exports","value","eqDate","eqNumber","eqString","eqBoolean","eq","strictEqual","getStructEq","getTupleEq","Contravariant","getMonoid","getSemigroup","eqStrict","URI","contramap","tuple","struct","fromEquals","function_1","require","equals","x","y","eqs","first","second","key","_i","arguments","length","every","E","i","contramap_","fa","f","pipe","a","b","empty","concat","valueOf"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.eqDate = exports.eqNumber = exports.eqString = exports.eqBoolean = exports.eq = exports.strictEqual = exports.getStructEq = exports.getTupleEq = exports.Contravariant = exports.getMonoid = exports.getSemigroup = exports.eqStrict = exports.URI = exports.contramap = exports.tuple = exports.struct = exports.fromEquals = void 0;\nvar function_1 = require(\"./function\");\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * @category constructors\n * @since 2.0.0\n */\nfunction fromEquals(equals) {\n    return {\n        equals: function (x, y) { return x === y || equals(x, y); }\n    };\n}\nexports.fromEquals = fromEquals;\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * @category combinators\n * @since 2.10.0\n */\nvar struct = function (eqs) {\n    return fromEquals(function (first, second) {\n        for (var key in eqs) {\n            if (!eqs[key].equals(first[key], second[key])) {\n                return false;\n            }\n        }\n        return true;\n    });\n};\nexports.struct = struct;\n/**\n * Given a tuple of `Eq`s returns a `Eq` for the tuple\n *\n * @example\n * import { tuple } from 'fp-ts/Eq'\n * import * as S from 'fp-ts/string'\n * import * as N from 'fp-ts/number'\n * import * as B from 'fp-ts/boolean'\n *\n * const E = tuple(S.Eq, N.Eq, B.Eq)\n * assert.strictEqual(E.equals(['a', 1, true], ['a', 1, true]), true)\n * assert.strictEqual(E.equals(['a', 1, true], ['b', 1, true]), false)\n * assert.strictEqual(E.equals(['a', 1, true], ['a', 2, true]), false)\n * assert.strictEqual(E.equals(['a', 1, true], ['a', 1, false]), false)\n *\n * @category combinators\n * @since 2.10.0\n */\nvar tuple = function () {\n    var eqs = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        eqs[_i] = arguments[_i];\n    }\n    return fromEquals(function (first, second) { return eqs.every(function (E, i) { return E.equals(first[i], second[i]); }); });\n};\nexports.tuple = tuple;\n// -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\n/* istanbul ignore next */\nvar contramap_ = function (fa, f) { return function_1.pipe(fa, exports.contramap(f)); };\n// -------------------------------------------------------------------------------------\n// type class members\n// -------------------------------------------------------------------------------------\n/**\n * @category Contravariant\n * @since 2.0.0\n */\nvar contramap = function (f) { return function (fa) {\n    return fromEquals(function (x, y) { return fa.equals(f(x), f(y)); });\n}; };\nexports.contramap = contramap;\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.0.0\n */\nexports.URI = 'Eq';\n/**\n * @category instances\n * @since 2.5.0\n */\nexports.eqStrict = {\n    equals: function (a, b) { return a === b; }\n};\nvar empty = {\n    equals: function () { return true; }\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nvar getSemigroup = function () { return ({\n    concat: function (x, y) { return fromEquals(function (a, b) { return x.equals(a, b) && y.equals(a, b); }); }\n}); };\nexports.getSemigroup = getSemigroup;\n/**\n * @category instances\n * @since 2.6.0\n */\nvar getMonoid = function () { return ({\n    concat: exports.getSemigroup().concat,\n    empty: empty\n}); };\nexports.getMonoid = getMonoid;\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Contravariant = {\n    URI: exports.URI,\n    contramap: contramap_\n};\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use [`tuple`](#tuple) instead.\n *\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\nexports.getTupleEq = exports.tuple;\n/**\n * Use [`struct`](#struct) instead.\n *\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\nexports.getStructEq = exports.struct;\n/**\n * Use [`eqStrict`](#eqstrict) instead\n *\n * @since 2.0.0\n * @deprecated\n */\nexports.strictEqual = exports.eqStrict.equals;\n/**\n * Use small, specific instances instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexports.eq = exports.Contravariant;\n/**\n * Use [`Eq`](./boolean.ts.html#Eq) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexports.eqBoolean = exports.eqStrict;\n/**\n * Use [`Eq`](./string.ts.html#Eq) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexports.eqString = exports.eqStrict;\n/**\n * Use [`Eq`](./number.ts.html#Eq) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexports.eqNumber = exports.eqStrict;\n/**\n * Use [`Eq`](./Date.ts.html#Eq) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexports.eqDate = {\n    equals: function (first, second) { return first.valueOf() === second.valueOf(); }\n};\n"]},"metadata":{},"sourceType":"script"}