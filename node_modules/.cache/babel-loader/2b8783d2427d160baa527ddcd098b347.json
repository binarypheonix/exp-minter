{"ast":null,"code":"import _regeneratorRuntime from \"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport * as sodium from 'libsodium-wrappers';\nimport * as bs58check from 'bs58check';\n/**\n * @internalapi\n *\n * Generate a deterministic sender identifier based on a public key\n *\n * @param publicKey\n */\n\nexport var getSenderId = function getSenderId(publicKey) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var buffer;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return sodium.ready;\n\n          case 2:\n            buffer = Buffer.from(sodium.crypto_generichash(5, Buffer.from(publicKey, 'hex')));\n            return _context.abrupt(\"return\", bs58check.encode(buffer));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n};","map":{"version":3,"sources":["../../../src/utils/get-sender-id.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAK,MAAZ,MAAwB,oBAAxB;AACA,OAAO,KAAK,SAAZ,MAA2B,WAA3B;AAEA;;;;;;AAMG;;AACH,OAAO,IAAM,WAAW,GAAG,SAAd,WAAc,CAAO,SAAP;AAAA,SAA6C,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACtE,mBAAM,MAAM,CAAC,KAAb;;AADsE;AAGhE,YAAA,MAHgE,GAGvD,MAAM,CAAC,IAAP,CAAY,MAAM,CAAC,kBAAP,CAA0B,CAA1B,EAA6B,MAAM,CAAC,IAAP,CAAY,SAAZ,EAAuB,KAAvB,CAA7B,CAAZ,CAHuD;AAAA,6CAK/D,SAAS,CAAC,MAAV,CAAiB,MAAjB,CAL+D;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAA,EAA7C;AAAA,CAApB","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as sodium from 'libsodium-wrappers';\nimport * as bs58check from 'bs58check';\n/**\n * @internalapi\n *\n * Generate a deterministic sender identifier based on a public key\n *\n * @param publicKey\n */\nexport const getSenderId = (publicKey) => __awaiter(void 0, void 0, void 0, function* () {\n    yield sodium.ready;\n    const buffer = Buffer.from(sodium.crypto_generichash(5, Buffer.from(publicKey, 'hex')));\n    return bs58check.encode(buffer);\n});\n//# sourceMappingURL=get-sender-id.js.map"]},"metadata":{},"sourceType":"module"}