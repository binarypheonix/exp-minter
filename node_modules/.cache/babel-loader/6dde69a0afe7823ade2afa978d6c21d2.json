{"ast":null,"code":"import _regeneratorRuntime from \"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { StorageKey } from '..';\nimport { StorageManager } from './StorageManager';\n/**\n * @internalapi\n *\n * The AppMetadataManager provides CRUD functionality for app-metadata entities and persists them to the provided storage.\n */\n\nexport var AppMetadataManager = /*#__PURE__*/function () {\n  function AppMetadataManager(storage) {\n    _classCallCheck(this, AppMetadataManager);\n\n    this.storageManager = new StorageManager(storage, StorageKey.APP_METADATA_LIST);\n  }\n\n  _createClass(AppMetadataManager, [{\n    key: \"getAppMetadataList\",\n    value: function getAppMetadataList() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this.storageManager.getAll());\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"getAppMetadata\",\n    value: function getAppMetadata(senderId) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.storageManager.getOne(function (appMetadata) {\n                  return appMetadata.senderId === senderId;\n                }));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"addAppMetadata\",\n    value: function addAppMetadata(appMetadata) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", this.storageManager.addOne(appMetadata, function (appMetadataElement) {\n                  return appMetadataElement.senderId === appMetadata.senderId;\n                }));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n  }, {\n    key: \"removeAppMetadata\",\n    value: function removeAppMetadata(senderId) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", this.storageManager.remove(function (appMetadata) {\n                  return appMetadata.senderId === senderId;\n                }));\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }, {\n    key: \"removeAppMetadatas\",\n    value: function removeAppMetadatas(senderIds) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", this.storageManager.remove(function (appMetadata) {\n                  return senderIds.includes(appMetadata.senderId);\n                }));\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n  }, {\n    key: \"removeAllAppMetadata\",\n    value: function removeAllAppMetadata() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.abrupt(\"return\", this.storageManager.removeAll());\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n    }\n  }]);\n\n  return AppMetadataManager;\n}();","map":{"version":3,"sources":["../../../src/managers/AppMetadataManager.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAkB,UAAlB,QAAiD,IAAjD;AACA,SAAS,cAAT,QAA+B,kBAA/B;AAEA;;;;AAIG;;AACH,WAAa,kBAAb;AAGE,8BAAY,OAAZ,EAA4B;AAAA;;AAC1B,SAAK,cAAL,GAAsB,IAAI,cAAJ,CAAmB,OAAnB,EAA4B,UAAU,CAAC,iBAAvC,CAAtB;AACD;;AALH;AAAA;AAAA,WAOe,8BAAkB;;;;;;iDACtB,KAAK,cAAL,CAAoB,MAApB,E;;;;;;;;;AACR;AATH;AAAA;AAAA,WAWe,wBAAe,QAAf,EAA+B;;;;;;kDACnC,KAAK,cAAL,CAAoB,MAApB,CACL,UAAC,WAAD;AAAA,yBAA8B,WAAW,CAAC,QAAZ,KAAyB,QAAvD;AAAA,iBADK,C;;;;;;;;;AAGR;AAfH;AAAA;AAAA,WAiBe,wBAAe,WAAf,EAAuC;;;;;;kDAC3C,KAAK,cAAL,CAAoB,MAApB,CACL,WADK,EAEL,UAAC,kBAAD;AAAA,yBAAqC,kBAAkB,CAAC,QAAnB,KAAgC,WAAW,CAAC,QAAjF;AAAA,iBAFK,C;;;;;;;;;AAIR;AAtBH;AAAA;AAAA,WAwBe,2BAAkB,QAAlB,EAAkC;;;;;;kDACtC,KAAK,cAAL,CAAoB,MAApB,CACL,UAAC,WAAD;AAAA,yBAA8B,WAAW,CAAC,QAAZ,KAAyB,QAAvD;AAAA,iBADK,C;;;;;;;;;AAGR;AA5BH;AAAA;AAAA,WA8Be,4BAAmB,SAAnB,EAAsC;;;;;;kDAC1C,KAAK,cAAL,CAAoB,MAApB,CAA2B,UAAC,WAAD;AAAA,yBAChC,SAAS,CAAC,QAAV,CAAmB,WAAW,CAAC,QAA/B,CADgC;AAAA,iBAA3B,C;;;;;;;;;AAGR;AAlCH;AAAA;AAAA,WAoCe,gCAAoB;;;;;;kDACxB,KAAK,cAAL,CAAoB,SAApB,E;;;;;;;;;AACR;AAtCH;;AAAA;AAAA","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { StorageKey } from '..';\nimport { StorageManager } from './StorageManager';\n/**\n * @internalapi\n *\n * The AppMetadataManager provides CRUD functionality for app-metadata entities and persists them to the provided storage.\n */\nexport class AppMetadataManager {\n    constructor(storage) {\n        this.storageManager = new StorageManager(storage, StorageKey.APP_METADATA_LIST);\n    }\n    getAppMetadataList() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.getAll();\n        });\n    }\n    getAppMetadata(senderId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.getOne((appMetadata) => appMetadata.senderId === senderId);\n        });\n    }\n    addAppMetadata(appMetadata) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.addOne(appMetadata, (appMetadataElement) => appMetadataElement.senderId === appMetadata.senderId);\n        });\n    }\n    removeAppMetadata(senderId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.remove((appMetadata) => appMetadata.senderId === senderId);\n        });\n    }\n    removeAppMetadatas(senderIds) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.remove((appMetadata) => senderIds.includes(appMetadata.senderId));\n        });\n    }\n    removeAllAppMetadata() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.removeAll();\n        });\n    }\n}\n//# sourceMappingURL=AppMetadataManager.js.map"]},"metadata":{},"sourceType":"module"}