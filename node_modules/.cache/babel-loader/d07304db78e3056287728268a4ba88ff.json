{"ast":null,"code":"/**\n * ```ts\n * interface Separated<E, A> {\n *    readonly left: E\n *    readonly right: A\n * }\n * ```\n *\n * Represents a result of separating a whole into two parts.\n *\n * @since 2.10.0\n */\nimport { pipe } from './function';\nimport { flap as flap_ } from './Functor'; // -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n\n/**\n * @category constructors\n * @since 2.10.0\n */\n\nexport var separated = function (left, right) {\n  return {\n    left: left,\n    right: right\n  };\n}; // -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\n\nvar _map = function (fa, f) {\n  return pipe(fa, map(f));\n};\n\nvar _mapLeft = function (fa, f) {\n  return pipe(fa, mapLeft(f));\n};\n\nvar _bimap = function (fa, g, f) {\n  return pipe(fa, bimap(g, f));\n}; // -------------------------------------------------------------------------------------\n// type class members\n// -------------------------------------------------------------------------------------\n\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category Functor\n * @since 2.10.0\n */\n\n\nexport var map = function (f) {\n  return function (fa) {\n    return separated(left(fa), f(right(fa)));\n  };\n};\n/**\n * Map a function over the first type argument of a bifunctor.\n *\n * @category Bifunctor\n * @since 2.10.0\n */\n\nexport var mapLeft = function (f) {\n  return function (fa) {\n    return separated(f(left(fa)), right(fa));\n  };\n};\n/**\n * Map a pair of functions over the two type arguments of the bifunctor.\n *\n * @category Bifunctor\n * @since 2.10.0\n */\n\nexport var bimap = function (f, g) {\n  return function (fa) {\n    return separated(f(left(fa)), g(right(fa)));\n  };\n}; // -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n\n/**\n * @category instances\n * @since 2.10.0\n */\n\nexport var URI = 'Separated';\n/**\n * @category instances\n * @since 2.10.0\n */\n\nexport var Bifunctor = {\n  URI: URI,\n  mapLeft: _mapLeft,\n  bimap: _bimap\n};\n/**\n * @category instances\n * @since 2.10.0\n */\n\nexport var Functor = {\n  URI: URI,\n  map: _map\n};\n/**\n * Derivable from `Functor`.\n *\n * @category combinators\n * @since 2.10.0\n */\n\nexport var flap =\n/*#_PURE_*/\nflap_(Functor); // -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n\n/**\n * @since 2.10.0\n */\n\nexport var left = function (s) {\n  return s.left;\n};\n/**\n * @since 2.10.0\n */\n\nexport var right = function (s) {\n  return s.right;\n};","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/node_modules/fp-ts/es6/Separated.js"],"names":["pipe","flap","flap_","separated","left","right","_map","fa","f","map","_mapLeft","mapLeft","_bimap","g","bimap","URI","Bifunctor","Functor","s"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,IAAT,QAAqB,YAArB;AACA,SAASC,IAAI,IAAIC,KAAjB,QAA8B,WAA9B,C,CACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,SAAS,GAAG,UAAUC,IAAV,EAAgBC,KAAhB,EAAuB;AAAE,SAAQ;AAAED,IAAAA,IAAI,EAAEA,IAAR;AAAcC,IAAAA,KAAK,EAAEA;AAArB,GAAR;AAAwC,CAAjF,C,CACP;AACA;AACA;;AACA,IAAIC,IAAI,GAAG,UAAUC,EAAV,EAAcC,CAAd,EAAiB;AAAE,SAAOR,IAAI,CAACO,EAAD,EAAKE,GAAG,CAACD,CAAD,CAAR,CAAX;AAA0B,CAAxD;;AACA,IAAIE,QAAQ,GAAG,UAAUH,EAAV,EAAcC,CAAd,EAAiB;AAAE,SAAOR,IAAI,CAACO,EAAD,EAAKI,OAAO,CAACH,CAAD,CAAZ,CAAX;AAA8B,CAAhE;;AACA,IAAII,MAAM,GAAG,UAAUL,EAAV,EAAcM,CAAd,EAAiBL,CAAjB,EAAoB;AAAE,SAAOR,IAAI,CAACO,EAAD,EAAKO,KAAK,CAACD,CAAD,EAAIL,CAAJ,CAAV,CAAX;AAA+B,CAAlE,C,CACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,IAAIC,GAAG,GAAG,UAAUD,CAAV,EAAa;AAAE,SAAO,UAAUD,EAAV,EAAc;AACjD,WAAOJ,SAAS,CAACC,IAAI,CAACG,EAAD,CAAL,EAAWC,CAAC,CAACH,KAAK,CAACE,EAAD,CAAN,CAAZ,CAAhB;AACH,GAF+B;AAE5B,CAFG;AAGP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAII,OAAO,GAAG,UAAUH,CAAV,EAAa;AAAE,SAAO,UAAUD,EAAV,EAAc;AACrD,WAAOJ,SAAS,CAACK,CAAC,CAACJ,IAAI,CAACG,EAAD,CAAL,CAAF,EAAcF,KAAK,CAACE,EAAD,CAAnB,CAAhB;AACH,GAFmC;AAEhC,CAFG;AAGP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIO,KAAK,GAAG,UAAUN,CAAV,EAAaK,CAAb,EAAgB;AAAE,SAAO,UAAUN,EAAV,EAAc;AACtD,WAAOJ,SAAS,CAACK,CAAC,CAACJ,IAAI,CAACG,EAAD,CAAL,CAAF,EAAcM,CAAC,CAACR,KAAK,CAACE,EAAD,CAAN,CAAf,CAAhB;AACH,GAFoC;AAEjC,CAFG,C,CAGP;AACA;AACA;;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIQ,GAAG,GAAG,WAAV;AACP;AACA;AACA;AACA;;AACA,OAAO,IAAIC,SAAS,GAAG;AACnBD,EAAAA,GAAG,EAAEA,GADc;AAEnBJ,EAAAA,OAAO,EAAED,QAFU;AAGnBI,EAAAA,KAAK,EAAEF;AAHY,CAAhB;AAKP;AACA;AACA;AACA;;AACA,OAAO,IAAIK,OAAO,GAAG;AACjBF,EAAAA,GAAG,EAAEA,GADY;AAEjBN,EAAAA,GAAG,EAAEH;AAFY,CAAd;AAIP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIL,IAAI;AACf;AACAC,KAAK,CAACe,OAAD,CAFE,C,CAGP;AACA;AACA;;AACA;AACA;AACA;;AACA,OAAO,IAAIb,IAAI,GAAG,UAAUc,CAAV,EAAa;AAAE,SAAOA,CAAC,CAACd,IAAT;AAAgB,CAA1C;AACP;AACA;AACA;;AACA,OAAO,IAAIC,KAAK,GAAG,UAAUa,CAAV,EAAa;AAAE,SAAOA,CAAC,CAACb,KAAT;AAAiB,CAA5C","sourcesContent":["/**\n * ```ts\n * interface Separated<E, A> {\n *    readonly left: E\n *    readonly right: A\n * }\n * ```\n *\n * Represents a result of separating a whole into two parts.\n *\n * @since 2.10.0\n */\nimport { pipe } from './function';\nimport { flap as flap_ } from './Functor';\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * @category constructors\n * @since 2.10.0\n */\nexport var separated = function (left, right) { return ({ left: left, right: right }); };\n// -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\nvar _mapLeft = function (fa, f) { return pipe(fa, mapLeft(f)); };\nvar _bimap = function (fa, g, f) { return pipe(fa, bimap(g, f)); };\n// -------------------------------------------------------------------------------------\n// type class members\n// -------------------------------------------------------------------------------------\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category Functor\n * @since 2.10.0\n */\nexport var map = function (f) { return function (fa) {\n    return separated(left(fa), f(right(fa)));\n}; };\n/**\n * Map a function over the first type argument of a bifunctor.\n *\n * @category Bifunctor\n * @since 2.10.0\n */\nexport var mapLeft = function (f) { return function (fa) {\n    return separated(f(left(fa)), right(fa));\n}; };\n/**\n * Map a pair of functions over the two type arguments of the bifunctor.\n *\n * @category Bifunctor\n * @since 2.10.0\n */\nexport var bimap = function (f, g) { return function (fa) {\n    return separated(f(left(fa)), g(right(fa)));\n}; };\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var URI = 'Separated';\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Bifunctor = {\n    URI: URI,\n    mapLeft: _mapLeft,\n    bimap: _bimap\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * Derivable from `Functor`.\n *\n * @category combinators\n * @since 2.10.0\n */\nexport var flap = \n/*#_PURE_*/\nflap_(Functor);\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.10.0\n */\nexport var left = function (s) { return s.left; };\n/**\n * @since 2.10.0\n */\nexport var right = function (s) { return s.right; };\n"]},"metadata":{},"sourceType":"module"}