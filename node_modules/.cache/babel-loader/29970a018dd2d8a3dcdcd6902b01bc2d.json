{"ast":null,"code":"import { useToast } from '@chakra-ui/react';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from '../../reducer';\nimport { deliverNotification, readNotification } from '../../reducer/slices/notificationsActions';\nimport _ from 'lodash';\n\nfunction notificationStatus(notification) {\n  switch (notification.status) {\n    case 'pending':\n      return 'info';\n\n    case 'success':\n      return 'success';\n\n    case 'error':\n      return 'error';\n\n    default:\n      return 'info';\n  }\n}\n\nexport default function Notifications() {\n  const toast = useToast();\n  const dispatch = useDispatch();\n  const notifications = useSelector(state => state.notifications.filter(({\n    read,\n    delivered\n  }) => !read && !delivered), _.isEqual);\n  useEffect(() => {\n    for (let notification of notifications) {\n      dispatch(deliverNotification(notification.requestId));\n      toast({\n        title: notification.title,\n        description: notification.description,\n        status: notificationStatus(notification),\n        duration: null,\n        isClosable: true,\n        position: 'bottom-right',\n\n        onCloseComplete() {\n          dispatch(readNotification(notification.requestId));\n        }\n\n      });\n    }\n  }, [notifications, dispatch, toast]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null);\n}","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/src/components/common/Notifications.tsx"],"names":["useToast","React","useEffect","useDispatch","useSelector","deliverNotification","readNotification","_","notificationStatus","notification","status","Notifications","toast","dispatch","notifications","state","filter","read","delivered","isEqual","requestId","title","description","duration","isClosable","position","onCloseComplete"],"mappings":"AAAA,SAASA,QAAT,QAAyB,kBAAzB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,eAAzC;AACA,SACEC,mBADF,EAEEC,gBAFF,QAGO,2CAHP;AAIA,OAAOC,CAAP,MAAc,QAAd;;AAGA,SAASC,kBAAT,CAA4BC,YAA5B,EAAwD;AACtD,UAAQA,YAAY,CAACC,MAArB;AACE,SAAK,SAAL;AACE,aAAO,MAAP;;AACF,SAAK,SAAL;AACE,aAAO,SAAP;;AACF,SAAK,OAAL;AACE,aAAO,OAAP;;AACF;AACE,aAAO,MAAP;AARJ;AAUD;;AAED,eAAe,SAASC,aAAT,GAAyB;AACtC,QAAMC,KAAK,GAAGZ,QAAQ,EAAtB;AACA,QAAMa,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAMW,aAAa,GAAGV,WAAW,CAC/BW,KAAK,IACHA,KAAK,CAACD,aAAN,CAAoBE,MAApB,CAA2B,CAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAD,KAAyB,CAACD,IAAD,IAAS,CAACC,SAA9D,CAF6B,EAG/BX,CAAC,CAACY,OAH6B,CAAjC;AAMAjB,EAAAA,SAAS,CAAC,MAAM;AACd,SAAK,IAAIO,YAAT,IAAyBK,aAAzB,EAAwC;AACtCD,MAAAA,QAAQ,CAACR,mBAAmB,CAACI,YAAY,CAACW,SAAd,CAApB,CAAR;AACAR,MAAAA,KAAK,CAAC;AACJS,QAAAA,KAAK,EAAEZ,YAAY,CAACY,KADhB;AAEJC,QAAAA,WAAW,EAAEb,YAAY,CAACa,WAFtB;AAGJZ,QAAAA,MAAM,EAAEF,kBAAkB,CAACC,YAAD,CAHtB;AAIJc,QAAAA,QAAQ,EAAE,IAJN;AAKJC,QAAAA,UAAU,EAAE,IALR;AAMJC,QAAAA,QAAQ,EAAE,cANN;;AAOJC,QAAAA,eAAe,GAAG;AAChBb,UAAAA,QAAQ,CAACP,gBAAgB,CAACG,YAAY,CAACW,SAAd,CAAjB,CAAR;AACD;;AATG,OAAD,CAAL;AAWD;AACF,GAfQ,EAeN,CAACN,aAAD,EAAgBD,QAAhB,EAA0BD,KAA1B,CAfM,CAAT;AAiBA,sBAAO,yCAAP;AACD","sourcesContent":["import { useToast } from '@chakra-ui/react';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from '../../reducer';\nimport {\n  deliverNotification,\n  readNotification\n} from '../../reducer/slices/notificationsActions';\nimport _ from 'lodash';\nimport { Notification } from '../../reducer/slices/notifications';\n\nfunction notificationStatus(notification: Notification) {\n  switch (notification.status) {\n    case 'pending':\n      return 'info';\n    case 'success':\n      return 'success';\n    case 'error':\n      return 'error';\n    default:\n      return 'info';\n  }\n}\n\nexport default function Notifications() {\n  const toast = useToast();\n  const dispatch = useDispatch();\n  const notifications = useSelector(\n    state =>\n      state.notifications.filter(({ read, delivered }) => !read && !delivered),\n    _.isEqual\n  );\n\n  useEffect(() => {\n    for (let notification of notifications) {\n      dispatch(deliverNotification(notification.requestId));\n      toast({\n        title: notification.title,\n        description: notification.description,\n        status: notificationStatus(notification),\n        duration: null,\n        isClosable: true,\n        position: 'bottom-right',\n        onCloseComplete() {\n          dispatch(readNotification(notification.requestId));\n        }\n      });\n    }\n  }, [notifications, dispatch, toast]);\n\n  return <></>;\n}\n"]},"metadata":{},"sourceType":"module"}