{"ast":null,"code":"import _slicedToArray from\"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{Box,Flex,FormControl,Input,InputGroup,InputLeftElement,ModalHeader,ModalFooter,ModalBody,ModalCloseButton,useDisclosure}from'@chakra-ui/react';import{Check}from'react-feather';import{MinterButton}from'../../common';import{useDispatch,useSelector}from'../../../reducer';import{listTokenAction}from'../../../reducer/async/actions';import FormModal from'./FormModal';import tz from\"../assets/tezos-sym.svg\";export function SellTokenModal(props){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),price=_useState2[0],setPrice=_useState2[1];var dispatch=useDispatch();var initialRef=React.useRef(null);var salePrice=Math.floor(Number(price)*1000000);var validPrice=!Number.isNaN(price)&&salePrice>0;return/*#__PURE__*/React.createElement(FormModal,{disclosure:props.disclosure,sync:props.sync,method:\"listToken\",dispatchThunk:function dispatchThunk(){return dispatch(listTokenAction({contract:props.contract,tokenId:props.tokenId,salePrice:salePrice}));},onComplete:function onComplete(){return setPrice('');},initialRef:initialRef,pendingMessage:\"Listing token for sale...\",completeMessage:\"Token listed for sale\",body:function body(onSubmit){return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(ModalHeader,null,\"Set your price\"),/*#__PURE__*/React.createElement(ModalCloseButton,null),/*#__PURE__*/React.createElement(ModalBody,null,/*#__PURE__*/React.createElement(Flex,null,/*#__PURE__*/React.createElement(FormControl,null,/*#__PURE__*/React.createElement(InputGroup,null,/*#__PURE__*/React.createElement(InputLeftElement,{pointerEvents:\"none\",color:\"gray.900\",fontSize:\"1.2em\",children:/*#__PURE__*/React.createElement(\"img\",{src:tz,alt:\"\",width:10,height:\"auto\",style:{display:'inline-block'}})}),/*#__PURE__*/React.createElement(Input,{autoFocus:true,ref:initialRef,placeholder:\"Enter sale amount\",value:price,onChange:function onChange(e){return setPrice(e.target.value);}}))),/*#__PURE__*/React.createElement(Box,{ml:2},/*#__PURE__*/React.createElement(MinterButton,{variant:validPrice?'primaryAction':'primaryActionInactive',onClick:function onClick(){return validPrice&&onSubmit();}},/*#__PURE__*/React.createElement(Check,null))))),/*#__PURE__*/React.createElement(ModalFooter,null));}});}export function SellTokenButton(props){var disclosure=useDisclosure();var _useSelector=useSelector(function(s){return s.status.listToken;}),status=_useSelector.status;return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(MinterButton,{variant:\"primaryAction\",onClick:disclosure.onOpen,disabled:status==='in_transit'},\"Sell\"),/*#__PURE__*/React.createElement(SellTokenModal,Object.assign({},props,{disclosure:disclosure,sync:props.sync})));}","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/src/components/common/modals/SellToken.tsx"],"names":["React","useState","Box","Flex","FormControl","Input","InputGroup","InputLeftElement","ModalHeader","ModalFooter","ModalBody","ModalCloseButton","useDisclosure","Check","MinterButton","useDispatch","useSelector","listTokenAction","FormModal","SellTokenModal","props","price","setPrice","dispatch","initialRef","useRef","salePrice","Math","floor","Number","validPrice","isNaN","disclosure","sync","contract","tokenId","onSubmit","tz","display","e","target","value","SellTokenButton","s","status","listToken","onOpen"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Box,\n  Flex,\n  FormControl,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  useDisclosure\n} from '@chakra-ui/react';\nimport { Check } from 'react-feather';\nimport { MinterButton } from '../../common';\nimport { useDispatch, useSelector } from '../../../reducer';\nimport { listTokenAction } from '../../../reducer/async/actions';\nimport FormModal, { BaseModalProps, BaseModalButtonProps } from './FormModal';\nimport tz from '../assets/tezos-sym.svg'\n\ninterface SellTokenModalProps extends BaseModalProps {\n  contract: string;\n  tokenId: number;\n}\n\nexport function SellTokenModal(props: SellTokenModalProps) {\n  const [price, setPrice] = useState('');\n  const dispatch = useDispatch();\n  const initialRef = React.useRef(null);\n\n  const salePrice = Math.floor(Number(price) * 1000000);\n  const validPrice = !Number.isNaN(price) && salePrice > 0;\n  return (\n    <FormModal\n      disclosure={props.disclosure}\n      sync={props.sync}\n      method=\"listToken\"\n      dispatchThunk={() =>\n        dispatch(\n          listTokenAction({\n            contract: props.contract,\n            tokenId: props.tokenId,\n            salePrice: salePrice\n          })\n        )\n      }\n      onComplete={() => setPrice('')}\n      initialRef={initialRef}\n      pendingMessage=\"Listing token for sale...\"\n      completeMessage=\"Token listed for sale\"\n      body={onSubmit => (\n        <>\n          <ModalHeader>Set your price</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Flex>\n              <FormControl>\n                <InputGroup>\n                  <InputLeftElement\n                    pointerEvents=\"none\"\n                    color=\"gray.900\"\n                    fontSize=\"1.2em\"\n                    children={<img src={tz} alt=\"\" width={10} height=\"auto\" style={{display: 'inline-block'}}/>}\n                  />\n                  <Input\n                    autoFocus={true}\n                    ref={initialRef}\n                    placeholder=\"Enter sale amount\"\n                    value={price}\n                    onChange={e => setPrice(e.target.value)}\n                  />\n                </InputGroup>\n              </FormControl>\n              <Box ml={2}>\n                <MinterButton\n                  variant={\n                    validPrice ? 'primaryAction' : 'primaryActionInactive'\n                  }\n                  onClick={() => validPrice && onSubmit()}\n                >\n                  <Check />\n                </MinterButton>\n              </Box>\n            </Flex>\n          </ModalBody>\n          <ModalFooter />\n        </>\n      )}\n    />\n  );\n}\n\ninterface SellTokenButtonProps extends BaseModalButtonProps {\n  contract: string;\n  tokenId: number;\n}\n\nexport function SellTokenButton(props: SellTokenButtonProps) {\n  const disclosure = useDisclosure();\n  const { status } = useSelector(s => s.status.listToken)\n  \n  return (\n    <>\n      <MinterButton variant=\"primaryAction\" onClick={disclosure.onOpen} disabled={status === 'in_transit'}>\n        Sell\n      </MinterButton>\n      <SellTokenModal {...props} disclosure={disclosure} sync={props.sync} />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}