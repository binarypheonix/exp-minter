{"ast":null,"code":"var _jsxFileName = \"/Users/frankenstein/projects/minter/src/components/common/TokenMedia.tsx\";\nimport React, { useEffect, useState } from 'react';\nimport { Flex, Image } from '@chakra-ui/react';\nimport { FiHelpCircle } from 'react-icons/fi';\nimport { ipfsUriToGatewayUrl } from '../../lib/util/ipfs';\n\nfunction MediaNotFound() {\n  return /*#__PURE__*/React.createElement(Flex, {\n    flexDir: \"column\",\n    align: \"center\",\n    justify: \"center\",\n    flex: \"1\",\n    bg: \"gray.100\",\n    color: \"gray.300\",\n    height: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FiHelpCircle, {\n    size: \"70px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport function TokenMedia(props) {\n  var _props$metadata$forma;\n\n  const src = ipfsUriToGatewayUrl(props.config, props.artifactUri);\n  const [errored, setErrored] = useState(false);\n  const [obj, setObj] = useState(null);\n  useEffect(() => {\n    (async () => {\n      let blob;\n\n      try {\n        blob = await fetch(src).then(r => r.blob());\n      } catch (e) {\n        return setErrored(true);\n      }\n\n      setObj({\n        url: URL.createObjectURL(blob),\n        type: blob.type\n      });\n    })();\n  }, [src]);\n\n  if (errored) {\n    return /*#__PURE__*/React.createElement(MediaNotFound, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 12\n      }\n    });\n  }\n\n  if (!obj) return null;\n\n  if (/^image\\/.*/.test(obj.type)) {\n    var _props$objectFit, _props$maxH;\n\n    return /*#__PURE__*/React.createElement(Image, {\n      src: src,\n      flex: \"1\",\n      maxWidth: props.maxW,\n      maxHeight: props.maxH,\n      style: {\n        objectFit: (_props$objectFit = props.objectFit) !== null && _props$objectFit !== void 0 ? _props$objectFit : 'cover',\n        maxWidth: props.maxW,\n        maxHeight: (_props$maxH = props.maxH) !== null && _props$maxH !== void 0 ? _props$maxH : '50vh',\n        cursor: props.cursor\n      },\n      onClick: props.onClick,\n      onError: () => setErrored(true),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    });\n  }\n\n  if (/^video\\/.*/.test(obj.type)) {\n    var _props$objectFit2, _props$maxH2;\n\n    return /*#__PURE__*/React.createElement(\"video\", {\n      preload: \"metadata\",\n      onClick: e => e.preventDefault(),\n      onMouseEnter: e => e.currentTarget.play(),\n      onMouseLeave: e => e.currentTarget.pause(),\n      style: {\n        objectFit: (_props$objectFit2 = props.objectFit) !== null && _props$objectFit2 !== void 0 ? _props$objectFit2 : 'cover',\n        maxWidth: props.maxW,\n        maxHeight: (_props$maxH2 = props.maxH) !== null && _props$maxH2 !== void 0 ? _props$maxH2 : '50vh',\n        cursor: props.cursor\n      },\n      onLoadedMetadata: e => {\n        e.target.currentTime = .05;\n      },\n      muted: true,\n      controls: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"source\", {\n      src: obj.url,\n      type: obj.type,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  if ((_props$metadata$forma = props.metadata.formats) === null || _props$metadata$forma === void 0 ? void 0 : _props$metadata$forma.length) {\n    if (props.metadata.formats[0].mimeType === 'model/gltf-binary' || props.metadata.formats[0].mimeType === 'model/gltf+json') {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"model-viewer\", {\n        \"auto-rotate\": true,\n        \"rotation-per-second\": \"30deg\",\n        \"camera-controls\": true,\n        src: obj.url,\n        class: props.class,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }\n      }));\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(MediaNotFound, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 10\n    }\n  });\n}","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/src/components/common/TokenMedia.tsx"],"names":["React","useEffect","useState","Flex","Image","FiHelpCircle","ipfsUriToGatewayUrl","MediaNotFound","TokenMedia","props","src","config","artifactUri","errored","setErrored","obj","setObj","blob","fetch","then","r","e","url","URL","createObjectURL","type","test","maxW","maxH","objectFit","maxWidth","maxHeight","cursor","onClick","preventDefault","currentTarget","play","pause","target","currentTime","metadata","formats","length","mimeType","class"],"mappings":"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","sourcesContent":["import React, { MouseEventHandler, useEffect, useState } from 'react';\nimport { Flex, Image } from '@chakra-ui/react';\nimport { FiHelpCircle } from 'react-icons/fi';\nimport { IpfsGatewayConfig, ipfsUriToGatewayUrl } from '../../lib/util/ipfs';\nimport { Token } from '../../reducer/slices/collections';\n\ninterface TokenMediaProps extends Token {\n  config: IpfsGatewayConfig;\n  maxW?: string;\n  maxH?: string;\n  class?: string;\n  cursor?: string;\n  objectFit?: any; //ObjectFitProperty | undefined; Todo ObjectFitProperty not found\n  onClick?: Function;\n}\n\nfunction MediaNotFound() {\n  return (\n    <Flex\n      flexDir=\"column\"\n      align=\"center\"\n      justify=\"center\"\n      flex=\"1\"\n      bg=\"gray.100\"\n      color=\"gray.300\"\n      height=\"100%\"\n    >\n      <FiHelpCircle size=\"70px\" />\n    </Flex>\n  );\n}\n\nexport function TokenMedia(props: TokenMediaProps) {\n  const src = ipfsUriToGatewayUrl(props.config, props.artifactUri);\n  const [errored, setErrored] = useState(false);\n  const [obj, setObj] = useState<{ url: string; type: string } | null>(null);\n  useEffect(() => {\n    (async () => {\n      let blob;\n      try {\n        blob = await fetch(src).then(r => r.blob());\n      } catch (e) {\n        return setErrored(true);\n      }\n      setObj({\n        url: URL.createObjectURL(blob),\n        type: blob.type\n      });\n    })();\n  }, [src]);\n\n  if (errored) {\n    return <MediaNotFound />;\n  }\n\n  if (!obj) return null;\n\n  if (/^image\\/.*/.test(obj.type)) {\n    return (\n      <Image\n        src={src}\n        flex=\"1\"\n        maxWidth={props.maxW}\n        maxHeight={props.maxH}\n        style={{ objectFit: props.objectFit ?? 'cover', maxWidth: props.maxW, maxHeight: props.maxH ?? '50vh', cursor: props.cursor }}\n        onClick={props.onClick as MouseEventHandler<HTMLImageElement>}\n        onError={() => setErrored(true)}\n      />\n    );\n  }\n\n  if (/^video\\/.*/.test(obj.type)) {\n    return (\n      <video\n      preload=\"metadata\"\n        onClick={e => e.preventDefault()}\n        onMouseEnter={e => e.currentTarget.play()}\n        onMouseLeave={e => e.currentTarget.pause()}\n        style={{ objectFit: props.objectFit ?? 'cover', maxWidth: props.maxW, maxHeight: props.maxH ?? '50vh', cursor: props.cursor }}\n        onLoadedMetadata={e => {(e.target as HTMLVideoElement).currentTime = .05; }}\n        muted\n        controls\n      >\n        <source src={obj.url} type={obj.type} />\n      </video>\n    );\n  }\n\n  if (props.metadata.formats?.length) {\n    if (\n      props.metadata.formats[0].mimeType === 'model/gltf-binary' ||\n      props.metadata.formats[0].mimeType === 'model/gltf+json'\n    ) {\n      return (\n        <>\n          <model-viewer\n            auto-rotate\n            rotation-per-second=\"30deg\"\n            camera-controls\n            src={obj.url}\n            class={props.class}\n          ></model-viewer>\n        </>\n      );\n    }\n  }\n\n  return <MediaNotFound />;\n}\n"]},"metadata":{},"sourceType":"module"}