{"ast":null,"code":"import _regeneratorRuntime from \"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { BeaconMessageType, PermissionScope } from '..';\nimport { getAccountIdentifier } from '../utils/get-account-identifier';\n/**\n * @internalapi\n *\n * The PermissionValidator is used to check if permissions for a certain message type have been given\n */\n\nexport var PermissionValidator = /*#__PURE__*/function () {\n  function PermissionValidator() {\n    _classCallCheck(this, PermissionValidator);\n  }\n\n  _createClass(PermissionValidator, null, [{\n    key: \"hasPermission\",\n    value:\n    /**\n     * Check if permissions were given for a certain message type.\n     *\n     * PermissionRequest and BroadcastRequest will always return true.\n     *\n     * @param message Beacon Message\n     */\n    function hasPermission(message, getOne, getAll) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var accountIdentifier, permission, permissions, filteredPermissions;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.t0 = message.type;\n                _context.next = _context.t0 === BeaconMessageType.PermissionRequest ? 3 : _context.t0 === BeaconMessageType.BroadcastRequest ? 3 : _context.t0 === BeaconMessageType.OperationRequest ? 4 : _context.t0 === BeaconMessageType.SignPayloadRequest ? 13 : 20;\n                break;\n\n              case 3:\n                return _context.abrupt(\"return\", true);\n\n              case 4:\n                _context.next = 6;\n                return getAccountIdentifier(message.sourceAddress, message.network);\n\n              case 6:\n                accountIdentifier = _context.sent;\n                _context.next = 9;\n                return getOne(accountIdentifier);\n\n              case 9:\n                permission = _context.sent;\n\n                if (permission) {\n                  _context.next = 12;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 12:\n                return _context.abrupt(\"return\", permission.scopes.includes(PermissionScope.OPERATION_REQUEST));\n\n              case 13:\n                _context.next = 15;\n                return getAll();\n\n              case 15:\n                permissions = _context.sent;\n                filteredPermissions = permissions.filter(function (permission) {\n                  return permission.address === message.sourceAddress;\n                });\n\n                if (!(filteredPermissions.length === 0)) {\n                  _context.next = 19;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", false);\n\n              case 19:\n                return _context.abrupt(\"return\", filteredPermissions.some(function (permission) {\n                  return permission.scopes.includes(PermissionScope.SIGN);\n                }));\n\n              case 20:\n                throw new Error('Message not handled');\n\n              case 21:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n    }\n  }]);\n\n  return PermissionValidator;\n}();","map":{"version":3,"sources":["../../../src/managers/PermissionValidator.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAwB,iBAAxB,EAA2C,eAA3C,QAAkE,IAAlE;AAEA,SAAS,oBAAT,QAAqC,iCAArC;AAEA;;;;AAIG;;AACH,WAAa,mBAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AACE;;;;;;AAMG;AACI,2BACL,OADK,EAEL,MAFK,EAGL,MAHK,EAGoC;;;;;;;8BAEjC,OAAO,CAAC,I;gDACT,iBAAiB,CAAC,iB,uBAClB,iBAAiB,CAAC,gB,uBAGlB,iBAAiB,CAAC,gB,uBAalB,iBAAiB,CAAC,kB;;;;iDAfd,I;;;;AAG2B,uBAAM,oBAAoB,CAC1D,OAAO,CAAC,aADkD,EAE1D,OAAO,CAAC,OAFkD,CAA1B;;;AAA5B,gBAAA,iB;;AAK2C,uBAAM,MAAM,CAAC,iBAAD,CAAZ;;;AAA3C,gBAAA,U;;oBACD,U;;;;;iDACI,K;;;iDAGF,UAAU,CAAC,MAAX,CAAkB,QAAlB,CAA2B,eAAe,CAAC,iBAA3C,C;;;;AAGiC,uBAAM,MAAM,EAAZ;;;AAAlC,gBAAA,W;AACA,gBAAA,mB,GAA0C,WAAW,CAAC,MAAZ,CAC9C,UAAC,UAAD;AAAA,yBAAkC,UAAU,CAAC,OAAX,KAAuB,OAAO,CAAC,aAAjE;AAAA,iBAD8C,C;;sBAI5C,mBAAmB,CAAC,MAApB,KAA+B,C;;;;;iDAC1B,K;;;iDAGF,mBAAmB,CAAC,IAApB,CAAyB,UAAC,UAAD;AAAA,yBAC9B,UAAU,CAAC,MAAX,CAAkB,QAAlB,CAA2B,eAAe,CAAC,IAA3C,CAD8B;AAAA,iBAAzB,C;;;sBAKD,IAAI,KAAJ,CAAU,qBAAV,C;;;;;;;;;AAEX;AAhDH;;AAAA;AAAA","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BeaconMessageType, PermissionScope } from '..';\nimport { getAccountIdentifier } from '../utils/get-account-identifier';\n/**\n * @internalapi\n *\n * The PermissionValidator is used to check if permissions for a certain message type have been given\n */\nexport class PermissionValidator {\n    /**\n     * Check if permissions were given for a certain message type.\n     *\n     * PermissionRequest and BroadcastRequest will always return true.\n     *\n     * @param message Beacon Message\n     */\n    static hasPermission(message, getOne, getAll) {\n        return __awaiter(this, void 0, void 0, function* () {\n            switch (message.type) {\n                case BeaconMessageType.PermissionRequest:\n                case BeaconMessageType.BroadcastRequest: {\n                    return true;\n                }\n                case BeaconMessageType.OperationRequest: {\n                    const accountIdentifier = yield getAccountIdentifier(message.sourceAddress, message.network);\n                    const permission = yield getOne(accountIdentifier);\n                    if (!permission) {\n                        return false;\n                    }\n                    return permission.scopes.includes(PermissionScope.OPERATION_REQUEST);\n                }\n                case BeaconMessageType.SignPayloadRequest: {\n                    const permissions = yield getAll();\n                    const filteredPermissions = permissions.filter((permission) => permission.address === message.sourceAddress);\n                    if (filteredPermissions.length === 0) {\n                        return false;\n                    }\n                    return filteredPermissions.some((permission) => permission.scopes.includes(PermissionScope.SIGN));\n                }\n                default:\n                    throw new Error('Message not handled');\n            }\n        });\n    }\n}\n//# sourceMappingURL=PermissionValidator.js.map"]},"metadata":{},"sourceType":"module"}