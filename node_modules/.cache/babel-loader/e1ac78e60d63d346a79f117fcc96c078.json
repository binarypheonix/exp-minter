{"ast":null,"code":"var _jsxFileName = \"/Users/frankenstein/projects/minter/src/components/CreateNonFungiblePage/FileUpload.tsx\";\nimport React, { createRef, useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { Box, Flex, Heading, Text, Image, useDisclosure } from '@chakra-ui/react';\nimport { useSelector, useDispatch } from '../../reducer';\nimport { mintCsvTokensAction, readFileAsDataUrlAction } from '../../reducer/async/actions';\nimport { updateDisplayImageFile } from '../../reducer/slices/createNft';\nimport FormModal from '../common/modals/FormModal';\nimport { useLocation } from 'wouter';\nimport { MinterButton } from '../common';\nimport { clearSelectedCsvFile } from '../../reducer/slices/createNftCsvImport';\nexport function FilePreview({\n  file\n}) {\n  const dispatch = useDispatch();\n\n  if (/^image\\/.*/.test(file.type)) {\n    return /*#__PURE__*/React.createElement(Image, {\n      src: file.objectUrl,\n      width: \"100%\",\n      height: \"100%\",\n      objectFit: \"scale-down\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 7\n      }\n    });\n  }\n\n  if (/^video\\/.*/.test(file.type)) {\n    const canvasRef = createRef();\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"video\", {\n      controls: true,\n      muted: true,\n      onLoadedData: e => {\n        const canvas = canvasRef.current;\n\n        if (!canvas) {\n          return console.error('`canvasRef` current element is null');\n        }\n\n        const video = e.currentTarget;\n        canvas.width = video.videoWidth;\n        canvas.height = video.videoHeight;\n        var canvasContext = canvas.getContext('2d');\n\n        if (!canvasContext) {\n          return console.error('`2d` canvas context not supported');\n        }\n\n        canvasContext.drawImage(video, 0, 0);\n        const type = 'image/png';\n        canvas.toBlob(blob => {\n          if (!blob) {\n            return console.error('Could not convert canvas to blob');\n          }\n\n          dispatch(updateDisplayImageFile({\n            objectUrl: URL.createObjectURL(blob),\n            name: 'foo',\n            size: blob.size,\n            type: blob.type\n          }));\n        }, type);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"source\", {\n      src: file.objectUrl,\n      type: file.type,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: canvasRef,\n      style: {\n        display: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  if (file.type === 'model/gltf+json' || file.type === 'model/gltf-binary') {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"model-viewer\", {\n      \"camera-controls\": true,\n      \"auto-rotate\": true,\n      \"data-js-focus-visible\": true,\n      src: file.objectUrl,\n      class: \"upload-preview\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  return null;\n}\nexport default function FileUpload() {\n  var _state$selectedFile;\n\n  const state = useSelector(s => s.createNft);\n  const dispatch = useDispatch();\n  const onDrop = useCallback(files => {\n    dispatch(readFileAsDataUrlAction({\n      ns: 'createNft',\n      file: files[0]\n    }));\n  }, [dispatch]);\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop,\n    maxFiles: 1,\n    maxSize: 30 * 1024 * 1024,\n    accept: ['image/*', 'video/*', 'model/gltf-binary', 'model/gltf+json', '.gltf', '.glb']\n  });\n  return /*#__PURE__*/React.createElement(Flex, {\n    align: \"center\",\n    flexDir: \"column\",\n    width: \"100%\",\n    flex: \"1\",\n    pt: {\n      base: 2,\n      md: 12\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Heading, {\n    size: \"lg\",\n    paddingBottom: 8,\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, \"Upload your file\"), /*#__PURE__*/React.createElement(Text, {\n    fontSize: \"xs\",\n    color: \"brand.blue\",\n    fontFamily: \"mono\",\n    textAlign: \"center\",\n    pb: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }, \"JPG, PNG, GIF, WEBP, SVG, MP4, WebM, Ogg, Gltf, Glb. Max size 30mb\"), /*#__PURE__*/React.createElement(Flex, Object.assign({\n    borderStyle: \"dashed\",\n    borderWidth: \"2px\",\n    borderColor: \"brand.lightBlue\",\n    borderRadius: \"3px\",\n    width: \"100%\",\n    justify: \"center\",\n    align: \"center\"\n  }, getRootProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Box, Object.assign({\n    as: \"input\"\n  }, getInputProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  })), ((_state$selectedFile = state.selectedFile) === null || _state$selectedFile === void 0 ? void 0 : _state$selectedFile.objectUrl) ? /*#__PURE__*/React.createElement(Box, {\n    p: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Flex, {\n    justify: \"center\",\n    align: \"center\",\n    maxWidth: \"400px\",\n    maxHeight: \"400px\",\n    overflow: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FilePreview, {\n    file: state.selectedFile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 15\n    }\n  }))) : /*#__PURE__*/React.createElement(Flex, {\n    borderColor: \"white\",\n    borderWidth: \"1px\",\n    flexDir: \"column\",\n    align: \"center\",\n    py: 24,\n    bg: \"brand.brightGray\",\n    flex: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    fontSize: 20,\n    textAlign: \"center\",\n    paddingX: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }\n  }, \"Click or drag file to this area to upload\"), /*#__PURE__*/React.createElement(Text, {\n    fontSize: 18,\n    color: \"brand.gray\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }\n  }, \"Support for single file\"))));\n}\nexport function CsvFileUpload() {\n  const state = useSelector(s => s.createNftCsvImport);\n  const dispatch = useDispatch();\n  const disclosure = useDisclosure();\n  const [, setLocation] = useLocation();\n  const onDrop = useCallback(files => {\n    dispatch(readFileAsDataUrlAction({\n      ns: 'createNftCsvImport',\n      file: files[0]\n    }));\n  }, [dispatch]);\n  const {\n    getRootProps,\n    getInputProps\n  } = useDropzone({\n    onDrop,\n    maxFiles: 1,\n    maxSize: 30 * 1024 * 1024 // The type for a csv file is blank in some cases (like in windows chrome)\n    // accept: ['text/csv']\n\n  });\n  return /*#__PURE__*/React.createElement(Flex, {\n    flexDir: \"column\",\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Flex, Object.assign({\n    bg: \"brand.brightGray\",\n    border: \"1px solid\",\n    borderColor: \"brand.lightBlue\",\n    borderRadius: \"5px\",\n    display: \"inline-flex\",\n    marginBottom: \"4\",\n    paddingX: 16,\n    paddingY: 12\n  }, getRootProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, getInputProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Text, {\n    fontWeight: \"500\",\n    fontSize: 18,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 9\n    }\n  }, state.selectedCsvFile ? `Selected file: ${state.selectedCsvFile.name}` : 'Click or drag CSV file to this area to upload')), /*#__PURE__*/React.createElement(Flex, {\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MinterButton, {\n    variant: state.selectedCsvFile === null ? 'primaryActionInactive' : 'primaryAction',\n    onClick: () => state.selectedCsvFile && disclosure.onOpen(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }\n  }, \"Mint from CSV\")), /*#__PURE__*/React.createElement(FormModal, {\n    disclosure: disclosure,\n    method: \"mintCsvTokens\",\n    dispatchThunk: () => dispatch(mintCsvTokensAction()),\n    onComplete: () => dispatch(clearSelectedCsvFile()),\n    afterClose: () => setLocation('/collections'),\n    dispatchOnOpen: true,\n    pendingAsyncMessage: /*#__PURE__*/React.createElement(React.Fragment, null, \"Opening wallet...\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Text, {\n      fontSize: \"1rem\",\n      fontWeight: \"normal\",\n      marginTop: 4,\n      textAlign: \"center\",\n      color: \"gray.500\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      role: \"img\",\n      \"aria-label\": \"lightbulb\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 15\n      }\n    }, \"\\uD83C\\uDF31\"), ' ', \"Minting on Tezos produces 1,500,000 times less CO2 emissions than Ethereum.\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/src/components/CreateNonFungiblePage/FileUpload.tsx"],"names":["React","createRef","useCallback","useDropzone","Box","Flex","Heading","Text","Image","useDisclosure","useSelector","useDispatch","mintCsvTokensAction","readFileAsDataUrlAction","updateDisplayImageFile","FormModal","useLocation","MinterButton","clearSelectedCsvFile","FilePreview","file","dispatch","test","type","objectUrl","canvasRef","e","canvas","current","console","error","video","currentTarget","width","videoWidth","height","videoHeight","canvasContext","getContext","drawImage","toBlob","blob","URL","createObjectURL","name","size","display","FileUpload","state","s","createNft","onDrop","files","ns","getRootProps","getInputProps","maxFiles","maxSize","accept","base","md","selectedFile","CsvFileUpload","createNftCsvImport","disclosure","setLocation","selectedCsvFile","onOpen"],"mappings":"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","sourcesContent":["import React, { createRef, useCallback } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport {\n  Box,\n  Flex,\n  Heading,\n  Text,\n  Image,\n  useDisclosure\n} from '@chakra-ui/react';\nimport { useSelector, useDispatch } from '../../reducer';\nimport {\n  mintCsvTokensAction,\n  readFileAsDataUrlAction\n} from '../../reducer/async/actions';\nimport {\n  updateDisplayImageFile,\n  SelectedFile\n} from '../../reducer/slices/createNft';\nimport FormModal from '../common/modals/FormModal';\nimport { useLocation } from 'wouter';\nimport { MinterButton } from '../common';\nimport { clearSelectedCsvFile } from '../../reducer/slices/createNftCsvImport';\n\nexport function FilePreview({ file }: { file: SelectedFile }) {\n  const dispatch = useDispatch();\n  if (/^image\\/.*/.test(file.type)) {\n    return (\n      <Image\n        src={file.objectUrl}\n        width=\"100%\"\n        height=\"100%\"\n        objectFit=\"scale-down\"\n      />\n    );\n  }\n  if (/^video\\/.*/.test(file.type)) {\n    const canvasRef = createRef<HTMLCanvasElement>();\n    return (\n      <>\n        <video\n          controls\n          muted\n          onLoadedData={e => {\n            const canvas = canvasRef.current;\n            if (!canvas) {\n              return console.error('`canvasRef` current element is null');\n            }\n            const video = e.currentTarget;\n            canvas.width = video.videoWidth;\n            canvas.height = video.videoHeight;\n            var canvasContext = canvas.getContext('2d');\n            if (!canvasContext) {\n              return console.error('`2d` canvas context not supported');\n            }\n            canvasContext.drawImage(video, 0, 0);\n            const type = 'image/png';\n            canvas.toBlob(blob => {\n              if (!blob) {\n                return console.error('Could not convert canvas to blob');\n              }\n              dispatch(\n                updateDisplayImageFile({\n                  objectUrl: URL.createObjectURL(blob),\n                  name: 'foo',\n                  size: blob.size,\n                  type: blob.type\n                })\n              );\n            }, type);\n          }}\n        >\n          <source src={file.objectUrl} type={file.type} />\n        </video>\n        <canvas ref={canvasRef} style={{ display: 'none' }} />\n      </>\n    );\n  }\n  if (file.type === 'model/gltf+json' || file.type === 'model/gltf-binary') {\n    return (\n      <>\n        <model-viewer\n          camera-controls\n          auto-rotate\n          data-js-focus-visible\n          src={file.objectUrl}\n          class=\"upload-preview\"\n        ></model-viewer>\n      </>\n    );\n  }\n  return null;\n}\n\nexport default function FileUpload() {\n  const state = useSelector(s => s.createNft);\n  const dispatch = useDispatch();\n\n  const onDrop = useCallback(\n    (files: File[]) => {\n      dispatch(readFileAsDataUrlAction({ ns: 'createNft', file: files[0] }));\n    },\n    [dispatch]\n  );\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop,\n    maxFiles: 1,\n    maxSize: 30 * 1024 * 1024,\n    accept: [\n      'image/*',\n      'video/*',\n      'model/gltf-binary',\n      'model/gltf+json',\n      '.gltf',\n      '.glb'\n    ]\n  });\n\n  return (\n    <Flex\n      align=\"center\"\n      flexDir=\"column\"\n      width=\"100%\"\n      flex=\"1\"\n      pt={{\n        base: 2,\n        md: 12\n      }}\n    >\n      <Heading size=\"lg\" paddingBottom={8} textAlign=\"center\">\n        Upload your file\n      </Heading>\n      <Text\n        fontSize=\"xs\"\n        color=\"brand.blue\"\n        fontFamily=\"mono\"\n        textAlign=\"center\"\n        pb={4}\n      >\n        JPG, PNG, GIF, WEBP, SVG, MP4, WebM, Ogg, Gltf, Glb. Max size 30mb\n      </Text>\n      <Flex\n        borderStyle=\"dashed\"\n        borderWidth=\"2px\"\n        borderColor=\"brand.lightBlue\"\n        borderRadius=\"3px\"\n        width=\"100%\"\n        justify=\"center\"\n        align=\"center\"\n        {...getRootProps()}\n      >\n        <Box as=\"input\" {...getInputProps()} />\n        {state.selectedFile?.objectUrl ? (\n          <Box p={4}>\n            <Flex\n              justify=\"center\"\n              align=\"center\"\n              maxWidth=\"400px\"\n              maxHeight=\"400px\"\n              overflow=\"hidden\"\n            >\n              <FilePreview file={state.selectedFile} />\n            </Flex>\n          </Box>\n        ) : (\n          <Flex\n            borderColor=\"white\"\n            borderWidth=\"1px\"\n            flexDir=\"column\"\n            align=\"center\"\n            py={24}\n            bg=\"brand.brightGray\"\n            flex=\"1\"\n          >\n            <Text fontSize={20} textAlign=\"center\" paddingX={4}>\n              Click or drag file to this area to upload\n            </Text>\n            <Text fontSize={18} color=\"brand.gray\">\n              Support for single file\n            </Text>\n          </Flex>\n        )}\n      </Flex>\n    </Flex>\n  );\n}\n\nexport function CsvFileUpload() {\n  const state = useSelector(s => s.createNftCsvImport);\n  const dispatch = useDispatch();\n  const disclosure = useDisclosure();\n  const [, setLocation] = useLocation();\n\n  const onDrop = useCallback(\n    (files: File[]) => {\n      dispatch(\n        readFileAsDataUrlAction({ ns: 'createNftCsvImport', file: files[0] })\n      );\n    },\n    [dispatch]\n  );\n\n  const { getRootProps, getInputProps } = useDropzone({\n    onDrop,\n    maxFiles: 1,\n    maxSize: 30 * 1024 * 1024,\n    // The type for a csv file is blank in some cases (like in windows chrome)\n    // accept: ['text/csv']\n  });\n\n  return (\n    <Flex flexDir=\"column\" align=\"center\">\n      <Flex\n        bg=\"brand.brightGray\"\n        border=\"1px solid\"\n        borderColor=\"brand.lightBlue\"\n        borderRadius=\"5px\"\n        display=\"inline-flex\"\n        marginBottom=\"4\"\n        paddingX={16}\n        paddingY={12}\n        {...getRootProps()}\n      >\n        <input {...getInputProps()} />\n        <Text fontWeight=\"500\" fontSize={18}>\n          {state.selectedCsvFile\n            ? `Selected file: ${state.selectedCsvFile.name}`\n            : 'Click or drag CSV file to this area to upload'}\n        </Text>\n      </Flex>\n      <Flex justify=\"center\">\n        <MinterButton\n          variant={\n            state.selectedCsvFile === null\n              ? 'primaryActionInactive'\n              : 'primaryAction'\n          }\n          onClick={() => state.selectedCsvFile && disclosure.onOpen()}\n        >\n          Mint from CSV\n        </MinterButton>\n      </Flex>\n      <FormModal\n        disclosure={disclosure}\n        method=\"mintCsvTokens\"\n        dispatchThunk={() => dispatch(mintCsvTokensAction())}\n        onComplete={() => dispatch(clearSelectedCsvFile())}\n        afterClose={() => setLocation('/collections')}\n        dispatchOnOpen={true}\n        pendingAsyncMessage={\n          <>\n            Opening wallet...\n            <br />\n            <Text\n              fontSize=\"1rem\"\n              fontWeight=\"normal\"\n              marginTop={4}\n              textAlign=\"center\"\n              color=\"gray.500\"\n            >\n              <span role=\"img\" aria-label=\"lightbulb\">\n                🌱\n              </span>{' '}\n              Minting on Tezos produces 1,500,000 times less CO2 emissions than\n              Ethereum.\n            </Text>\n          </>\n        }\n      />\n    </Flex>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}