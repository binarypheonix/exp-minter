{"ast":null,"code":"import _regeneratorRuntime from\"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _objectSpread from\"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{TezosToolkit,MichelCodecPacker,Context}from'@taquito/taquito';import{BeaconWallet}from'@taquito/beacon-wallet';import{MetadataProvider,DEFAULT_HANDLERS}from'@taquito/tzip16';import{Tzip12Module}from'@taquito/tzip12';import CustomIpfsHttpHandler from'./util/taquito-custom-ipfs-http-handler';import{BetterCallDev}from'./service/bcd';import*as tzUtils from'./util/tezosToolkit';import{NetworkType}from'@airgap/beacon-sdk';import{TzKt}from'./service/tzkt';import{isIpfsUri}from'./util/ipfs';export var Status;(function(Status){Status[\"Configured\"]=\"Configured\";Status[\"ToolkitConnected\"]=\"ToolkitConnected\";Status[\"WalletConnected\"]=\"WalletConnected\";})(Status||(Status={}));export function configure(config){// Upgrade `edonet` reference in config to `edo2net`. This is done for the\n// sake of compatibility since the meaning of \"edonet\" is ambiguous: in some\n// parts of the ecosystem it refers to latest version of edonet, which is also\n// referred to as \"edo2net\".\nvar compatibilityConfig=_objectSpread(_objectSpread({},config),{},{network:config.network==='edonet'?'edo2net':config.network});return{status:Status.Configured,config:compatibilityConfig,betterCallDev:new BetterCallDev(compatibilityConfig),tzkt:new TzKt(compatibilityConfig),toolkit:null,wallet:null,walletReconnectAttempted:false,tzPublicKey:null};}function createMetadataResolver(system,toolkit,contractAddress){var ipfsUrl=system.config.ipfsGateway;var ipfsGateway=ipfsUrl.replace(/^https?:\\/\\//,'');var gatewayProtocol=ipfsUrl.startsWith('https')?'https':'http';var ipfsHandler=new CustomIpfsHttpHandler(ipfsGateway,gatewayProtocol);DEFAULT_HANDLERS.set('ipfs',ipfsHandler);var provider=new MetadataProvider(DEFAULT_HANDLERS);var context=new Context(toolkit.rpc);var defaultContract=toolkit.contract.at(contractAddress);var contractCache={};return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(uri,address){var contract;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!isIpfsUri(uri)){_context.next=5;break;}_context.next=3;return defaultContract;case 3:contract=_context.sent;return _context.abrupt(\"return\",provider.provideMetadata(contract,uri,context));case 5:if(contractCache[address]){_context.next=9;break;}_context.next=8;return toolkit.contract.at(address);case 8:contractCache[address]=_context.sent;case 9:return _context.abrupt(\"return\",provider.provideMetadata(contractCache[address],uri,context));case 10:case\"end\":return _context.stop();}}},_callee);}));return function(_x,_x2){return _ref.apply(this,arguments);};}();}export function connectToolkit(system){var toolkit=new TezosToolkit(system.config.rpc);toolkit.addExtension(new Tzip12Module());toolkit.setPackerProvider(new MichelCodecPacker());var faucetAddress=system.config.contracts.nftFaucet;return _objectSpread(_objectSpread({},system),{},{status:Status.ToolkitConnected,toolkit:toolkit,resolveMetadata:createMetadataResolver(system,toolkit,faucetAddress),walletReconnectAttempted:false});}function networkType(config){if(config.network==='mainnet'){return NetworkType.MAINNET;}if(config.network==='delphinet'){return NetworkType.DELPHINET;}// Edonet support is split between two network types, edonet and edo2net. For\n// now, .CUSTOM must be used when referring to edo2net.\nif(config.network==='edonet'){return NetworkType.EDONET;}if(config.network==='edo2net'){return NetworkType.CUSTOM;}if(config.network==='florencenet'){return NetworkType.FLORENCENET;}return NetworkType.CUSTOM;}var wallet=null;function getWallet(system,eventHandlers){if(wallet===null){wallet=new BeaconWallet({name:'OpenSystem dApp',preferredNetwork:networkType(system.config),eventHandlers:eventHandlers});}return wallet;}function initWallet(_x3,_x4,_x5){return _initWallet.apply(this,arguments);}function _initWallet(){_initWallet=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(system,forceConnect,eventHandlers){var network,wallet,activeAccount;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:network=networkType(system.config);wallet=getWallet(system,eventHandlers);_context2.next=4;return wallet.client.getActiveAccount();case 4:activeAccount=_context2.sent;if(activeAccount){_context2.next=19;break;}if(!forceConnect){_context2.next=18;break;}_context2.prev=7;_context2.next=10;return wallet.requestPermissions({network:{type:system.config.network==='edo2net'?system.config.network:network,rpcUrl:system.config.rpc}});case 10:_context2.next=16;break;case 12:_context2.prev=12;_context2.t0=_context2[\"catch\"](7);// requestPermissions failed - reset wallet selection\nwallet.clearActiveAccount();throw _context2.t0;case 16:_context2.next=19;break;case 18:return _context2.abrupt(\"return\",false);case 19:return _context2.abrupt(\"return\",true);case 20:case\"end\":return _context2.stop();}}},_callee2,null,[[7,12]]);}));return _initWallet.apply(this,arguments);}function createSystemWithWallet(_x6){return _createSystemWithWallet.apply(this,arguments);}function _createSystemWithWallet(){_createSystemWithWallet=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(system){var wallet,tzPublicKey;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:wallet=getWallet(system);system.toolkit.setWalletProvider(wallet);tzUtils.setConfirmationPollingInterval(system.toolkit);_context3.next=5;return wallet.getPKH();case 5:tzPublicKey=_context3.sent;return _context3.abrupt(\"return\",_objectSpread(_objectSpread({},system),{},{status:Status.WalletConnected,wallet:wallet,tzPublicKey:tzPublicKey}));case 7:case\"end\":return _context3.stop();}}},_callee3);}));return _createSystemWithWallet.apply(this,arguments);}export function reconnectWallet(_x7,_x8){return _reconnectWallet.apply(this,arguments);}function _reconnectWallet(){_reconnectWallet=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(system,eventHandlers){var connected,systemWithWallet;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return initWallet(system,false,eventHandlers);case 2:connected=_context4.sent;if(!connected){_context4.next=10;break;}_context4.next=6;return createSystemWithWallet(system);case 6:systemWithWallet=_context4.sent;return _context4.abrupt(\"return\",_objectSpread(_objectSpread({},systemWithWallet),{},{walletReconnectAttempted:true}));case 10:return _context4.abrupt(\"return\",_objectSpread(_objectSpread({},system),{},{walletReconnectAttempted:true}));case 11:case\"end\":return _context4.stop();}}},_callee4);}));return _reconnectWallet.apply(this,arguments);}export function connectWallet(_x9,_x10){return _connectWallet.apply(this,arguments);}function _connectWallet(){_connectWallet=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(system,eventHandlers){return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return initWallet(system,true,eventHandlers);case 2:_context5.next=4;return createSystemWithWallet(system);case 4:return _context5.abrupt(\"return\",_context5.sent);case 5:case\"end\":return _context5.stop();}}},_callee5);}));return _connectWallet.apply(this,arguments);}export function disconnectWallet(_x11){return _disconnectWallet.apply(this,arguments);}function _disconnectWallet(){_disconnectWallet=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(system){var toolkit;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.next=2;return system.wallet.disconnect();case 2:toolkit=new TezosToolkit(system.config.rpc);toolkit.setPackerProvider(new MichelCodecPacker());toolkit.addExtension(new Tzip12Module());wallet=null;return _context6.abrupt(\"return\",_objectSpread(_objectSpread({},system),{},{status:Status.ToolkitConnected,toolkit:toolkit,wallet:null,tzPublicKey:null}));case 7:case\"end\":return _context6.stop();}}},_callee6);}));return _disconnectWallet.apply(this,arguments);}export var Minter={configure:configure,reconnectWallet:reconnectWallet,connectToolkit:connectToolkit,connectWallet:connectWallet,disconnectWallet:disconnectWallet};","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/src/lib/system.ts"],"names":["TezosToolkit","MichelCodecPacker","Context","BeaconWallet","MetadataProvider","DEFAULT_HANDLERS","Tzip12Module","CustomIpfsHttpHandler","BetterCallDev","tzUtils","NetworkType","TzKt","isIpfsUri","Status","configure","config","compatibilityConfig","network","status","Configured","betterCallDev","tzkt","toolkit","wallet","walletReconnectAttempted","tzPublicKey","createMetadataResolver","system","contractAddress","ipfsUrl","ipfsGateway","replace","gatewayProtocol","startsWith","ipfsHandler","set","provider","context","rpc","defaultContract","contract","at","contractCache","uri","address","provideMetadata","connectToolkit","addExtension","setPackerProvider","faucetAddress","contracts","nftFaucet","ToolkitConnected","resolveMetadata","networkType","MAINNET","DELPHINET","EDONET","CUSTOM","FLORENCENET","getWallet","eventHandlers","name","preferredNetwork","initWallet","forceConnect","client","getActiveAccount","activeAccount","requestPermissions","type","rpcUrl","clearActiveAccount","createSystemWithWallet","setWalletProvider","setConfirmationPollingInterval","getPKH","WalletConnected","reconnectWallet","connected","systemWithWallet","connectWallet","disconnectWallet","disconnect","Minter"],"mappings":"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","sourcesContent":["import {\n  TezosToolkit,\n  MichelCodecPacker,\n  Context,\n  ContractAbstraction,\n  ContractProvider\n} from '@taquito/taquito';\nimport { BeaconWallet } from '@taquito/beacon-wallet';\nimport { MetadataProvider, DEFAULT_HANDLERS } from '@taquito/tzip16';\nimport { Tzip12Module } from '@taquito/tzip12';\nimport CustomIpfsHttpHandler from './util/taquito-custom-ipfs-http-handler';\nimport { BetterCallDev } from './service/bcd';\nimport * as tzUtils from './util/tezosToolkit';\nimport { DAppClientOptions, NetworkType } from '@airgap/beacon-sdk';\nimport { TzKt } from './service/tzkt';\nimport { isIpfsUri } from './util/ipfs';\n\nexport interface Config {\n  rpc: string;\n  network: string;\n  bcd: {\n    api: string;\n    gui: string;\n  };\n  tzkt: {\n    api: string;\n  };\n  contracts: {\n    nftFaucet: string;\n    marketplace: {\n      fixedPrice: {\n        tez: string;\n      };\n    };\n  };\n  ipfsApi: string;\n  ipfsGateway: string;\n}\n\nexport enum Status {\n  Configured = 'Configured',\n  ToolkitConnected = 'ToolkitConnected',\n  WalletConnected = 'WalletConnected'\n}\n\nexport interface SystemConfigured {\n  status: Status.Configured;\n  config: Config;\n  betterCallDev: BetterCallDev;\n  tzkt: TzKt;\n  toolkit: null;\n  wallet: null;\n  walletReconnectAttempted: boolean;\n  tzPublicKey: null;\n}\n\ntype ResolveMetadata = (\n  uri: string,\n  address: string\n) => ReturnType<MetadataProvider['provideMetadata']>;\n\nexport interface SystemWithToolkit {\n  status: Status.ToolkitConnected;\n  config: Config;\n  betterCallDev: BetterCallDev;\n  tzkt: TzKt;\n  toolkit: TezosToolkit;\n  resolveMetadata: ResolveMetadata;\n  wallet: null;\n  walletReconnectAttempted: boolean;\n  tzPublicKey: null;\n}\n\nexport interface SystemWithWallet {\n  status: Status.WalletConnected;\n  config: Config;\n  betterCallDev: BetterCallDev;\n  tzkt: TzKt;\n  toolkit: TezosToolkit;\n  resolveMetadata: ResolveMetadata;\n  wallet: BeaconWallet;\n  walletReconnectAttempted: boolean;\n  tzPublicKey: string;\n}\n\nexport type System = SystemConfigured | SystemWithToolkit | SystemWithWallet;\n\nexport function configure(config: Config): SystemConfigured {\n  // Upgrade `edonet` reference in config to `edo2net`. This is done for the\n  // sake of compatibility since the meaning of \"edonet\" is ambiguous: in some\n  // parts of the ecosystem it refers to latest version of edonet, which is also\n  // referred to as \"edo2net\".\n  const compatibilityConfig = {\n    ...config,\n    network: config.network === 'edonet' ? 'edo2net' : config.network\n  };\n  return {\n    status: Status.Configured,\n    config: compatibilityConfig,\n    betterCallDev: new BetterCallDev(compatibilityConfig),\n    tzkt: new TzKt(compatibilityConfig),\n    toolkit: null,\n    wallet: null,\n    walletReconnectAttempted: false,\n    tzPublicKey: null\n  };\n}\n\nfunction createMetadataResolver(\n  system: SystemConfigured,\n  toolkit: TezosToolkit,\n  contractAddress: string\n): ResolveMetadata {\n  const ipfsUrl = system.config.ipfsGateway;\n  const ipfsGateway = ipfsUrl.replace(/^https?:\\/\\//, '');\n  const gatewayProtocol = ipfsUrl.startsWith('https') ? 'https' : 'http';\n\n  const ipfsHandler = new CustomIpfsHttpHandler(ipfsGateway, gatewayProtocol);\n  DEFAULT_HANDLERS.set('ipfs', ipfsHandler);\n  const provider = new MetadataProvider(DEFAULT_HANDLERS);\n  const context = new Context(toolkit.rpc);\n\n  const defaultContract = toolkit.contract.at(contractAddress);\n  type Contract = ContractAbstraction<ContractProvider>;\n  const contractCache: Record<string, Contract> = {};\n\n  return async (uri, address) => {\n    if (isIpfsUri(uri)) {\n      const contract = await defaultContract;\n      return provider.provideMetadata(contract, uri, context);\n    }\n    if (!contractCache[address]) {\n      contractCache[address] = await toolkit.contract.at(address);\n    }\n    return provider.provideMetadata(contractCache[address], uri, context);\n  };\n}\n\nexport function connectToolkit(system: SystemConfigured): SystemWithToolkit {\n  const toolkit = new TezosToolkit(system.config.rpc);\n  toolkit.addExtension(new Tzip12Module());\n  toolkit.setPackerProvider(new MichelCodecPacker());\n  const faucetAddress = system.config.contracts.nftFaucet;\n  return {\n    ...system,\n    status: Status.ToolkitConnected,\n    toolkit: toolkit,\n    resolveMetadata: createMetadataResolver(system, toolkit, faucetAddress),\n    walletReconnectAttempted: false\n  };\n}\n\nfunction networkType(config: Config) {\n  if (config.network === 'mainnet') {\n    return NetworkType.MAINNET;\n  }\n  if (config.network === 'delphinet') {\n    return NetworkType.DELPHINET;\n  }\n  // Edonet support is split between two network types, edonet and edo2net. For\n  // now, .CUSTOM must be used when referring to edo2net.\n  if (config.network === 'edonet') {\n    return NetworkType.EDONET;\n  }\n  if (config.network === 'edo2net') {\n    return NetworkType.CUSTOM;\n  }\n  if (config.network === 'florencenet') {\n    return NetworkType.FLORENCENET;\n  }\n  return NetworkType.CUSTOM;\n}\n\nlet wallet: BeaconWallet | null = null;\n\nfunction getWallet(\n  system: SystemWithToolkit,\n  eventHandlers?: DAppClientOptions['eventHandlers']\n): BeaconWallet {\n  if (wallet === null) {\n    wallet = new BeaconWallet({\n      name: 'OpenSystem dApp',\n      preferredNetwork: networkType(system.config),\n      eventHandlers\n    });\n  }\n  return wallet;\n}\n\nasync function initWallet(\n  system: SystemWithToolkit,\n  forceConnect: boolean,\n  eventHandlers?: DAppClientOptions['eventHandlers']\n): Promise<boolean> {\n  const network = networkType(system.config);\n  const wallet = getWallet(system, eventHandlers);\n\n  const activeAccount = await wallet.client.getActiveAccount();\n\n  if (!activeAccount) {\n    if (forceConnect) {\n      try {\n        await wallet.requestPermissions({\n          network: {\n            type:\n              system.config.network === 'edo2net'\n                ? (system.config.network as NetworkType)\n                : network,\n            rpcUrl: system.config.rpc\n          }\n        });\n      } catch (error) {\n        // requestPermissions failed - reset wallet selection\n        wallet.clearActiveAccount();\n        throw error;\n      }\n    } else {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nasync function createSystemWithWallet(\n  system: SystemWithToolkit\n): Promise<SystemWithWallet> {\n  const wallet = getWallet(system);\n\n  system.toolkit.setWalletProvider(wallet);\n  tzUtils.setConfirmationPollingInterval(system.toolkit);\n\n  const tzPublicKey = await wallet.getPKH();\n\n  return {\n    ...system,\n    status: Status.WalletConnected,\n    wallet: wallet,\n    tzPublicKey: tzPublicKey\n  };\n}\n\nexport async function reconnectWallet(\n  system: SystemWithToolkit,\n  eventHandlers?: DAppClientOptions['eventHandlers']\n): Promise<SystemWithWallet | SystemWithToolkit> {\n  const connected = await initWallet(system, false, eventHandlers);\n  if (connected) {\n    const systemWithWallet = await createSystemWithWallet(system);\n    return { ...systemWithWallet, walletReconnectAttempted: true };\n  } else {\n    return { ...system, walletReconnectAttempted: true };\n  }\n}\n\nexport async function connectWallet(\n  system: SystemWithToolkit,\n  eventHandlers?: DAppClientOptions['eventHandlers']\n): Promise<SystemWithWallet> {\n  await initWallet(system, true, eventHandlers);\n  return await createSystemWithWallet(system);\n}\n\nexport async function disconnectWallet(\n  system: SystemWithWallet\n): Promise<SystemWithToolkit> {\n  await system.wallet.disconnect();\n  const toolkit = new TezosToolkit(system.config.rpc);\n  toolkit.setPackerProvider(new MichelCodecPacker());\n  toolkit.addExtension(new Tzip12Module());\n  wallet = null;\n  return {\n    ...system,\n    status: Status.ToolkitConnected,\n    toolkit: toolkit,\n    wallet: null,\n    tzPublicKey: null\n  };\n}\n\nexport const Minter = {\n  configure,\n  reconnectWallet,\n  connectToolkit,\n  connectWallet,\n  disconnectWallet\n};\n"]},"metadata":{},"sourceType":"module"}