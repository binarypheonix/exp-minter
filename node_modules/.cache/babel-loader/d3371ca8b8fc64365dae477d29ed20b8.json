{"ast":null,"code":"import React from'react';import{Button,ModalHeader,ModalFooter,ModalBody,ModalCloseButton,Text,useDisclosure}from'@chakra-ui/react';import{MinterButton}from'../../common';import{useDispatch,useSelector}from'../../../reducer';import{cancelTokenSaleAction}from'../../../reducer/async/actions';import FormModal from'./FormModal';export function CancelTokenSaleModal(props){var dispatch=useDispatch();var initialRef=React.useRef(null);return/*#__PURE__*/React.createElement(FormModal,{disclosure:props.disclosure,sync:props.sync,method:\"cancelTokenSale\",dispatchThunk:function dispatchThunk(){return dispatch(cancelTokenSaleAction({contract:props.contract,tokenId:props.tokenId,saleId:props.saleId,saleType:props.saleType}));},initialRef:initialRef,pendingMessage:\"Canceling token sale...\",completeMessage:\"Token sale canceled\",body:function body(onSubmit){return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(ModalHeader,null,\"Are you sure?\"),/*#__PURE__*/React.createElement(ModalCloseButton,null),/*#__PURE__*/React.createElement(ModalBody,null,/*#__PURE__*/React.createElement(Text,null,\"Are you sure you want to cancel the sale?\")),/*#__PURE__*/React.createElement(ModalFooter,null,/*#__PURE__*/React.createElement(Button,{variant:\"primaryAction\",mr:3,onClick:function onClick(){return onSubmit();}},\"Yes\"),/*#__PURE__*/React.createElement(Button,{variant:\"cancelAction\",onClick:function onClick(){return props.disclosure.onClose();}},\"No\")));}});}export function CancelTokenSaleButton(props){var disclosure=useDisclosure();var _useSelector=useSelector(function(s){return s.status.cancelTokenSale;}),status=_useSelector.status;return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(MinterButton,{variant:\"cancelAction\",onClick:disclosure.onOpen,disabled:status==='in_transit'},\"Cancel sale\"),/*#__PURE__*/React.createElement(CancelTokenSaleModal,Object.assign({},props,{disclosure:disclosure,sync:props.sync})));}","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/src/components/common/modals/CancelTokenSale.tsx"],"names":["React","Button","ModalHeader","ModalFooter","ModalBody","ModalCloseButton","Text","useDisclosure","MinterButton","useDispatch","useSelector","cancelTokenSaleAction","FormModal","CancelTokenSaleModal","props","dispatch","initialRef","useRef","disclosure","sync","contract","tokenId","saleId","saleType","onSubmit","onClose","CancelTokenSaleButton","s","status","cancelTokenSale","onOpen"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OACEC,MADF,CAEEC,WAFF,CAGEC,WAHF,CAIEC,SAJF,CAKEC,gBALF,CAMEC,IANF,CAOEC,aAPF,KAQO,kBARP,CASA,OAASC,YAAT,KAA6B,cAA7B,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,kBAAzC,CACA,OAASC,qBAAT,KAAsC,gCAAtC,CACA,MAAOC,CAAAA,SAAP,KAAgE,aAAhE,CASA,MAAO,SAASC,CAAAA,oBAAT,CAA8BC,KAA9B,CAAgE,CACrE,GAAMC,CAAAA,QAAQ,CAAGN,WAAW,EAA5B,CACA,GAAMO,CAAAA,UAAU,CAAGhB,KAAK,CAACiB,MAAN,CAAa,IAAb,CAAnB,CACA,mBACE,oBAAC,SAAD,EACE,UAAU,CAAEH,KAAK,CAACI,UADpB,CAEE,IAAI,CAAEJ,KAAK,CAACK,IAFd,CAGE,MAAM,CAAC,iBAHT,CAIE,aAAa,CAAE,+BACbJ,CAAAA,QAAQ,CACNJ,qBAAqB,CAAC,CACpBS,QAAQ,CAAEN,KAAK,CAACM,QADI,CAEpBC,OAAO,CAAEP,KAAK,CAACO,OAFK,CAGpBC,MAAM,CAAER,KAAK,CAACQ,MAHM,CAIpBC,QAAQ,CAAET,KAAK,CAACS,QAJI,CAAD,CADf,CADK,EAJjB,CAcE,UAAU,CAAEP,UAdd,CAeE,cAAc,CAAC,yBAfjB,CAgBE,eAAe,CAAC,qBAhBlB,CAiBE,IAAI,CAAE,cAAAQ,QAAQ,qBACZ,qDACE,oBAAC,WAAD,sBADF,cAEE,oBAAC,gBAAD,MAFF,cAGE,oBAAC,SAAD,mBACE,oBAAC,IAAD,kDADF,CAHF,cAME,oBAAC,WAAD,mBACE,oBAAC,MAAD,EAAQ,OAAO,CAAC,eAAhB,CAAgC,EAAE,CAAE,CAApC,CAAuC,OAAO,CAAE,yBAAMA,CAAAA,QAAQ,EAAd,EAAhD,QADF,cAIE,oBAAC,MAAD,EACE,OAAO,CAAC,cADV,CAEE,OAAO,CAAE,yBAAMV,CAAAA,KAAK,CAACI,UAAN,CAAiBO,OAAjB,EAAN,EAFX,OAJF,CANF,CADY,EAjBhB,EADF,CAwCD,CASD,MAAO,SAASC,CAAAA,qBAAT,CAA+BZ,KAA/B,CAAkE,CACvE,GAAMI,CAAAA,UAAU,CAAGX,aAAa,EAAhC,CACA,iBAAmBG,WAAW,CAAC,SAAAiB,CAAC,QAAIA,CAAAA,CAAC,CAACC,MAAF,CAASC,eAAb,EAAF,CAA9B,CAAQD,MAAR,cAAQA,MAAR,CAEA,mBACE,qDACE,oBAAC,YAAD,EAAc,OAAO,CAAC,cAAtB,CAAqC,OAAO,CAAEV,UAAU,CAACY,MAAzD,CAAiE,QAAQ,CAAEF,MAAM,GAAK,YAAtF,gBADF,cAKE,oBAAC,oBAAD,kBACMd,KADN,EAEE,UAAU,CAAEI,UAFd,CAGE,IAAI,CAAEJ,KAAK,CAACK,IAHd,GALF,CADF,CAaD","sourcesContent":["import React from 'react';\nimport {\n  Button,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Text,\n  useDisclosure\n} from '@chakra-ui/react';\nimport { MinterButton } from '../../common';\nimport { useDispatch, useSelector } from '../../../reducer';\nimport { cancelTokenSaleAction } from '../../../reducer/async/actions';\nimport FormModal, { BaseModalProps, BaseModalButtonProps } from './FormModal';\n\ninterface CancelTokenSaleModalProps extends BaseModalProps {\n  contract: string;\n  tokenId: number;\n  saleId: number;\n  saleType: string;\n}\n\nexport function CancelTokenSaleModal(props: CancelTokenSaleModalProps) {\n  const dispatch = useDispatch();\n  const initialRef = React.useRef(null);\n  return (\n    <FormModal\n      disclosure={props.disclosure}\n      sync={props.sync}\n      method=\"cancelTokenSale\"\n      dispatchThunk={() =>\n        dispatch(\n          cancelTokenSaleAction({\n            contract: props.contract,\n            tokenId: props.tokenId,\n            saleId: props.saleId,\n            saleType: props.saleType\n          })\n        )\n      }\n      initialRef={initialRef}\n      pendingMessage=\"Canceling token sale...\"\n      completeMessage=\"Token sale canceled\"\n      body={onSubmit => (\n        <>\n          <ModalHeader>Are you sure?</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Text>Are you sure you want to cancel the sale?</Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button variant=\"primaryAction\" mr={3} onClick={() => onSubmit()}>\n              Yes\n            </Button>\n            <Button\n              variant=\"cancelAction\"\n              onClick={() => props.disclosure.onClose()}\n            >\n              No\n            </Button>\n          </ModalFooter>\n        </>\n      )}\n    />\n  );\n}\n\ninterface CancelTokenSaleButtonProps extends BaseModalButtonProps {\n  contract: string;\n  tokenId: number;\n  saleId: number;\n  saleType: string;\n}\n\nexport function CancelTokenSaleButton(props: CancelTokenSaleButtonProps) {\n  const disclosure = useDisclosure();\n  const { status } = useSelector(s => s.status.cancelTokenSale)\n  \n  return (\n    <>\n      <MinterButton variant=\"cancelAction\" onClick={disclosure.onOpen} disabled={status === 'in_transit'}>\n        Cancel sale\n      </MinterButton>\n\n      <CancelTokenSaleModal\n        {...props}\n        disclosure={disclosure}\n        sync={props.sync}\n      />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}