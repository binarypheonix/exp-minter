{"ast":null,"code":"import _regeneratorRuntime from \"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport * as sodium from 'libsodium-wrappers';\nimport * as bs58check from 'bs58check';\n/**\n * @internalapi\n *\n * Generate a deterministic account identifier based on an address and a network\n *\n * @param address\n * @param network\n */\n\nexport var getAccountIdentifier = function getAccountIdentifier(address, network) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var data, buffer;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            data = [address, network.type];\n\n            if (network.name) {\n              data.push(\"name:\".concat(network.name));\n            }\n\n            if (network.rpcUrl) {\n              data.push(\"rpc:\".concat(network.rpcUrl));\n            }\n\n            _context.next = 5;\n            return sodium.ready;\n\n          case 5:\n            buffer = Buffer.from(sodium.crypto_generichash(10, data.join('-')));\n            return _context.abrupt(\"return\", bs58check.encode(buffer));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n};","map":{"version":3,"sources":["../../../src/utils/get-account-identifier.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAK,MAAZ,MAAwB,oBAAxB;AACA,OAAO,KAAK,SAAZ,MAA2B,WAA3B;AAGA;;;;;;;AAOG;;AACH,OAAO,IAAM,oBAAoB,GAAG,SAAvB,oBAAuB,CAAO,OAAP,EAAwB,OAAxB;AAAA,SAA6D,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACzF,YAAA,IADyF,GACxE,CAAC,OAAD,EAAU,OAAO,CAAC,IAAlB,CADwE;;AAE/F,gBAAI,OAAO,CAAC,IAAZ,EAAkB;AAChB,cAAA,IAAI,CAAC,IAAL,gBAAkB,OAAO,CAAC,IAA1B;AACD;;AACD,gBAAI,OAAO,CAAC,MAAZ,EAAoB;AAClB,cAAA,IAAI,CAAC,IAAL,eAAiB,OAAO,CAAC,MAAzB;AACD;;AAP8F;AAS/F,mBAAM,MAAM,CAAC,KAAb;;AAT+F;AAWzF,YAAA,MAXyF,GAWhF,MAAM,CAAC,IAAP,CAAY,MAAM,CAAC,kBAAP,CAA0B,EAA1B,EAA8B,IAAI,CAAC,IAAL,CAAU,GAAV,CAA9B,CAAZ,CAXgF;AAAA,6CAaxF,SAAS,CAAC,MAAV,CAAiB,MAAjB,CAbwF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAA,EAA7D;AAAA,CAA7B","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as sodium from 'libsodium-wrappers';\nimport * as bs58check from 'bs58check';\n/**\n * @internalapi\n *\n * Generate a deterministic account identifier based on an address and a network\n *\n * @param address\n * @param network\n */\nexport const getAccountIdentifier = (address, network) => __awaiter(void 0, void 0, void 0, function* () {\n    const data = [address, network.type];\n    if (network.name) {\n        data.push(`name:${network.name}`);\n    }\n    if (network.rpcUrl) {\n        data.push(`rpc:${network.rpcUrl}`);\n    }\n    yield sodium.ready;\n    const buffer = Buffer.from(sodium.crypto_generichash(10, data.join('-')));\n    return bs58check.encode(buffer);\n});\n//# sourceMappingURL=get-account-identifier.js.map"]},"metadata":{},"sourceType":"module"}