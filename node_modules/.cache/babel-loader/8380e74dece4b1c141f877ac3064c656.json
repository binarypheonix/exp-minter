{"ast":null,"code":"var _jsxFileName = \"/Users/frankenstein/projects/minter/src/components/common/VisibilityTrigger.tsx\";\nimport React, { useEffect, useRef } from 'react'; // Based on https://github.com/olistic/react-use-visibility#readme MIT License\n\nfunction isElementNearViewport(element, allowedDistanceToViewport = 0) {\n  const {\n    top,\n    right,\n    bottom,\n    left,\n    height,\n    width\n  } = element.getBoundingClientRect();\n  const windowWidth = window.innerWidth;\n  const windowHeight = window.innerHeight;\n  const topCheck = top + height;\n  const leftCheck = left + width;\n  const bottomCheck = bottom - height;\n  const rightCheck = right - width;\n  return topCheck >= -allowedDistanceToViewport && leftCheck >= -allowedDistanceToViewport && bottomCheck <= windowHeight + allowedDistanceToViewport && rightCheck <= windowWidth + allowedDistanceToViewport;\n}\n/** Simple Cross Browser Visibility Trigger */\n\n\nexport const useVisibilityTrigger = (elementRef, onVisible, allowedDistanceToViewport = 0) => {\n  const hasTriggered = useRef(false);\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      if (hasTriggered.current) {\n        return;\n      }\n\n      if (!elementRef.current) {\n        return;\n      }\n\n      if (!isElementNearViewport(elementRef.current, allowedDistanceToViewport)) {\n        return;\n      }\n\n      hasTriggered.current = true;\n      onVisible();\n    }, 100);\n    return () => clearInterval(intervalId);\n  }, [allowedDistanceToViewport, elementRef, onVisible]);\n  return {\n    reset: () => {\n      hasTriggered.current = false;\n    }\n  };\n};\nexport const VisibilityTrigger = ({\n  onVisible,\n  allowedDistanceToViewport\n}) => {\n  const divRef = useRef(null);\n  useVisibilityTrigger(divRef, onVisible, allowedDistanceToViewport !== null && allowedDistanceToViewport !== void 0 ? allowedDistanceToViewport : 0);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: divRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 10\n    }\n  });\n};","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/src/components/common/VisibilityTrigger.tsx"],"names":["React","useEffect","useRef","isElementNearViewport","element","allowedDistanceToViewport","top","right","bottom","left","height","width","getBoundingClientRect","windowWidth","window","innerWidth","windowHeight","innerHeight","topCheck","leftCheck","bottomCheck","rightCheck","useVisibilityTrigger","elementRef","onVisible","hasTriggered","intervalId","setInterval","current","clearInterval","reset","VisibilityTrigger","divRef"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC,C,CAEA;;AACA,SAASC,qBAAT,CACEC,OADF,EAEEC,yBAAyB,GAAG,CAF9B,EAGE;AACA,QAAM;AACJC,IAAAA,GADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,MAHI;AAIJC,IAAAA,IAJI;AAKJC,IAAAA,MALI;AAMJC,IAAAA;AANI,MAOFP,OAAO,CAACQ,qBAAR,EAPJ;AASA,QAAMC,WAAW,GAAGC,MAAM,CAACC,UAA3B;AACA,QAAMC,YAAY,GAAGF,MAAM,CAACG,WAA5B;AAEA,QAAMC,QAAQ,GAAGZ,GAAG,GAAGI,MAAvB;AACA,QAAMS,SAAS,GAAGV,IAAI,GAAGE,KAAzB;AACA,QAAMS,WAAW,GAAGZ,MAAM,GAAGE,MAA7B;AACA,QAAMW,UAAU,GAAGd,KAAK,GAAGI,KAA3B;AAEA,SACEO,QAAQ,IAAI,CAACb,yBAAb,IACAc,SAAS,IAAI,CAACd,yBADd,IAEAe,WAAW,IAAIJ,YAAY,GAAGX,yBAF9B,IAGAgB,UAAU,IAAIR,WAAW,GAAGR,yBAJ9B;AAMD;AAED;;;AACA,OAAO,MAAMiB,oBAAoB,GAAG,CAClCC,UADkC,EAElCC,SAFkC,EAGlCnB,yBAAyB,GAAG,CAHM,KAI/B;AACH,QAAMoB,YAAY,GAAGvB,MAAM,CAAC,KAAD,CAA3B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMyB,UAAU,GAAGC,WAAW,CAAC,MAAM;AACnC,UAAIF,YAAY,CAACG,OAAjB,EAA0B;AACxB;AACD;;AACD,UAAI,CAACL,UAAU,CAACK,OAAhB,EAAyB;AACvB;AACD;;AAED,UACE,CAACzB,qBAAqB,CAACoB,UAAU,CAACK,OAAZ,EAAqBvB,yBAArB,CADxB,EAEE;AACA;AACD;;AAEDoB,MAAAA,YAAY,CAACG,OAAb,GAAuB,IAAvB;AACAJ,MAAAA,SAAS;AACV,KAhB6B,EAgB3B,GAhB2B,CAA9B;AAiBA,WAAO,MAAMK,aAAa,CAACH,UAAD,CAA1B;AACD,GAnBQ,EAmBN,CAACrB,yBAAD,EAA4BkB,UAA5B,EAAwCC,SAAxC,CAnBM,CAAT;AAqBA,SAAO;AACLM,IAAAA,KAAK,EAAE,MAAM;AACXL,MAAAA,YAAY,CAACG,OAAb,GAAuB,KAAvB;AACD;AAHI,GAAP;AAKD,CAjCM;AAmCP,OAAO,MAAMG,iBAAiB,GAAG,CAAC;AAChCP,EAAAA,SADgC;AAEhCnB,EAAAA;AAFgC,CAAD,KAM3B;AACJ,QAAM2B,MAAM,GAAG9B,MAAM,CAAC,IAAD,CAArB;AACAoB,EAAAA,oBAAoB,CAACU,MAAD,EAASR,SAAT,EAAoBnB,yBAApB,aAAoBA,yBAApB,cAAoBA,yBAApB,GAAiD,CAAjD,CAApB;AAEA,sBAAO;AAAK,IAAA,GAAG,EAAE2B,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CAXM","sourcesContent":["import React, { useEffect, useRef } from 'react';\n\n// Based on https://github.com/olistic/react-use-visibility#readme MIT License\nfunction isElementNearViewport(\n  element: HTMLElement,\n  allowedDistanceToViewport = 0\n) {\n  const {\n    top,\n    right,\n    bottom,\n    left,\n    height,\n    width\n  } = element.getBoundingClientRect();\n\n  const windowWidth = window.innerWidth;\n  const windowHeight = window.innerHeight;\n\n  const topCheck = top + height;\n  const leftCheck = left + width;\n  const bottomCheck = bottom - height;\n  const rightCheck = right - width;\n\n  return (\n    topCheck >= -allowedDistanceToViewport &&\n    leftCheck >= -allowedDistanceToViewport &&\n    bottomCheck <= windowHeight + allowedDistanceToViewport &&\n    rightCheck <= windowWidth + allowedDistanceToViewport\n  );\n}\n\n/** Simple Cross Browser Visibility Trigger */\nexport const useVisibilityTrigger = (\n  elementRef: { current: undefined | null | HTMLElement },\n  onVisible: () => void,\n  allowedDistanceToViewport = 0\n) => {\n  const hasTriggered = useRef(false);\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      if (hasTriggered.current) {\n        return;\n      }\n      if (!elementRef.current) {\n        return;\n      }\n\n      if (\n        !isElementNearViewport(elementRef.current, allowedDistanceToViewport)\n      ) {\n        return;\n      }\n\n      hasTriggered.current = true;\n      onVisible();\n    }, 100);\n    return () => clearInterval(intervalId);\n  }, [allowedDistanceToViewport, elementRef, onVisible]);\n\n  return {\n    reset: () => {\n      hasTriggered.current = false;\n    }\n  };\n};\n\nexport const VisibilityTrigger = ({\n  onVisible,\n  allowedDistanceToViewport\n}: {\n  onVisible: () => void;\n  allowedDistanceToViewport?: number;\n}) => {\n  const divRef = useRef(null as null | HTMLDivElement);\n  useVisibilityTrigger(divRef, onVisible, allowedDistanceToViewport ?? 0);\n\n  return <div ref={divRef} />;\n};\n"]},"metadata":{},"sourceType":"module"}