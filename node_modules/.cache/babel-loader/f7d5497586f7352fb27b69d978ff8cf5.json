{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import{useToast}from'@chakra-ui/react';import React,{useEffect}from'react';import{useDispatch,useSelector}from'../../reducer';import{deliverNotification,readNotification}from'../../reducer/slices/notificationsActions';import _ from'lodash';function notificationStatus(notification){switch(notification.status){case'pending':return'info';case'success':return'success';case'error':return'error';default:return'info';}}export default function Notifications(){var toast=useToast();var dispatch=useDispatch();var notifications=useSelector(function(state){return state.notifications.filter(function(_ref){var read=_ref.read,delivered=_ref.delivered;return!read&&!delivered;});},_.isEqual);useEffect(function(){var _iterator=_createForOfIteratorHelper(notifications),_step;try{var _loop=function _loop(){var notification=_step.value;dispatch(deliverNotification(notification.requestId));toast({title:notification.title,description:notification.description,status:notificationStatus(notification),duration:null,isClosable:true,position:'bottom-right',onCloseComplete:function onCloseComplete(){dispatch(readNotification(notification.requestId));}});};for(_iterator.s();!(_step=_iterator.n()).done;){_loop();}}catch(err){_iterator.e(err);}finally{_iterator.f();}},[notifications,dispatch,toast]);return/*#__PURE__*/React.createElement(React.Fragment,null);}","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/src/components/common/Notifications.tsx"],"names":["useToast","React","useEffect","useDispatch","useSelector","deliverNotification","readNotification","_","notificationStatus","notification","status","Notifications","toast","dispatch","notifications","state","filter","read","delivered","isEqual","requestId","title","description","duration","isClosable","position","onCloseComplete"],"mappings":"kLAAA,OAASA,QAAT,KAAyB,kBAAzB,CACA,MAAOC,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,eAAzC,CACA,OACEC,mBADF,CAEEC,gBAFF,KAGO,2CAHP,CAIA,MAAOC,CAAAA,CAAP,KAAc,QAAd,CAGA,QAASC,CAAAA,kBAAT,CAA4BC,YAA5B,CAAwD,CACtD,OAAQA,YAAY,CAACC,MAArB,EACE,IAAK,SAAL,CACE,MAAO,MAAP,CACF,IAAK,SAAL,CACE,MAAO,SAAP,CACF,IAAK,OAAL,CACE,MAAO,OAAP,CACF,QACE,MAAO,MAAP,CARJ,CAUD,CAED,cAAe,SAASC,CAAAA,aAAT,EAAyB,CACtC,GAAMC,CAAAA,KAAK,CAAGZ,QAAQ,EAAtB,CACA,GAAMa,CAAAA,QAAQ,CAAGV,WAAW,EAA5B,CACA,GAAMW,CAAAA,aAAa,CAAGV,WAAW,CAC/B,SAAAW,KAAK,QACHA,CAAAA,KAAK,CAACD,aAAN,CAAoBE,MAApB,CAA2B,kBAAGC,CAAAA,IAAH,MAAGA,IAAH,CAASC,SAAT,MAASA,SAAT,OAAyB,CAACD,IAAD,EAAS,CAACC,SAAnC,EAA3B,CADG,EAD0B,CAG/BX,CAAC,CAACY,OAH6B,CAAjC,CAMAjB,SAAS,CAAC,UAAM,0CACWY,aADX,0CACLL,CAAAA,YADK,aAEZI,QAAQ,CAACR,mBAAmB,CAACI,YAAY,CAACW,SAAd,CAApB,CAAR,CACAR,KAAK,CAAC,CACJS,KAAK,CAAEZ,YAAY,CAACY,KADhB,CAEJC,WAAW,CAAEb,YAAY,CAACa,WAFtB,CAGJZ,MAAM,CAAEF,kBAAkB,CAACC,YAAD,CAHtB,CAIJc,QAAQ,CAAE,IAJN,CAKJC,UAAU,CAAE,IALR,CAMJC,QAAQ,CAAE,cANN,CAOJC,eAPI,2BAOc,CAChBb,QAAQ,CAACP,gBAAgB,CAACG,YAAY,CAACW,SAAd,CAAjB,CAAR,CACD,CATG,CAAD,CAAL,CAHY,EACd,+CAAwC,SAavC,CAda,qDAef,CAfQ,CAeN,CAACN,aAAD,CAAgBD,QAAhB,CAA0BD,KAA1B,CAfM,CAAT,CAiBA,mBAAO,wCAAP,CACD","sourcesContent":["import { useToast } from '@chakra-ui/react';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from '../../reducer';\nimport {\n  deliverNotification,\n  readNotification\n} from '../../reducer/slices/notificationsActions';\nimport _ from 'lodash';\nimport { Notification } from '../../reducer/slices/notifications';\n\nfunction notificationStatus(notification: Notification) {\n  switch (notification.status) {\n    case 'pending':\n      return 'info';\n    case 'success':\n      return 'success';\n    case 'error':\n      return 'error';\n    default:\n      return 'info';\n  }\n}\n\nexport default function Notifications() {\n  const toast = useToast();\n  const dispatch = useDispatch();\n  const notifications = useSelector(\n    state =>\n      state.notifications.filter(({ read, delivered }) => !read && !delivered),\n    _.isEqual\n  );\n\n  useEffect(() => {\n    for (let notification of notifications) {\n      dispatch(deliverNotification(notification.requestId));\n      toast({\n        title: notification.title,\n        description: notification.description,\n        status: notificationStatus(notification),\n        duration: null,\n        isClosable: true,\n        position: 'bottom-right',\n        onCloseComplete() {\n          dispatch(readNotification(notification.requestId));\n        }\n      });\n    }\n  }, [notifications, dispatch, toast]);\n\n  return <></>;\n}\n"]},"metadata":{},"sourceType":"module"}