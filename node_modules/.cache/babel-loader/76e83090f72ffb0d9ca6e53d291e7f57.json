{"ast":null,"code":"import _regeneratorRuntime from \"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Logger } from '../utils/Logger';\nimport { ChromeStorage, LocalStorage } from '..';\nvar logger = new Logger('STORAGE');\n/**\n * Get a supported storage on this platform\n */\n\nexport var getStorage = function getStorage() {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return ChromeStorage.isSupported();\n\n          case 2:\n            if (!_context.sent) {\n              _context.next = 7;\n              break;\n            }\n\n            logger.log('getStorage', 'USING CHROME STORAGE');\n            return _context.abrupt(\"return\", new ChromeStorage());\n\n          case 7:\n            _context.next = 9;\n            return LocalStorage.isSupported();\n\n          case 9:\n            if (!_context.sent) {\n              _context.next = 14;\n              break;\n            }\n\n            logger.log('getStorage', 'USING LOCAL STORAGE');\n            return _context.abrupt(\"return\", new LocalStorage());\n\n          case 14:\n            throw new Error('no storage type supported');\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n};","map":{"version":3,"sources":["../../../src/storage/getStorage.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,MAAT,QAAuB,iBAAvB;AACA,SAAS,aAAT,EAAiC,YAAjC,QAAqD,IAArD;AAEA,IAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,SAAX,CAAf;AAEA;;AAEG;;AACH,OAAO,IAAM,UAAU,GAA2B,SAArC,UAAqC;AAAA,SAA6B,SAAA,CAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,wCAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACzE,mBAAM,aAAa,CAAC,WAAd,EAAN;;AADyE;AAAA;AAAA;AAAA;AAAA;;AAE3E,YAAA,MAAM,CAAC,GAAP,CAAW,YAAX,EAAyB,sBAAzB;AAF2E,6CAIpE,IAAI,aAAJ,EAJoE;;AAAA;AAAA;AAKlE,mBAAM,YAAY,CAAC,WAAb,EAAN;;AALkE;AAAA;AAAA;AAAA;AAAA;;AAM3E,YAAA,MAAM,CAAC,GAAP,CAAW,YAAX,EAAyB,qBAAzB;AAN2E,6CAQpE,IAAI,YAAJ,EARoE;;AAAA;AAAA,kBAUrE,IAAI,KAAJ,CAAU,2BAAV,CAVqE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAA,EAA7B;AAAA,CAA3C","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Logger } from '../utils/Logger';\nimport { ChromeStorage, LocalStorage } from '..';\nconst logger = new Logger('STORAGE');\n/**\n * Get a supported storage on this platform\n */\nexport const getStorage = () => __awaiter(void 0, void 0, void 0, function* () {\n    if (yield ChromeStorage.isSupported()) {\n        logger.log('getStorage', 'USING CHROME STORAGE');\n        return new ChromeStorage();\n    }\n    else if (yield LocalStorage.isSupported()) {\n        logger.log('getStorage', 'USING LOCAL STORAGE');\n        return new LocalStorage();\n    }\n    else {\n        throw new Error('no storage type supported');\n    }\n});\n//# sourceMappingURL=getStorage.js.map"]},"metadata":{},"sourceType":"module"}