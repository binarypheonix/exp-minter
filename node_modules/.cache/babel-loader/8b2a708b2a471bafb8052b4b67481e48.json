{"ast":null,"code":"import{combineReducers,configureStore}from'@reduxjs/toolkit';import{useSelector as baseUseSelector,useDispatch as baseUseDispatch}from'react-redux';import collectionsSlice from'./slices/collections';import createNftSlice from'./slices/createNft';import createNftCsvImportSlice from'./slices/createNftCsvImport';import systemSlice from'./slices/system';import statusSlice from'./slices/status';import notificationsSlice from'./slices/notifications';import marketplaceSlice from'./slices/marketplace';export var reducer=combineReducers({collections:collectionsSlice.reducer,marketplace:marketplaceSlice.reducer,createNft:createNftSlice.reducer,createNftCsvImport:createNftCsvImportSlice.reducer,system:systemSlice.reducer,status:statusSlice.reducer,notifications:notificationsSlice.reducer});export var store=configureStore({reducer:reducer,middleware:function middleware(getDefaultMiddleware){return getDefaultMiddleware({immutableCheck:{ignoredPaths:['system']},serializableCheck:{ignoredPaths:['system'],ignoredActions:['wallet/connect/fulfilled','wallet/reconnect/fulfilled','wallet/disconnect/fulfilled']}});}});export var useDispatch=function useDispatch(){return baseUseDispatch();};export function useSelector(selector,equalityFn){return baseUseSelector(selector,equalityFn);}","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/src/reducer/index.ts"],"names":["combineReducers","configureStore","useSelector","baseUseSelector","useDispatch","baseUseDispatch","collectionsSlice","createNftSlice","createNftCsvImportSlice","systemSlice","statusSlice","notificationsSlice","marketplaceSlice","reducer","collections","marketplace","createNft","createNftCsvImport","system","status","notifications","store","middleware","getDefaultMiddleware","immutableCheck","ignoredPaths","serializableCheck","ignoredActions","selector","equalityFn"],"mappings":"AAAA,OAASA,eAAT,CAA0BC,cAA1B,KAAgD,kBAAhD,CACA,OACEC,WAAW,GAAIC,CAAAA,eADjB,CAEEC,WAAW,GAAIC,CAAAA,eAFjB,KAGO,aAHP,CAIA,MAAOC,CAAAA,gBAAP,KAA6B,sBAA7B,CACA,MAAOC,CAAAA,cAAP,KAA2B,oBAA3B,CACA,MAAOC,CAAAA,uBAAP,KAAoC,6BAApC,CACA,MAAOC,CAAAA,WAAP,KAAwB,iBAAxB,CACA,MAAOC,CAAAA,WAAP,KAAwB,iBAAxB,CACA,MAAOC,CAAAA,kBAAP,KAA+B,wBAA/B,CACA,MAAOC,CAAAA,gBAAP,KAA6B,sBAA7B,CAEA,MAAO,IAAMC,CAAAA,OAAO,CAAGb,eAAe,CAAC,CACrCc,WAAW,CAAER,gBAAgB,CAACO,OADO,CAErCE,WAAW,CAAEH,gBAAgB,CAACC,OAFO,CAGrCG,SAAS,CAAET,cAAc,CAACM,OAHW,CAIrCI,kBAAkB,CAAET,uBAAuB,CAACK,OAJP,CAKrCK,MAAM,CAAET,WAAW,CAACI,OALiB,CAMrCM,MAAM,CAAET,WAAW,CAACG,OANiB,CAOrCO,aAAa,CAAET,kBAAkB,CAACE,OAPG,CAAD,CAA/B,CAUP,MAAO,IAAMQ,CAAAA,KAAK,CAAGpB,cAAc,CAAC,CAClCY,OAAO,CAAPA,OADkC,CAElCS,UAAU,CAAE,oBAAAC,oBAAoB,QAC9BA,CAAAA,oBAAoB,CAAC,CACnBC,cAAc,CAAE,CACdC,YAAY,CAAE,CAAC,QAAD,CADA,CADG,CAInBC,iBAAiB,CAAE,CACjBD,YAAY,CAAE,CAAC,QAAD,CADG,CAEjBE,cAAc,CAAE,CACd,0BADc,CAEd,4BAFc,CAGd,6BAHc,CAFC,CAJA,CAAD,CADU,EAFE,CAAD,CAA5B,CAoBP,MAAO,IAAMvB,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,SAAMC,CAAAA,eAAe,EAArB,EAApB,CAEP,MAAO,SAASH,CAAAA,WAAT,CACL0B,QADK,CAELC,UAFK,CAGL,CACA,MAAO1B,CAAAA,eAAe,CAAiByB,QAAjB,CAA2BC,UAA3B,CAAtB,CACD","sourcesContent":["import { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport {\n  useSelector as baseUseSelector,\n  useDispatch as baseUseDispatch\n} from 'react-redux';\nimport collectionsSlice from './slices/collections';\nimport createNftSlice from './slices/createNft';\nimport createNftCsvImportSlice from './slices/createNftCsvImport';\nimport systemSlice from './slices/system';\nimport statusSlice from './slices/status';\nimport notificationsSlice from './slices/notifications';\nimport marketplaceSlice from './slices/marketplace';\n\nexport const reducer = combineReducers({\n  collections: collectionsSlice.reducer,\n  marketplace: marketplaceSlice.reducer,\n  createNft: createNftSlice.reducer,\n  createNftCsvImport: createNftCsvImportSlice.reducer,\n  system: systemSlice.reducer,\n  status: statusSlice.reducer,\n  notifications: notificationsSlice.reducer\n});\n\nexport const store = configureStore({\n  reducer,\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware({\n      immutableCheck: {\n        ignoredPaths: ['system']\n      },\n      serializableCheck: {\n        ignoredPaths: ['system'],\n        ignoredActions: [\n          'wallet/connect/fulfilled',\n          'wallet/reconnect/fulfilled',\n          'wallet/disconnect/fulfilled'\n        ]\n      }\n    })\n});\n\nexport type State = ReturnType<typeof reducer>;\nexport type Dispatch = typeof store.dispatch;\nexport const useDispatch = () => baseUseDispatch<Dispatch>();\n\nexport function useSelector<TSelect = unknown>(\n  selector: (s: State) => TSelect,\n  equalityFn?: (left: TSelect, right: TSelect) => boolean\n) {\n  return baseUseSelector<State, TSelect>(selector, equalityFn);\n}\n"]},"metadata":{},"sourceType":"module"}