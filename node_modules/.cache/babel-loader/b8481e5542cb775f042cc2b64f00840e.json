{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ordDate = exports.ordNumber = exports.ordString = exports.ordBoolean = exports.ord = exports.getDualOrd = exports.getTupleOrd = exports.between = exports.clamp = exports.max = exports.min = exports.geq = exports.leq = exports.gt = exports.lt = exports.Contravariant = exports.getMonoid = exports.getSemigroup = exports.URI = exports.contramap = exports.reverse = exports.tuple = exports.fromCompare = exports.equalsDefault = void 0;\n\nvar Eq_1 = require(\"./Eq\");\n\nvar function_1 = require(\"./function\"); // -------------------------------------------------------------------------------------\n// defaults\n// -------------------------------------------------------------------------------------\n\n/**\n * @category defaults\n * @since 2.10.0\n */\n\n\nvar equalsDefault = function equalsDefault(compare) {\n  return function (first, second) {\n    return first === second || compare(first, second) === 0;\n  };\n};\n\nexports.equalsDefault = equalsDefault; // -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n\n/**\n * @category constructors\n * @since 2.0.0\n */\n\nvar fromCompare = function fromCompare(_compare) {\n  return {\n    equals: exports.equalsDefault(_compare),\n    compare: function compare(first, second) {\n      return first === second ? 0 : _compare(first, second);\n    }\n  };\n};\n\nexports.fromCompare = fromCompare; // -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n\n/**\n * Given a tuple of `Ord`s returns an `Ord` for the tuple.\n *\n * @example\n * import { tuple } from 'fp-ts/Ord'\n * import * as B from 'fp-ts/boolean'\n * import * as S from 'fp-ts/string'\n * import * as N from 'fp-ts/number'\n *\n * const O = tuple(S.Ord, N.Ord, B.Ord)\n * assert.strictEqual(O.compare(['a', 1, true], ['b', 2, true]), -1)\n * assert.strictEqual(O.compare(['a', 1, true], ['a', 2, true]), -1)\n * assert.strictEqual(O.compare(['a', 1, true], ['a', 1, false]), 1)\n *\n * @category combinators\n * @since 2.10.0\n */\n\nvar tuple = function tuple() {\n  var ords = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    ords[_i] = arguments[_i];\n  }\n\n  return exports.fromCompare(function (first, second) {\n    var i = 0;\n\n    for (; i < ords.length - 1; i++) {\n      var r = ords[i].compare(first[i], second[i]);\n\n      if (r !== 0) {\n        return r;\n      }\n    }\n\n    return ords[i].compare(first[i], second[i]);\n  });\n};\n\nexports.tuple = tuple;\n/**\n * @category combinators\n * @since 2.10.0\n */\n\nvar reverse = function reverse(O) {\n  return exports.fromCompare(function (first, second) {\n    return O.compare(second, first);\n  });\n};\n\nexports.reverse = reverse; // -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\n\n/* istanbul ignore next */\n\nvar contramap_ = function contramap_(fa, f) {\n  return function_1.pipe(fa, exports.contramap(f));\n}; // -------------------------------------------------------------------------------------\n// type class members\n// -------------------------------------------------------------------------------------\n\n/**\n * @category Contravariant\n * @since 2.0.0\n */\n\n\nvar contramap = function contramap(f) {\n  return function (fa) {\n    return exports.fromCompare(function (first, second) {\n      return fa.compare(f(first), f(second));\n    });\n  };\n};\n\nexports.contramap = contramap; // -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n\n/**\n * @category instances\n * @since 2.0.0\n */\n\nexports.URI = 'Ord';\n/**\n * @category instances\n * @since 2.0.0\n */\n\nvar getSemigroup = function getSemigroup() {\n  return {\n    concat: function concat(first, second) {\n      return exports.fromCompare(function (a, b) {\n        var ox = first.compare(a, b);\n        return ox !== 0 ? ox : second.compare(a, b);\n      });\n    }\n  };\n};\n\nexports.getSemigroup = getSemigroup;\n/**\n * Returns a `Monoid` such that:\n *\n * - its `concat(ord1, ord2)` operation will order first by `ord1`, and then by `ord2`\n * - its `empty` value is an `Ord` that always considers compared elements equal\n *\n * @example\n * import { sort } from 'fp-ts/Array'\n * import { contramap, reverse, getMonoid } from 'fp-ts/Ord'\n * import * as S from 'fp-ts/string'\n * import * as B from 'fp-ts/boolean'\n * import { pipe } from 'fp-ts/function'\n * import { concatAll } from 'fp-ts/Monoid'\n * import * as N from 'fp-ts/number'\n *\n * interface User {\n *   readonly id: number\n *   readonly name: string\n *   readonly age: number\n *   readonly rememberMe: boolean\n * }\n *\n * const byName = pipe(\n *   S.Ord,\n *   contramap((p: User) => p.name)\n * )\n *\n * const byAge = pipe(\n *   N.Ord,\n *   contramap((p: User) => p.age)\n * )\n *\n * const byRememberMe = pipe(\n *   B.Ord,\n *   contramap((p: User) => p.rememberMe)\n * )\n *\n * const M = getMonoid<User>()\n *\n * const users: Array<User> = [\n *   { id: 1, name: 'Guido', age: 47, rememberMe: false },\n *   { id: 2, name: 'Guido', age: 46, rememberMe: true },\n *   { id: 3, name: 'Giulio', age: 44, rememberMe: false },\n *   { id: 4, name: 'Giulio', age: 44, rememberMe: true }\n * ]\n *\n * // sort by name, then by age, then by `rememberMe`\n * const O1 = concatAll(M)([byName, byAge, byRememberMe])\n * assert.deepStrictEqual(sort(O1)(users), [\n *   { id: 3, name: 'Giulio', age: 44, rememberMe: false },\n *   { id: 4, name: 'Giulio', age: 44, rememberMe: true },\n *   { id: 2, name: 'Guido', age: 46, rememberMe: true },\n *   { id: 1, name: 'Guido', age: 47, rememberMe: false }\n * ])\n *\n * // now `rememberMe = true` first, then by name, then by age\n * const O2 = concatAll(M)([reverse(byRememberMe), byName, byAge])\n * assert.deepStrictEqual(sort(O2)(users), [\n *   { id: 4, name: 'Giulio', age: 44, rememberMe: true },\n *   { id: 2, name: 'Guido', age: 46, rememberMe: true },\n *   { id: 3, name: 'Giulio', age: 44, rememberMe: false },\n *   { id: 1, name: 'Guido', age: 47, rememberMe: false }\n * ])\n *\n * @category instances\n * @since 2.4.0\n */\n\nvar getMonoid = function getMonoid() {\n  return {\n    concat: exports.getSemigroup().concat,\n    empty: exports.fromCompare(function () {\n      return 0;\n    })\n  };\n};\n\nexports.getMonoid = getMonoid;\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexports.Contravariant = {\n  URI: exports.URI,\n  contramap: contramap_\n}; // -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n// TODO: curry in v3\n\n/**\n * Test whether one value is _strictly less than_ another\n *\n * @since 2.0.0\n */\n\nvar lt = function lt(O) {\n  return function (first, second) {\n    return O.compare(first, second) === -1;\n  };\n};\n\nexports.lt = lt; // TODO: curry in v3\n\n/**\n * Test whether one value is _strictly greater than_ another\n *\n * @since 2.0.0\n */\n\nvar gt = function gt(O) {\n  return function (first, second) {\n    return O.compare(first, second) === 1;\n  };\n};\n\nexports.gt = gt; // TODO: curry in v3\n\n/**\n * Test whether one value is _non-strictly less than_ another\n *\n * @since 2.0.0\n */\n\nvar leq = function leq(O) {\n  return function (first, second) {\n    return O.compare(first, second) !== 1;\n  };\n};\n\nexports.leq = leq; // TODO: curry in v3\n\n/**\n * Test whether one value is _non-strictly greater than_ another\n *\n * @since 2.0.0\n */\n\nvar geq = function geq(O) {\n  return function (first, second) {\n    return O.compare(first, second) !== -1;\n  };\n};\n\nexports.geq = geq; // TODO: curry in v3\n\n/**\n * Take the minimum of two values. If they are considered equal, the first argument is chosen\n *\n * @since 2.0.0\n */\n\nvar min = function min(O) {\n  return function (first, second) {\n    return first === second || O.compare(first, second) < 1 ? first : second;\n  };\n};\n\nexports.min = min; // TODO: curry in v3\n\n/**\n * Take the maximum of two values. If they are considered equal, the first argument is chosen\n *\n * @since 2.0.0\n */\n\nvar max = function max(O) {\n  return function (first, second) {\n    return first === second || O.compare(first, second) > -1 ? first : second;\n  };\n};\n\nexports.max = max;\n/**\n * Clamp a value between a minimum and a maximum\n *\n * @since 2.0.0\n */\n\nvar clamp = function clamp(O) {\n  var minO = exports.min(O);\n  var maxO = exports.max(O);\n  return function (low, hi) {\n    return function (a) {\n      return maxO(minO(a, hi), low);\n    };\n  };\n};\n\nexports.clamp = clamp;\n/**\n * Test whether a value is between a minimum and a maximum (inclusive)\n *\n * @since 2.0.0\n */\n\nvar between = function between(O) {\n  var ltO = exports.lt(O);\n  var gtO = exports.gt(O);\n  return function (low, hi) {\n    return function (a) {\n      return ltO(a, low) || gtO(a, hi) ? false : true;\n    };\n  };\n};\n\nexports.between = between; // -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n\n/**\n * Use [`tuple`](#tuple) instead.\n *\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\n\nexports.getTupleOrd = exports.tuple;\n/**\n * Use [`reverse`](#reverse) instead.\n *\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\n\nexports.getDualOrd = exports.reverse;\n/**\n * Use [`Contravariant`](#contravariant) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexports.ord = exports.Contravariant; // default compare for primitive types\n\nfunction compare(first, second) {\n  return first < second ? -1 : first > second ? 1 : 0;\n}\n\nvar strictOrd = {\n  equals: Eq_1.eqStrict.equals,\n  compare: compare\n};\n/**\n * Use [`Ord`](./boolean.ts.html#Ord) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexports.ordBoolean = strictOrd;\n/**\n * Use [`Ord`](./string.ts.html#Ord) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexports.ordString = strictOrd;\n/**\n * Use [`Ord`](./number.ts.html#Ord) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexports.ordNumber = strictOrd;\n/**\n * Use [`Ord`](./Date.ts.html#Ord) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexports.ordDate = /*#__PURE__*/function_1.pipe( // tslint:disable-next-line: deprecation\nexports.ordNumber, /*#__PURE__*/exports.contramap(function (date) {\n  return date.valueOf();\n}));","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/node_modules/fp-ts/lib/Ord.js"],"names":["Object","defineProperty","exports","value","ordDate","ordNumber","ordString","ordBoolean","ord","getDualOrd","getTupleOrd","between","clamp","max","min","geq","leq","gt","lt","Contravariant","getMonoid","getSemigroup","URI","contramap","reverse","tuple","fromCompare","equalsDefault","Eq_1","require","function_1","compare","first","second","equals","ords","_i","arguments","length","i","r","O","contramap_","fa","f","pipe","concat","a","b","ox","empty","minO","maxO","low","hi","ltO","gtO","strictOrd","eqStrict","date","valueOf"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ordDate = exports.ordNumber = exports.ordString = exports.ordBoolean = exports.ord = exports.getDualOrd = exports.getTupleOrd = exports.between = exports.clamp = exports.max = exports.min = exports.geq = exports.leq = exports.gt = exports.lt = exports.Contravariant = exports.getMonoid = exports.getSemigroup = exports.URI = exports.contramap = exports.reverse = exports.tuple = exports.fromCompare = exports.equalsDefault = void 0;\nvar Eq_1 = require(\"./Eq\");\nvar function_1 = require(\"./function\");\n// -------------------------------------------------------------------------------------\n// defaults\n// -------------------------------------------------------------------------------------\n/**\n * @category defaults\n * @since 2.10.0\n */\nvar equalsDefault = function (compare) { return function (first, second) {\n    return first === second || compare(first, second) === 0;\n}; };\nexports.equalsDefault = equalsDefault;\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * @category constructors\n * @since 2.0.0\n */\nvar fromCompare = function (compare) { return ({\n    equals: exports.equalsDefault(compare),\n    compare: function (first, second) { return (first === second ? 0 : compare(first, second)); }\n}); };\nexports.fromCompare = fromCompare;\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * Given a tuple of `Ord`s returns an `Ord` for the tuple.\n *\n * @example\n * import { tuple } from 'fp-ts/Ord'\n * import * as B from 'fp-ts/boolean'\n * import * as S from 'fp-ts/string'\n * import * as N from 'fp-ts/number'\n *\n * const O = tuple(S.Ord, N.Ord, B.Ord)\n * assert.strictEqual(O.compare(['a', 1, true], ['b', 2, true]), -1)\n * assert.strictEqual(O.compare(['a', 1, true], ['a', 2, true]), -1)\n * assert.strictEqual(O.compare(['a', 1, true], ['a', 1, false]), 1)\n *\n * @category combinators\n * @since 2.10.0\n */\nvar tuple = function () {\n    var ords = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        ords[_i] = arguments[_i];\n    }\n    return exports.fromCompare(function (first, second) {\n        var i = 0;\n        for (; i < ords.length - 1; i++) {\n            var r = ords[i].compare(first[i], second[i]);\n            if (r !== 0) {\n                return r;\n            }\n        }\n        return ords[i].compare(first[i], second[i]);\n    });\n};\nexports.tuple = tuple;\n/**\n * @category combinators\n * @since 2.10.0\n */\nvar reverse = function (O) { return exports.fromCompare(function (first, second) { return O.compare(second, first); }); };\nexports.reverse = reverse;\n// -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\n/* istanbul ignore next */\nvar contramap_ = function (fa, f) { return function_1.pipe(fa, exports.contramap(f)); };\n// -------------------------------------------------------------------------------------\n// type class members\n// -------------------------------------------------------------------------------------\n/**\n * @category Contravariant\n * @since 2.0.0\n */\nvar contramap = function (f) { return function (fa) {\n    return exports.fromCompare(function (first, second) { return fa.compare(f(first), f(second)); });\n}; };\nexports.contramap = contramap;\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.0.0\n */\nexports.URI = 'Ord';\n/**\n * @category instances\n * @since 2.0.0\n */\nvar getSemigroup = function () { return ({\n    concat: function (first, second) {\n        return exports.fromCompare(function (a, b) {\n            var ox = first.compare(a, b);\n            return ox !== 0 ? ox : second.compare(a, b);\n        });\n    }\n}); };\nexports.getSemigroup = getSemigroup;\n/**\n * Returns a `Monoid` such that:\n *\n * - its `concat(ord1, ord2)` operation will order first by `ord1`, and then by `ord2`\n * - its `empty` value is an `Ord` that always considers compared elements equal\n *\n * @example\n * import { sort } from 'fp-ts/Array'\n * import { contramap, reverse, getMonoid } from 'fp-ts/Ord'\n * import * as S from 'fp-ts/string'\n * import * as B from 'fp-ts/boolean'\n * import { pipe } from 'fp-ts/function'\n * import { concatAll } from 'fp-ts/Monoid'\n * import * as N from 'fp-ts/number'\n *\n * interface User {\n *   readonly id: number\n *   readonly name: string\n *   readonly age: number\n *   readonly rememberMe: boolean\n * }\n *\n * const byName = pipe(\n *   S.Ord,\n *   contramap((p: User) => p.name)\n * )\n *\n * const byAge = pipe(\n *   N.Ord,\n *   contramap((p: User) => p.age)\n * )\n *\n * const byRememberMe = pipe(\n *   B.Ord,\n *   contramap((p: User) => p.rememberMe)\n * )\n *\n * const M = getMonoid<User>()\n *\n * const users: Array<User> = [\n *   { id: 1, name: 'Guido', age: 47, rememberMe: false },\n *   { id: 2, name: 'Guido', age: 46, rememberMe: true },\n *   { id: 3, name: 'Giulio', age: 44, rememberMe: false },\n *   { id: 4, name: 'Giulio', age: 44, rememberMe: true }\n * ]\n *\n * // sort by name, then by age, then by `rememberMe`\n * const O1 = concatAll(M)([byName, byAge, byRememberMe])\n * assert.deepStrictEqual(sort(O1)(users), [\n *   { id: 3, name: 'Giulio', age: 44, rememberMe: false },\n *   { id: 4, name: 'Giulio', age: 44, rememberMe: true },\n *   { id: 2, name: 'Guido', age: 46, rememberMe: true },\n *   { id: 1, name: 'Guido', age: 47, rememberMe: false }\n * ])\n *\n * // now `rememberMe = true` first, then by name, then by age\n * const O2 = concatAll(M)([reverse(byRememberMe), byName, byAge])\n * assert.deepStrictEqual(sort(O2)(users), [\n *   { id: 4, name: 'Giulio', age: 44, rememberMe: true },\n *   { id: 2, name: 'Guido', age: 46, rememberMe: true },\n *   { id: 3, name: 'Giulio', age: 44, rememberMe: false },\n *   { id: 1, name: 'Guido', age: 47, rememberMe: false }\n * ])\n *\n * @category instances\n * @since 2.4.0\n */\nvar getMonoid = function () { return ({\n    concat: exports.getSemigroup().concat,\n    empty: exports.fromCompare(function () { return 0; })\n}); };\nexports.getMonoid = getMonoid;\n/**\n * @category instances\n * @since 2.7.0\n */\nexports.Contravariant = {\n    URI: exports.URI,\n    contramap: contramap_\n};\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n// TODO: curry in v3\n/**\n * Test whether one value is _strictly less than_ another\n *\n * @since 2.0.0\n */\nvar lt = function (O) { return function (first, second) { return O.compare(first, second) === -1; }; };\nexports.lt = lt;\n// TODO: curry in v3\n/**\n * Test whether one value is _strictly greater than_ another\n *\n * @since 2.0.0\n */\nvar gt = function (O) { return function (first, second) { return O.compare(first, second) === 1; }; };\nexports.gt = gt;\n// TODO: curry in v3\n/**\n * Test whether one value is _non-strictly less than_ another\n *\n * @since 2.0.0\n */\nvar leq = function (O) { return function (first, second) { return O.compare(first, second) !== 1; }; };\nexports.leq = leq;\n// TODO: curry in v3\n/**\n * Test whether one value is _non-strictly greater than_ another\n *\n * @since 2.0.0\n */\nvar geq = function (O) { return function (first, second) { return O.compare(first, second) !== -1; }; };\nexports.geq = geq;\n// TODO: curry in v3\n/**\n * Take the minimum of two values. If they are considered equal, the first argument is chosen\n *\n * @since 2.0.0\n */\nvar min = function (O) { return function (first, second) {\n    return first === second || O.compare(first, second) < 1 ? first : second;\n}; };\nexports.min = min;\n// TODO: curry in v3\n/**\n * Take the maximum of two values. If they are considered equal, the first argument is chosen\n *\n * @since 2.0.0\n */\nvar max = function (O) { return function (first, second) {\n    return first === second || O.compare(first, second) > -1 ? first : second;\n}; };\nexports.max = max;\n/**\n * Clamp a value between a minimum and a maximum\n *\n * @since 2.0.0\n */\nvar clamp = function (O) {\n    var minO = exports.min(O);\n    var maxO = exports.max(O);\n    return function (low, hi) { return function (a) { return maxO(minO(a, hi), low); }; };\n};\nexports.clamp = clamp;\n/**\n * Test whether a value is between a minimum and a maximum (inclusive)\n *\n * @since 2.0.0\n */\nvar between = function (O) {\n    var ltO = exports.lt(O);\n    var gtO = exports.gt(O);\n    return function (low, hi) { return function (a) { return (ltO(a, low) || gtO(a, hi) ? false : true); }; };\n};\nexports.between = between;\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use [`tuple`](#tuple) instead.\n *\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\nexports.getTupleOrd = exports.tuple;\n/**\n * Use [`reverse`](#reverse) instead.\n *\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\nexports.getDualOrd = exports.reverse;\n/**\n * Use [`Contravariant`](#contravariant) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexports.ord = exports.Contravariant;\n// default compare for primitive types\nfunction compare(first, second) {\n    return first < second ? -1 : first > second ? 1 : 0;\n}\nvar strictOrd = {\n    equals: Eq_1.eqStrict.equals,\n    compare: compare\n};\n/**\n * Use [`Ord`](./boolean.ts.html#Ord) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexports.ordBoolean = strictOrd;\n/**\n * Use [`Ord`](./string.ts.html#Ord) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexports.ordString = strictOrd;\n/**\n * Use [`Ord`](./number.ts.html#Ord) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexports.ordNumber = strictOrd;\n/**\n * Use [`Ord`](./Date.ts.html#Ord) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexports.ordDate = \n/*#__PURE__*/\nfunction_1.pipe(\n// tslint:disable-next-line: deprecation\nexports.ordNumber, \n/*#__PURE__*/\nexports.contramap(function (date) { return date.valueOf(); }));\n"]},"metadata":{},"sourceType":"script"}