{"ast":null,"code":"import { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport { useSelector as baseUseSelector, useDispatch as baseUseDispatch } from 'react-redux';\nimport collectionsSlice from './slices/collections';\nimport createNftSlice from './slices/createNft';\nimport createNftCsvImportSlice from './slices/createNftCsvImport';\nimport systemSlice from './slices/system';\nimport statusSlice from './slices/status';\nimport notificationsSlice from './slices/notifications';\nimport marketplaceSlice from './slices/marketplace';\nexport const reducer = combineReducers({\n  collections: collectionsSlice.reducer,\n  marketplace: marketplaceSlice.reducer,\n  createNft: createNftSlice.reducer,\n  createNftCsvImport: createNftCsvImportSlice.reducer,\n  system: systemSlice.reducer,\n  status: statusSlice.reducer,\n  notifications: notificationsSlice.reducer\n});\nexport const store = configureStore({\n  reducer,\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    immutableCheck: {\n      ignoredPaths: ['system']\n    },\n    serializableCheck: {\n      ignoredPaths: ['system'],\n      ignoredActions: ['wallet/connect/fulfilled', 'wallet/reconnect/fulfilled', 'wallet/disconnect/fulfilled']\n    }\n  })\n});\nexport const useDispatch = () => baseUseDispatch();\nexport function useSelector(selector, equalityFn) {\n  return baseUseSelector(selector, equalityFn);\n}","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/src/reducer/index.ts"],"names":["combineReducers","configureStore","useSelector","baseUseSelector","useDispatch","baseUseDispatch","collectionsSlice","createNftSlice","createNftCsvImportSlice","systemSlice","statusSlice","notificationsSlice","marketplaceSlice","reducer","collections","marketplace","createNft","createNftCsvImport","system","status","notifications","store","middleware","getDefaultMiddleware","immutableCheck","ignoredPaths","serializableCheck","ignoredActions","selector","equalityFn"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,cAA1B,QAAgD,kBAAhD;AACA,SACEC,WAAW,IAAIC,eADjB,EAEEC,WAAW,IAAIC,eAFjB,QAGO,aAHP;AAIA,OAAOC,gBAAP,MAA6B,sBAA7B;AACA,OAAOC,cAAP,MAA2B,oBAA3B;AACA,OAAOC,uBAAP,MAAoC,6BAApC;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,kBAAP,MAA+B,wBAA/B;AACA,OAAOC,gBAAP,MAA6B,sBAA7B;AAEA,OAAO,MAAMC,OAAO,GAAGb,eAAe,CAAC;AACrCc,EAAAA,WAAW,EAAER,gBAAgB,CAACO,OADO;AAErCE,EAAAA,WAAW,EAAEH,gBAAgB,CAACC,OAFO;AAGrCG,EAAAA,SAAS,EAAET,cAAc,CAACM,OAHW;AAIrCI,EAAAA,kBAAkB,EAAET,uBAAuB,CAACK,OAJP;AAKrCK,EAAAA,MAAM,EAAET,WAAW,CAACI,OALiB;AAMrCM,EAAAA,MAAM,EAAET,WAAW,CAACG,OANiB;AAOrCO,EAAAA,aAAa,EAAET,kBAAkB,CAACE;AAPG,CAAD,CAA/B;AAUP,OAAO,MAAMQ,KAAK,GAAGpB,cAAc,CAAC;AAClCY,EAAAA,OADkC;AAElCS,EAAAA,UAAU,EAAEC,oBAAoB,IAC9BA,oBAAoB,CAAC;AACnBC,IAAAA,cAAc,EAAE;AACdC,MAAAA,YAAY,EAAE,CAAC,QAAD;AADA,KADG;AAInBC,IAAAA,iBAAiB,EAAE;AACjBD,MAAAA,YAAY,EAAE,CAAC,QAAD,CADG;AAEjBE,MAAAA,cAAc,EAAE,CACd,0BADc,EAEd,4BAFc,EAGd,6BAHc;AAFC;AAJA,GAAD;AAHY,CAAD,CAA5B;AAoBP,OAAO,MAAMvB,WAAW,GAAG,MAAMC,eAAe,EAAzC;AAEP,OAAO,SAASH,WAAT,CACL0B,QADK,EAELC,UAFK,EAGL;AACA,SAAO1B,eAAe,CAAiByB,QAAjB,EAA2BC,UAA3B,CAAtB;AACD","sourcesContent":["import { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport {\n  useSelector as baseUseSelector,\n  useDispatch as baseUseDispatch\n} from 'react-redux';\nimport collectionsSlice from './slices/collections';\nimport createNftSlice from './slices/createNft';\nimport createNftCsvImportSlice from './slices/createNftCsvImport';\nimport systemSlice from './slices/system';\nimport statusSlice from './slices/status';\nimport notificationsSlice from './slices/notifications';\nimport marketplaceSlice from './slices/marketplace';\n\nexport const reducer = combineReducers({\n  collections: collectionsSlice.reducer,\n  marketplace: marketplaceSlice.reducer,\n  createNft: createNftSlice.reducer,\n  createNftCsvImport: createNftCsvImportSlice.reducer,\n  system: systemSlice.reducer,\n  status: statusSlice.reducer,\n  notifications: notificationsSlice.reducer\n});\n\nexport const store = configureStore({\n  reducer,\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware({\n      immutableCheck: {\n        ignoredPaths: ['system']\n      },\n      serializableCheck: {\n        ignoredPaths: ['system'],\n        ignoredActions: [\n          'wallet/connect/fulfilled',\n          'wallet/reconnect/fulfilled',\n          'wallet/disconnect/fulfilled'\n        ]\n      }\n    })\n});\n\nexport type State = ReturnType<typeof reducer>;\nexport type Dispatch = typeof store.dispatch;\nexport const useDispatch = () => baseUseDispatch<Dispatch>();\n\nexport function useSelector<TSelect = unknown>(\n  selector: (s: State) => TSelect,\n  equalityFn?: (left: TSelect, right: TSelect) => boolean\n) {\n  return baseUseSelector<State, TSelect>(selector, equalityFn);\n}\n"]},"metadata":{},"sourceType":"module"}