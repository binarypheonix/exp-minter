{"ast":null,"code":"import _toConsumableArray from \"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport * as sodium from 'libsodium-wrappers';\nimport { toHex, getHexHash, sealCryptobox } from '../../utils/crypto';\n/**\n * @internalapi\n *\n *\n */\n\nexport var CommunicationClient = /*#__PURE__*/function () {\n  function CommunicationClient(keyPair) {\n    _classCallCheck(this, CommunicationClient);\n\n    this.keyPair = keyPair;\n  }\n  /**\n   * Get the public key\n   */\n\n\n  _createClass(CommunicationClient, [{\n    key: \"getPublicKey\",\n    value: function getPublicKey() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", toHex(this.keyPair.publicKey));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * get the public key hash\n     */\n\n  }, {\n    key: \"getPublicKeyHash\",\n    value: function getPublicKeyHash() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", getHexHash(this.keyPair.publicKey));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n    /**\n     * Create a cryptobox shared key\n     *\n     * @param otherPublicKey\n     * @param selfPrivateKey\n     */\n\n  }, {\n    key: \"createCryptoBox\",\n    value: function createCryptoBox(otherPublicKey, selfPrivateKey) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var kxSelfPrivateKey, kxSelfPublicKey, kxOtherPublicKey;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                // TODO: Don't calculate it every time?\n                kxSelfPrivateKey = sodium.crypto_sign_ed25519_sk_to_curve25519(Buffer.from(selfPrivateKey)); // Secret bytes to scalar bytes\n\n                kxSelfPublicKey = sodium.crypto_sign_ed25519_pk_to_curve25519(Buffer.from(selfPrivateKey).slice(32, 64)); // Secret bytes to scalar bytes\n\n                kxOtherPublicKey = sodium.crypto_sign_ed25519_pk_to_curve25519(Buffer.from(otherPublicKey, 'hex')); // Secret bytes to scalar bytes\n\n                return _context3.abrupt(\"return\", [Buffer.from(kxSelfPublicKey), Buffer.from(kxSelfPrivateKey), Buffer.from(kxOtherPublicKey)]);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n    }\n    /**\n     * Create a cryptobox server\n     *\n     * @param otherPublicKey\n     * @param selfPrivateKey\n     */\n\n  }, {\n    key: \"createCryptoBoxServer\",\n    value: function createCryptoBoxServer(otherPublicKey, selfPrivateKey) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var keys;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.createCryptoBox(otherPublicKey, selfPrivateKey);\n\n              case 2:\n                keys = _context4.sent;\n                return _context4.abrupt(\"return\", sodium.crypto_kx_server_session_keys.apply(sodium, _toConsumableArray(keys)));\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n    /**\n     * Create a cryptobox client\n     *\n     * @param otherPublicKey\n     * @param selfPrivateKey\n     */\n\n  }, {\n    key: \"createCryptoBoxClient\",\n    value: function createCryptoBoxClient(otherPublicKey, selfPrivateKey) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var keys;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.createCryptoBox(otherPublicKey, selfPrivateKey);\n\n              case 2:\n                keys = _context5.sent;\n                return _context5.abrupt(\"return\", sodium.crypto_kx_client_session_keys.apply(sodium, _toConsumableArray(keys)));\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n    /**\n     * Encrypt a message for a specific publicKey (receiver, asymmetric)\n     *\n     * @param recipientPublicKey\n     * @param message\n     */\n\n  }, {\n    key: \"encryptMessageAsymmetric\",\n    value: function encryptMessageAsymmetric(recipientPublicKey, message) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.abrupt(\"return\", sealCryptobox(message, Buffer.from(recipientPublicKey, 'hex')));\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n    }\n  }]);\n\n  return CommunicationClient;\n}();","map":{"version":3,"sources":["../../../../src/transports/clients/CommunicationClient.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAK,MAAZ,MAAwB,oBAAxB;AAKA,SAAS,KAAT,EAAgB,UAAhB,EAA4B,aAA5B,QAAiD,oBAAjD;AAEA;;;;AAIG;;AACH,WAAsB,mBAAtB;AACE,+BAA+B,OAA/B,EAAsD;AAAA;;AAAvB,SAAA,OAAA,GAAA,OAAA;AAA2B;AAE1D;;AAEG;;;AALL;AAAA;AAAA,WAMe,wBAAY;;;;;;iDAChB,KAAK,CAAC,KAAK,OAAL,CAAa,SAAd,C;;;;;;;;;AACb;AAED;;AAEG;;AAZL;AAAA;AAAA,WAae,4BAAgB;;;;;;kDACpB,UAAU,CAAC,KAAK,OAAL,CAAa,SAAd,C;;;;;;;;;AAClB;AAED;;;;;AAKG;;AAtBL;AAAA;AAAA,WAuBkB,yBACd,cADc,EAEd,cAFc,EAEY;;;;;;;AAE1B;AACM,gBAAA,gB,GAAmB,MAAM,CAAC,oCAAP,CACvB,MAAM,CAAC,IAAP,CAAY,cAAZ,CADuB,C,EAEvB;;AACI,gBAAA,e,GAAkB,MAAM,CAAC,oCAAP,CACtB,MAAM,CAAC,IAAP,CAAY,cAAZ,EAA4B,KAA5B,CAAkC,EAAlC,EAAsC,EAAtC,CADsB,C,EAEtB;;AACI,gBAAA,gB,GAAmB,MAAM,CAAC,oCAAP,CACvB,MAAM,CAAC,IAAP,CAAY,cAAZ,EAA4B,KAA5B,CADuB,C,EAEvB;;kDAEK,CACL,MAAM,CAAC,IAAP,CAAY,eAAZ,CADK,EAEL,MAAM,CAAC,IAAP,CAAY,gBAAZ,CAFK,EAGL,MAAM,CAAC,IAAP,CAAY,gBAAZ,CAHK,C;;;;;;;;;AAKR;AAED;;;;;AAKG;;AAlDL;AAAA;AAAA,WAmDkB,+BACd,cADc,EAEd,cAFc,EAEY;;;;;;;;AAEb,uBAAM,KAAK,eAAL,CAAqB,cAArB,EAAqC,cAArC,CAAN;;;AAAP,gBAAA,I;kDAEC,MAAM,CAAC,6BAAP,OAAA,MAAM,qBAAkC,IAAlC,E;;;;;;;;;AACd;AAED;;;;;AAKG;;AAjEL;AAAA;AAAA,WAkEkB,+BACd,cADc,EAEd,cAFc,EAEY;;;;;;;;AAEb,uBAAM,KAAK,eAAL,CAAqB,cAArB,EAAqC,cAArC,CAAN;;;AAAP,gBAAA,I;kDAEC,MAAM,CAAC,6BAAP,OAAA,MAAM,qBAAkC,IAAlC,E;;;;;;;;;AACd;AAED;;;;;AAKG;;AAhFL;AAAA;AAAA,WAiFkB,kCACd,kBADc,EAEd,OAFc,EAEC;;;;;;kDAER,aAAa,CAAC,OAAD,EAAU,MAAM,CAAC,IAAP,CAAY,kBAAZ,EAAgC,KAAhC,CAAV,C;;;;;;;;;AACrB;AAtFH;;AAAA;AAAA","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as sodium from 'libsodium-wrappers';\nimport { toHex, getHexHash, sealCryptobox } from '../../utils/crypto';\n/**\n * @internalapi\n *\n *\n */\nexport class CommunicationClient {\n    constructor(keyPair) {\n        this.keyPair = keyPair;\n    }\n    /**\n     * Get the public key\n     */\n    getPublicKey() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return toHex(this.keyPair.publicKey);\n        });\n    }\n    /**\n     * get the public key hash\n     */\n    getPublicKeyHash() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return getHexHash(this.keyPair.publicKey);\n        });\n    }\n    /**\n     * Create a cryptobox shared key\n     *\n     * @param otherPublicKey\n     * @param selfPrivateKey\n     */\n    createCryptoBox(otherPublicKey, selfPrivateKey) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // TODO: Don't calculate it every time?\n            const kxSelfPrivateKey = sodium.crypto_sign_ed25519_sk_to_curve25519(Buffer.from(selfPrivateKey)); // Secret bytes to scalar bytes\n            const kxSelfPublicKey = sodium.crypto_sign_ed25519_pk_to_curve25519(Buffer.from(selfPrivateKey).slice(32, 64)); // Secret bytes to scalar bytes\n            const kxOtherPublicKey = sodium.crypto_sign_ed25519_pk_to_curve25519(Buffer.from(otherPublicKey, 'hex')); // Secret bytes to scalar bytes\n            return [\n                Buffer.from(kxSelfPublicKey),\n                Buffer.from(kxSelfPrivateKey),\n                Buffer.from(kxOtherPublicKey)\n            ];\n        });\n    }\n    /**\n     * Create a cryptobox server\n     *\n     * @param otherPublicKey\n     * @param selfPrivateKey\n     */\n    createCryptoBoxServer(otherPublicKey, selfPrivateKey) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const keys = yield this.createCryptoBox(otherPublicKey, selfPrivateKey);\n            return sodium.crypto_kx_server_session_keys(...keys);\n        });\n    }\n    /**\n     * Create a cryptobox client\n     *\n     * @param otherPublicKey\n     * @param selfPrivateKey\n     */\n    createCryptoBoxClient(otherPublicKey, selfPrivateKey) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const keys = yield this.createCryptoBox(otherPublicKey, selfPrivateKey);\n            return sodium.crypto_kx_client_session_keys(...keys);\n        });\n    }\n    /**\n     * Encrypt a message for a specific publicKey (receiver, asymmetric)\n     *\n     * @param recipientPublicKey\n     * @param message\n     */\n    encryptMessageAsymmetric(recipientPublicKey, message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return sealCryptobox(message, Buffer.from(recipientPublicKey, 'hex'));\n        });\n    }\n}\n//# sourceMappingURL=CommunicationClient.js.map"]},"metadata":{},"sourceType":"module"}