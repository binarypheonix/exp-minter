{"ast":null,"code":"import _objectSpread from\"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _createForOfIteratorHelper from\"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import{createSlice}from'@reduxjs/toolkit';import{getAssetContractsQuery,getContractNftsQuery,getNftAssetContractQuery,getWalletAssetContractsQuery}from'../async/queries';import config from'../../config.json';//// State\n// Types\n// Data\nexport var initialState={selectedCollection:null,globalCollection:config.contracts.nftFaucet,collections:{}};//// Reducers & Slice\nvar populateCollectionR=function populateCollectionR(state,_ref){var payload=_ref.payload;if(state.collections[payload.address]){state.collections[payload.address].tokens=payload.tokens;state.collections[payload.address].loaded=true;}};var updateCollectionsR=function updateCollectionsR(state,action){var _iterator=_createForOfIteratorHelper(action.payload),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var coll=_step.value;state.collections[coll.address]=_objectSpread(_objectSpread({},coll),{},{tokens:null,loaded:false});}}catch(err){_iterator.e(err);}finally{_iterator.f();}};var updateCollectionR=function updateCollectionR(state,_ref2){var payload=_ref2.payload;if(!state.collections[payload.address]){state.collections[payload.address]=_objectSpread(_objectSpread({},payload),{},{tokens:null,loaded:false});}};var selectCollectionR=function selectCollectionR(state,action){state.selectedCollection=action.payload;};var slice=createSlice({name:'collections',initialState:initialState,reducers:{updateCollections:updateCollectionsR,updateCollection:updateCollectionR,selectCollection:selectCollectionR,populateCollection:populateCollectionR},extraReducers:function extraReducers(_ref3){var addCase=_ref3.addCase;addCase(getContractNftsQuery.fulfilled,populateCollectionR);addCase(getNftAssetContractQuery.fulfilled,updateCollectionR);addCase(getWalletAssetContractsQuery.fulfilled,updateCollectionsR);addCase(getAssetContractsQuery.fulfilled,updateCollectionsR);}});var _slice$actions=slice.actions,updateCollections=_slice$actions.updateCollections,updateCollection=_slice$actions.updateCollection,selectCollection=_slice$actions.selectCollection,populateCollection=_slice$actions.populateCollection;export{updateCollections,updateCollection,selectCollection,populateCollection};export default slice;","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/src/reducer/slices/collections.ts"],"names":["createSlice","getAssetContractsQuery","getContractNftsQuery","getNftAssetContractQuery","getWalletAssetContractsQuery","config","initialState","selectedCollection","globalCollection","contracts","nftFaucet","collections","populateCollectionR","state","payload","address","tokens","loaded","updateCollectionsR","action","coll","updateCollectionR","selectCollectionR","slice","name","reducers","updateCollections","updateCollection","selectCollection","populateCollection","extraReducers","addCase","fulfilled","actions"],"mappings":"2UAAA,OAASA,WAAT,KAAwD,kBAAxD,CACA,OACEC,sBADF,CAEEC,oBAFF,CAGEC,wBAHF,CAIEC,4BAJF,KAKO,kBALP,CAOA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CAEA;AAEA;AAiBA;AAEA,MAAO,IAAMC,CAAAA,YAA8B,CAAG,CAC5CC,kBAAkB,CAAE,IADwB,CAE5CC,gBAAgB,CAAEH,MAAM,CAACI,SAAP,CAAiBC,SAFS,CAG5CC,WAAW,CAAE,EAH+B,CAAvC,CAMP;AAIA,GAAMC,CAAAA,mBAAuC,CAAG,QAA1CA,CAAAA,mBAA0C,CAACC,KAAD,MAAwB,IAAdC,CAAAA,OAAc,MAAdA,OAAc,CACtE,GAAID,KAAK,CAACF,WAAN,CAAkBG,OAAO,CAACC,OAA1B,CAAJ,CAAwC,CACtCF,KAAK,CAACF,WAAN,CAAkBG,OAAO,CAACC,OAA1B,EAAmCC,MAAnC,CAA4CF,OAAO,CAACE,MAApD,CACAH,KAAK,CAACF,WAAN,CAAkBG,OAAO,CAACC,OAA1B,EAAmCE,MAAnC,CAA4C,IAA5C,CACD,CACF,CALD,CAOA,GAAMC,CAAAA,kBAA4C,CAAG,QAA/CA,CAAAA,kBAA+C,CAACL,KAAD,CAAQM,MAAR,CAAmB,0CACrDA,MAAM,CAACL,OAD8C,YACtE,+CAAiC,IAAxBM,CAAAA,IAAwB,aAC/BP,KAAK,CAACF,WAAN,CAAkBS,IAAI,CAACL,OAAvB,iCACKK,IADL,MAEEJ,MAAM,CAAE,IAFV,CAGEC,MAAM,CAAE,KAHV,GAKD,CAPqE,qDAQvE,CARD,CAUA,GAAMI,CAAAA,iBAAyC,CAAG,QAA5CA,CAAAA,iBAA4C,CAACR,KAAD,OAAwB,IAAdC,CAAAA,OAAc,OAAdA,OAAc,CACxE,GAAI,CAACD,KAAK,CAACF,WAAN,CAAkBG,OAAO,CAACC,OAA1B,CAAL,CAAyC,CACvCF,KAAK,CAACF,WAAN,CAAkBG,OAAO,CAACC,OAA1B,iCACKD,OADL,MAEEE,MAAM,CAAE,IAFV,CAGEC,MAAM,CAAE,KAHV,GAKD,CACF,CARD,CAUA,GAAMK,CAAAA,iBAAkC,CAAG,QAArCA,CAAAA,iBAAqC,CAACT,KAAD,CAAQM,MAAR,CAAmB,CAC5DN,KAAK,CAACN,kBAAN,CAA2BY,MAAM,CAACL,OAAlC,CACD,CAFD,CAIA,GAAMS,CAAAA,KAAK,CAAGvB,WAAW,CAAC,CACxBwB,IAAI,CAAE,aADkB,CAExBlB,YAAY,CAAZA,YAFwB,CAGxBmB,QAAQ,CAAE,CACRC,iBAAiB,CAAER,kBADX,CAERS,gBAAgB,CAAEN,iBAFV,CAGRO,gBAAgB,CAAEN,iBAHV,CAIRO,kBAAkB,CAAEjB,mBAJZ,CAHc,CASxBkB,aAAa,CAAE,6BAAiB,IAAdC,CAAAA,OAAc,OAAdA,OAAc,CAC9BA,OAAO,CAAC7B,oBAAoB,CAAC8B,SAAtB,CAAiCpB,mBAAjC,CAAP,CACAmB,OAAO,CAAC5B,wBAAwB,CAAC6B,SAA1B,CAAqCX,iBAArC,CAAP,CACAU,OAAO,CAAC3B,4BAA4B,CAAC4B,SAA9B,CAAyCd,kBAAzC,CAAP,CACAa,OAAO,CAAC9B,sBAAsB,CAAC+B,SAAxB,CAAmCd,kBAAnC,CAAP,CACD,CAduB,CAAD,CAAzB,CAiBO,mBAKHK,KAAK,CAACU,OALH,CACLP,iBADK,gBACLA,iBADK,CAELC,gBAFK,gBAELA,gBAFK,CAGLC,gBAHK,gBAGLA,gBAHK,CAILC,kBAJK,gBAILA,kBAJK,C,+EAOP,cAAeN,CAAAA,KAAf","sourcesContent":["import { createSlice, PayloadAction, CaseReducer } from '@reduxjs/toolkit';\nimport {\n  getAssetContractsQuery,\n  getContractNftsQuery,\n  getNftAssetContractQuery,\n  getWalletAssetContractsQuery\n} from '../async/queries';\nimport { Nft, AssetContract } from '../../lib/nfts/decoders';\nimport config from '../../config.json';\n\n//// State\n\n// Types\n\nexport type Token = Nft;\n\nexport interface Collection extends AssetContract {\n  tokens: Token[] | null;\n  loaded: boolean;\n}\n\nexport interface CollectionsState {\n  selectedCollection: string | null;\n  globalCollection: string;\n  collections: Record<string, Collection>;\n}\n\ntype Reducer<A> = CaseReducer<CollectionsState, PayloadAction<A>>;\n\n// Data\n\nexport const initialState: CollectionsState = {\n  selectedCollection: null,\n  globalCollection: config.contracts.nftFaucet,\n  collections: {}\n};\n\n//// Reducers & Slice\n\ntype PopulateCollection = Reducer<{ address: string; tokens: Token[] }>;\n\nconst populateCollectionR: PopulateCollection = (state, { payload }) => {\n  if (state.collections[payload.address]) {\n    state.collections[payload.address].tokens = payload.tokens;\n    state.collections[payload.address].loaded = true;\n  }\n};\n\nconst updateCollectionsR: Reducer<AssetContract[]> = (state, action) => {\n  for (let coll of action.payload) {\n    state.collections[coll.address] = {\n      ...coll,\n      tokens: null,\n      loaded: false\n    };\n  }\n};\n\nconst updateCollectionR: Reducer<AssetContract> = (state, { payload }) => {\n  if (!state.collections[payload.address]) {\n    state.collections[payload.address] = {\n      ...payload,\n      tokens: null,\n      loaded: false\n    };\n  }\n};\n\nconst selectCollectionR: Reducer<string> = (state, action) => {\n  state.selectedCollection = action.payload;\n};\n\nconst slice = createSlice({\n  name: 'collections',\n  initialState,\n  reducers: {\n    updateCollections: updateCollectionsR,\n    updateCollection: updateCollectionR,\n    selectCollection: selectCollectionR,\n    populateCollection: populateCollectionR\n  },\n  extraReducers: ({ addCase }) => {\n    addCase(getContractNftsQuery.fulfilled, populateCollectionR);\n    addCase(getNftAssetContractQuery.fulfilled, updateCollectionR);\n    addCase(getWalletAssetContractsQuery.fulfilled, updateCollectionsR);\n    addCase(getAssetContractsQuery.fulfilled, updateCollectionsR);\n  }\n});\n\nexport const {\n  updateCollections,\n  updateCollection,\n  selectCollection,\n  populateCollection\n} = slice.actions;\n\nexport default slice;\n"]},"metadata":{},"sourceType":"module"}