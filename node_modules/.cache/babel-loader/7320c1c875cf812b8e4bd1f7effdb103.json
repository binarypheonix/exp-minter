{"ast":null,"code":"import _slicedToArray from\"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _createForOfIteratorHelper from\"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _objectSpread from\"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{MichelsonMap}from'@taquito/taquito';import{Fa2MultiNftAssetCode,Fa2MultiNftFaucetCode}from'@tqtezos/minter-contracts';import{Buffer}from'buffer';import{uploadIPFSJSON}from'../util/ipfs';function toHexString(input){return Buffer.from(input).toString('hex');}export function createFaucetContract(_x,_x2){return _createFaucetContract.apply(this,arguments);}function _createFaucetContract(){_createFaucetContract=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(system,name){var metadataMap,resp;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:metadataMap=new MichelsonMap();_context.next=3;return uploadIPFSJSON(system.config.ipfsApi,{name:name,description:'An OpenMinter base collection contract.',interfaces:['TZIP-012','TZIP-016','TZIP-020'],tokenCategory:'collectibles'});case 3:resp=_context.sent;metadataMap.set('',toHexString(resp.data.ipfsUri));_context.next=7;return system.toolkit.wallet.originate({code:Fa2MultiNftFaucetCode.code,storage:{assets:{ledger:new MichelsonMap(),next_token_id:0,operators:new MichelsonMap(),token_metadata:new MichelsonMap()},metadata:metadataMap}}).send();case 7:return _context.abrupt(\"return\",_context.sent);case 8:case\"end\":return _context.stop();}}},_callee);}));return _createFaucetContract.apply(this,arguments);}export function createAssetContract(_x3,_x4){return _createAssetContract.apply(this,arguments);}function _createAssetContract(){_createAssetContract=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(system,metadata){var metadataMap,resp;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:metadataMap=new MichelsonMap();_context2.next=3;return uploadIPFSJSON(system.config.ipfsApi,_objectSpread({description:'An OpenMinter assets contract.',interfaces:['TZIP-012','TZIP-016','TZIP-020'],tokenCategory:'collectibles'},metadata));case 3:resp=_context2.sent;metadataMap.set('',toHexString(resp.data.ipfsUri));_context2.next=7;return system.toolkit.wallet.originate({code:Fa2MultiNftAssetCode.code,storage:{assets:{ledger:new MichelsonMap(),next_token_id:0,operators:new MichelsonMap(),token_metadata:new MichelsonMap()},admin:{admin:system.tzPublicKey,pending_admin:null,paused:false},metadata:metadataMap}}).send();case 7:return _context2.abrupt(\"return\",_context2.sent);case 8:case\"end\":return _context2.stop();}}},_callee2);}));return _createAssetContract.apply(this,arguments);}export function mintToken(_x5,_x6,_x7){return _mintToken.apply(this,arguments);}function _mintToken(){_mintToken=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(system,address,metadata){var contract,storage,token_id,token_info,resp;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return system.toolkit.wallet.at(address);case 2:contract=_context3.sent;_context3.next=5;return contract.storage();case 5:storage=_context3.sent;token_id=storage.assets.next_token_id;token_info=new MichelsonMap();_context3.next=10;return uploadIPFSJSON(system.config.ipfsApi,_objectSpread(_objectSpread({},metadata),{},{decimals:0,isBooleanAmount:true}));case 10:resp=_context3.sent;token_info.set('',toHexString(resp.data.ipfsUri));return _context3.abrupt(\"return\",contract.methods.mint([{owner:system.tzPublicKey,token_metadata:{token_id:token_id,token_info:token_info}}]).send());case 13:case\"end\":return _context3.stop();}}},_callee3);}));return _mintToken.apply(this,arguments);}export function mintTokens(_x8,_x9,_x10){return _mintTokens.apply(this,arguments);}function _mintTokens(){_mintTokens=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(system,address,metadata){var contract,storage,token_id,mints,_iterator,_step,_step$value,index,meta,token_info,resp;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return system.toolkit.wallet.at(address);case 2:contract=_context4.sent;_context4.next=5;return contract.storage();case 5:storage=_context4.sent;token_id=storage.assets.next_token_id;mints=[];_iterator=_createForOfIteratorHelper(metadata.entries());_context4.prev=9;_iterator.s();case 11:if((_step=_iterator.n()).done){_context4.next=21;break;}_step$value=_slicedToArray(_step.value,2),index=_step$value[0],meta=_step$value[1];token_info=new MichelsonMap();_context4.next=16;return uploadIPFSJSON(system.config.ipfsApi,_objectSpread(_objectSpread({},meta),{},{decimals:0,isBooleanAmount:true}));case 16:resp=_context4.sent;token_info.set('',toHexString(resp.data.ipfsUri));mints.push({owner:system.tzPublicKey,token_metadata:{token_id:token_id+index,token_info:token_info}});case 19:_context4.next=11;break;case 21:_context4.next=26;break;case 23:_context4.prev=23;_context4.t0=_context4[\"catch\"](9);_iterator.e(_context4.t0);case 26:_context4.prev=26;_iterator.f();return _context4.finish(26);case 29:return _context4.abrupt(\"return\",contract.methods.mint(mints).send());case 30:case\"end\":return _context4.stop();}}},_callee4,null,[[9,23,26,29]]);}));return _mintTokens.apply(this,arguments);}export function transferToken(_x11,_x12,_x13,_x14){return _transferToken.apply(this,arguments);}function _transferToken(){_transferToken=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(system,contractAddress,tokenId,toAddress){var contract;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return system.toolkit.wallet.at(contractAddress);case 2:contract=_context5.sent;return _context5.abrupt(\"return\",contract.methods.transfer([{from_:system.tzPublicKey,txs:[{to_:toAddress,token_id:tokenId,amount:1}]}]).send());case 4:case\"end\":return _context5.stop();}}},_callee5);}));return _transferToken.apply(this,arguments);}export function listTokenForSale(_x15,_x16,_x17,_x18,_x19,_x20){return _listTokenForSale.apply(this,arguments);}function _listTokenForSale(){_listTokenForSale=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(system,marketplaceContract,tokenContract,tokenId,salePrice,saleQty){var contractM,contractT,batch,sellSchema;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.next=2;return system.toolkit.wallet.at(marketplaceContract);case 2:contractM=_context6.sent;_context6.next=5;return system.toolkit.wallet.at(tokenContract);case 5:contractT=_context6.sent;batch=system.toolkit.wallet.batch([]).withContractCall(contractT.methods.update_operators([{add_operator:{owner:system.tzPublicKey,operator:marketplaceContract,token_id:tokenId}}]));sellSchema=contractM.parameterSchema.ExtractSchema()['sell'];if(sellSchema.hasOwnProperty('sale_token_param_tez')){batch.withContractCall(contractM.methods.sell(salePrice,tokenContract,tokenId));}else{batch.withContractCall(contractM.methods.sell(tokenContract,tokenId,salePrice,saleQty));}return _context6.abrupt(\"return\",batch.send());case 10:case\"end\":return _context6.stop();}}},_callee6);}));return _listTokenForSale.apply(this,arguments);}export function cancelTokenSaleLegacy(_x21,_x22,_x23,_x24){return _cancelTokenSaleLegacy.apply(this,arguments);}function _cancelTokenSaleLegacy(){_cancelTokenSaleLegacy=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(system,marketplaceContract,tokenContract,tokenId){var contractM,contractT,batch;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.next=2;return system.toolkit.wallet.at(marketplaceContract);case 2:contractM=_context7.sent;_context7.next=5;return system.toolkit.wallet.at(tokenContract);case 5:contractT=_context7.sent;batch=system.toolkit.wallet.batch([]).withContractCall(contractM.methods.cancel(system.tzPublicKey,tokenContract,tokenId)).withContractCall(contractT.methods.update_operators([{remove_operator:{owner:system.tzPublicKey,operator:marketplaceContract,token_id:tokenId}}]));return _context7.abrupt(\"return\",batch.send());case 8:case\"end\":return _context7.stop();}}},_callee7);}));return _cancelTokenSaleLegacy.apply(this,arguments);}export function cancelTokenSale(_x25,_x26,_x27,_x28,_x29){return _cancelTokenSale.apply(this,arguments);}function _cancelTokenSale(){_cancelTokenSale=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(system,marketplaceContract,tokenContract,tokenId,saleId){var contractM,contractT,batch;return _regeneratorRuntime.wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:_context8.next=2;return system.toolkit.wallet.at(marketplaceContract);case 2:contractM=_context8.sent;_context8.next=5;return system.toolkit.wallet.at(tokenContract);case 5:contractT=_context8.sent;batch=system.toolkit.wallet.batch([]).withContractCall(contractM.methods.cancel(saleId)).withContractCall(contractT.methods.update_operators([{remove_operator:{owner:system.tzPublicKey,operator:marketplaceContract,token_id:tokenId}}]));return _context8.abrupt(\"return\",batch.send());case 8:case\"end\":return _context8.stop();}}},_callee8);}));return _cancelTokenSale.apply(this,arguments);}export function approveTokenOperator(_x30,_x31,_x32,_x33){return _approveTokenOperator.apply(this,arguments);}function _approveTokenOperator(){_approveTokenOperator=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(system,contractAddress,tokenId,operatorAddress){var contract;return _regeneratorRuntime.wrap(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:_context9.next=2;return system.toolkit.wallet.at(contractAddress);case 2:contract=_context9.sent;return _context9.abrupt(\"return\",contract.methods.update_operators([{add_operator:{owner:system.tzPublicKey,operator:operatorAddress,token_id:tokenId}}]).send());case 4:case\"end\":return _context9.stop();}}},_callee9);}));return _approveTokenOperator.apply(this,arguments);}export function removeTokenOperator(_x34,_x35,_x36,_x37){return _removeTokenOperator.apply(this,arguments);}function _removeTokenOperator(){_removeTokenOperator=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(system,contractAddress,tokenId,operatorAddress){var contract;return _regeneratorRuntime.wrap(function _callee10$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:_context10.next=2;return system.toolkit.wallet.at(contractAddress);case 2:contract=_context10.sent;return _context10.abrupt(\"return\",contract.methods.update_operators([{remove_operator:{owner:system.tzPublicKey,operator:operatorAddress,token_id:tokenId}}]).send());case 4:case\"end\":return _context10.stop();}}},_callee10);}));return _removeTokenOperator.apply(this,arguments);}export function buyTokenLegacy(_x38,_x39,_x40,_x41,_x42,_x43){return _buyTokenLegacy.apply(this,arguments);}function _buyTokenLegacy(){_buyTokenLegacy=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(system,marketplaceContract,tokenContract,tokenId,tokenSeller,salePrice){var contract;return _regeneratorRuntime.wrap(function _callee11$(_context11){while(1){switch(_context11.prev=_context11.next){case 0:_context11.next=2;return system.toolkit.wallet.at(marketplaceContract);case 2:contract=_context11.sent;return _context11.abrupt(\"return\",contract.methods.buy(tokenSeller,tokenContract,tokenId).send({amount:salePrice}));case 4:case\"end\":return _context11.stop();}}},_callee11);}));return _buyTokenLegacy.apply(this,arguments);}export function buyToken(_x44,_x45,_x46,_x47){return _buyToken.apply(this,arguments);}function _buyToken(){_buyToken=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee12(system,marketplaceContract,saleId,salePrice){var contract;return _regeneratorRuntime.wrap(function _callee12$(_context12){while(1){switch(_context12.prev=_context12.next){case 0:_context12.next=2;return system.toolkit.wallet.at(marketplaceContract);case 2:contract=_context12.sent;return _context12.abrupt(\"return\",contract.methods.buy(saleId).send({amount:salePrice}));case 4:case\"end\":return _context12.stop();}}},_callee12);}));return _buyToken.apply(this,arguments);}","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/src/lib/nfts/actions.ts"],"names":["MichelsonMap","Fa2MultiNftAssetCode","Fa2MultiNftFaucetCode","Buffer","uploadIPFSJSON","toHexString","input","from","toString","createFaucetContract","system","name","metadataMap","config","ipfsApi","description","interfaces","tokenCategory","resp","set","data","ipfsUri","toolkit","wallet","originate","code","storage","assets","ledger","next_token_id","operators","token_metadata","metadata","send","createAssetContract","admin","tzPublicKey","pending_admin","paused","mintToken","address","at","contract","token_id","token_info","decimals","isBooleanAmount","methods","mint","owner","mintTokens","mints","entries","index","meta","push","transferToken","contractAddress","tokenId","toAddress","transfer","from_","txs","to_","amount","listTokenForSale","marketplaceContract","tokenContract","salePrice","saleQty","contractM","contractT","batch","withContractCall","update_operators","add_operator","operator","sellSchema","parameterSchema","ExtractSchema","hasOwnProperty","sell","cancelTokenSaleLegacy","cancel","remove_operator","cancelTokenSale","saleId","approveTokenOperator","operatorAddress","removeTokenOperator","buyTokenLegacy","tokenSeller","buy","buyToken"],"mappings":"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","sourcesContent":["import { MichelsonMap } from '@taquito/taquito';\nimport {\n  Fa2MultiNftAssetCode,\n  Fa2MultiNftFaucetCode\n} from '@tqtezos/minter-contracts';\nimport { Buffer } from 'buffer';\nimport { SystemWithWallet } from '../system';\nimport { uploadIPFSJSON } from '../util/ipfs';\nimport { NftMetadata } from './decoders';\n\nfunction toHexString(input: string) {\n  return Buffer.from(input).toString('hex');\n}\n\nexport async function createFaucetContract(\n  system: SystemWithWallet,\n  name: string\n) {\n  const metadataMap = new MichelsonMap<string, string>();\n  const resp = await uploadIPFSJSON(system.config.ipfsApi, {\n    name,\n    description: 'An OpenMinter base collection contract.',\n    interfaces: ['TZIP-012', 'TZIP-016', 'TZIP-020'],\n    tokenCategory: 'collectibles'\n  });\n  metadataMap.set('', toHexString(resp.data.ipfsUri));\n  return await system.toolkit.wallet\n    .originate({\n      code: Fa2MultiNftFaucetCode.code,\n      storage: {\n        assets: {\n          ledger: new MichelsonMap(),\n          next_token_id: 0,\n          operators: new MichelsonMap(),\n          token_metadata: new MichelsonMap()\n        },\n        metadata: metadataMap\n      }\n    })\n    .send();\n}\n\nexport async function createAssetContract(\n  system: SystemWithWallet,\n  metadata: Record<string, string>\n) {\n  const metadataMap = new MichelsonMap<string, string>();\n  const resp = await uploadIPFSJSON(system.config.ipfsApi, {\n    description: 'An OpenMinter assets contract.',\n    interfaces: ['TZIP-012', 'TZIP-016', 'TZIP-020'],\n    tokenCategory: 'collectibles',\n    ...metadata\n  });\n  metadataMap.set('', toHexString(resp.data.ipfsUri));\n  return await system.toolkit.wallet\n    .originate({\n      code: Fa2MultiNftAssetCode.code,\n      storage: {\n        assets: {\n          ledger: new MichelsonMap(),\n          next_token_id: 0,\n          operators: new MichelsonMap(),\n          token_metadata: new MichelsonMap()\n        },\n        admin: {\n          admin: system.tzPublicKey,\n          pending_admin: null,\n          paused: false\n        },\n        metadata: metadataMap\n      }\n    })\n    .send();\n}\n\nexport async function mintToken(\n  system: SystemWithWallet,\n  address: string,\n  metadata: NftMetadata\n) {\n  const contract = await system.toolkit.wallet.at(address);\n  const storage = await contract.storage<any>();\n\n  const token_id = storage.assets.next_token_id;\n  const token_info = new MichelsonMap<string, string>();\n  const resp = await uploadIPFSJSON(system.config.ipfsApi, {\n    ...metadata,\n    decimals: 0,\n    isBooleanAmount: true\n  });\n  token_info.set('', toHexString(resp.data.ipfsUri));\n\n  return contract.methods\n    .mint([\n      {\n        owner: system.tzPublicKey,\n        token_metadata: {\n          token_id,\n          token_info\n        }\n      }\n    ])\n    .send();\n}\n\ninterface MintData {\n  owner: string;\n  token_metadata: {\n    token_id: number;\n    token_info: MichelsonMap<string, string>;\n  };\n}\n\nexport async function mintTokens(\n  system: SystemWithWallet,\n  address: string,\n  metadata: NftMetadata[]\n) {\n  const contract = await system.toolkit.wallet.at(address);\n  const storage = await contract.storage<any>();\n\n  const token_id = storage.assets.next_token_id;\n  const mints: MintData[] = [];\n  for (const [index, meta] of metadata.entries()) {\n    const token_info = new MichelsonMap<string, string>();\n    const resp = await uploadIPFSJSON(system.config.ipfsApi, {\n      ...meta,\n      decimals: 0,\n      isBooleanAmount: true\n    });\n    token_info.set('', toHexString(resp.data.ipfsUri));\n    mints.push({\n      owner: system.tzPublicKey,\n      token_metadata: {\n        token_id: token_id + index,\n        token_info\n      }\n    });\n  }\n\n  return contract.methods.mint(mints).send();\n}\n\nexport async function transferToken(\n  system: SystemWithWallet,\n  contractAddress: string,\n  tokenId: number,\n  toAddress: string\n) {\n  const contract = await system.toolkit.wallet.at(contractAddress);\n  return contract.methods\n    .transfer([\n      {\n        from_: system.tzPublicKey,\n        txs: [{ to_: toAddress, token_id: tokenId, amount: 1 }]\n      }\n    ])\n    .send();\n}\n\nexport async function listTokenForSale(\n  system: SystemWithWallet,\n  marketplaceContract: string,\n  tokenContract: string,\n  tokenId: number,\n  salePrice: number,\n  saleQty: number\n) {\n  const contractM = await system.toolkit.wallet.at(marketplaceContract);\n  const contractT = await system.toolkit.wallet.at(tokenContract);\n  const batch = system.toolkit.wallet\n    .batch([])\n    .withContractCall(\n      contractT.methods.update_operators([\n        {\n          add_operator: {\n            owner: system.tzPublicKey,\n            operator: marketplaceContract,\n            token_id: tokenId\n          }\n        }\n      ])\n    );\n\n  const sellSchema = contractM.parameterSchema.ExtractSchema()['sell'];\n  if (sellSchema.hasOwnProperty('sale_token_param_tez')) {\n    batch.withContractCall(\n      contractM.methods.sell(salePrice, tokenContract, tokenId)\n    );\n  } else {\n    batch.withContractCall(\n      contractM.methods.sell(tokenContract, tokenId, salePrice, saleQty)\n    );\n  }\n\n  return batch.send();\n}\n\nexport async function cancelTokenSaleLegacy(\n  system: SystemWithWallet,\n  marketplaceContract: string,\n  tokenContract: string,\n  tokenId: number\n) {\n  const contractM = await system.toolkit.wallet.at(marketplaceContract);\n  const contractT = await system.toolkit.wallet.at(tokenContract);\n  const batch = system.toolkit.wallet\n    .batch([])\n    .withContractCall(\n      contractM.methods.cancel(system.tzPublicKey, tokenContract, tokenId)\n    )\n    .withContractCall(\n      contractT.methods.update_operators([\n        {\n          remove_operator: {\n            owner: system.tzPublicKey,\n            operator: marketplaceContract,\n            token_id: tokenId\n          }\n        }\n      ])\n    );\n  return batch.send();\n}\n\nexport async function cancelTokenSale(\n  system: SystemWithWallet,\n  marketplaceContract: string,\n  tokenContract: string,\n  tokenId: number,\n  saleId: number\n) {\n  const contractM = await system.toolkit.wallet.at(marketplaceContract);\n  const contractT = await system.toolkit.wallet.at(tokenContract);\n  const batch = system.toolkit.wallet\n    .batch([])\n    .withContractCall(\n      contractM.methods.cancel(saleId)\n    )\n    .withContractCall(\n      contractT.methods.update_operators([\n        {\n          remove_operator: {\n            owner: system.tzPublicKey,\n            operator: marketplaceContract,\n            token_id: tokenId\n          }\n        }\n      ])\n    );\n  return batch.send();\n}\n\nexport async function approveTokenOperator(\n  system: SystemWithWallet,\n  contractAddress: string,\n  tokenId: number,\n  operatorAddress: string\n) {\n  const contract = await system.toolkit.wallet.at(contractAddress);\n  return contract.methods\n    .update_operators([\n      {\n        add_operator: {\n          owner: system.tzPublicKey,\n          operator: operatorAddress,\n          token_id: tokenId\n        }\n      }\n    ])\n    .send();\n}\n\nexport async function removeTokenOperator(\n  system: SystemWithWallet,\n  contractAddress: string,\n  tokenId: number,\n  operatorAddress: string\n) {\n  const contract = await system.toolkit.wallet.at(contractAddress);\n  return contract.methods\n    .update_operators([\n      {\n        remove_operator: {\n          owner: system.tzPublicKey,\n          operator: operatorAddress,\n          token_id: tokenId\n        }\n      }\n    ])\n    .send();\n}\n\nexport async function buyTokenLegacy(\n  system: SystemWithWallet,\n  marketplaceContract: string,\n  tokenContract: string,\n  tokenId: number,\n  tokenSeller: string,\n  salePrice: number\n) {\n  const contract = await system.toolkit.wallet.at(marketplaceContract);\n  return contract.methods\n    .buy(tokenSeller, tokenContract, tokenId)\n    .send({ amount: salePrice });\n}\n\nexport async function buyToken(\n  system: SystemWithWallet,\n  marketplaceContract: string,\n  saleId: number,\n  salePrice: number\n) {\n  const contract = await system.toolkit.wallet.at(marketplaceContract);\n  return contract.methods\n    .buy(saleId)\n    .send({ amount: salePrice });\n}"]},"metadata":{},"sourceType":"module"}