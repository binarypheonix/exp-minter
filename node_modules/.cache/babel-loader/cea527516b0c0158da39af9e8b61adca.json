{"ast":null,"code":"var _jsxFileName = \"/Users/frankenstein/projects/minter/src/components/common/modals/TransferToken.tsx\";\nimport React, { useState } from 'react';\nimport { Box, FormControl, FormLabel, Input, ModalHeader, ModalFooter, ModalBody, ModalCloseButton, Text, useDisclosure } from '@chakra-ui/react';\nimport { Plus } from 'react-feather';\nimport { MinterButton } from '../../common/index';\nimport { useDispatch } from '../../../reducer';\nimport { transferTokenAction } from '../../../reducer/async/actions';\nimport FormModal from './FormModal';\nexport function TransferTokenModal(props) {\n  const [toAddress, setToAddress] = useState('');\n  const dispatch = useDispatch();\n  const initialRef = React.useRef(null);\n  return /*#__PURE__*/React.createElement(FormModal, {\n    disclosure: props.disclosure,\n    sync: props.sync,\n    method: \"transferToken\",\n    dispatchThunk: () => dispatch(transferTokenAction({\n      contract: props.contractAddress,\n      tokenId: props.tokenId,\n      to: toAddress\n    })),\n    onComplete: () => setToAddress(''),\n    initialRef: initialRef,\n    pendingMessage: \"Transferring token...\",\n    completeMessage: \"Transfer complete\",\n    body: onSubmit => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ModalHeader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }\n    }, \"Transfer Token\"), /*#__PURE__*/React.createElement(ModalCloseButton, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      fontFamily: \"mono\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 15\n      }\n    }, \"To Address\"), /*#__PURE__*/React.createElement(Input, {\n      autoFocus: true,\n      ref: initialRef,\n      placeholder: \"Input token recipient\",\n      value: toAddress,\n      onChange: e => setToAddress(e.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 15\n      }\n    }))), /*#__PURE__*/React.createElement(ModalFooter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(MinterButton, {\n      variant: \"primaryAction\",\n      onClick: () => onSubmit(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }\n    }, \"Transfer\"))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  });\n}\nexport function TransferTokenButton(props) {\n  const disclosure = useDisclosure();\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MinterButton, {\n    variant: \"primaryAction\",\n    onClick: disclosure.onOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    color: \"currentcolor\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Plus, {\n    size: 16,\n    strokeWidth: \"3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Text, {\n    ml: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, \"Transfer Token\")), /*#__PURE__*/React.createElement(TransferTokenModal, Object.assign({}, props, {\n    disclosure: disclosure,\n    sync: props.sync,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/src/components/common/modals/TransferToken.tsx"],"names":["React","useState","Box","FormControl","FormLabel","Input","ModalHeader","ModalFooter","ModalBody","ModalCloseButton","Text","useDisclosure","Plus","MinterButton","useDispatch","transferTokenAction","FormModal","TransferTokenModal","props","toAddress","setToAddress","dispatch","initialRef","useRef","disclosure","sync","contract","contractAddress","tokenId","to","onSubmit","e","target","value","TransferTokenButton","onOpen"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Box,\n  FormControl,\n  FormLabel,\n  Input,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Text,\n  useDisclosure\n} from '@chakra-ui/react';\nimport { Plus } from 'react-feather';\nimport { MinterButton } from '../../common/index';\nimport { useDispatch } from '../../../reducer';\nimport { transferTokenAction } from '../../../reducer/async/actions';\nimport FormModal, { BaseModalProps, BaseModalButtonProps } from './FormModal';\n\ninterface TransferTokenModalProps extends BaseModalProps {\n  contractAddress: string;\n  tokenId: number;\n}\n\nexport function TransferTokenModal(props: TransferTokenModalProps) {\n  const [toAddress, setToAddress] = useState('');\n  const dispatch = useDispatch();\n  const initialRef = React.useRef(null);\n  return (\n    <FormModal\n      disclosure={props.disclosure}\n      sync={props.sync}\n      method=\"transferToken\"\n      dispatchThunk={() =>\n        dispatch(\n          transferTokenAction({\n            contract: props.contractAddress,\n            tokenId: props.tokenId,\n            to: toAddress\n          })\n        )\n      }\n      onComplete={() => setToAddress('')}\n      initialRef={initialRef}\n      pendingMessage=\"Transferring token...\"\n      completeMessage=\"Transfer complete\"\n      body={onSubmit => (\n        <>\n          <ModalHeader>Transfer Token</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <FormControl>\n              <FormLabel fontFamily=\"mono\">To Address</FormLabel>\n              <Input\n                autoFocus={true}\n                ref={initialRef}\n                placeholder=\"Input token recipient\"\n                value={toAddress}\n                onChange={e => setToAddress(e.target.value)}\n              />\n            </FormControl>\n          </ModalBody>\n\n          <ModalFooter>\n            <MinterButton variant=\"primaryAction\" onClick={() => onSubmit()}>\n              Transfer\n            </MinterButton>\n          </ModalFooter>\n        </>\n      )}\n    />\n  );\n}\n\ninterface TransferTokenButtonProps extends BaseModalButtonProps {\n  contractAddress: string;\n  tokenId: number;\n}\n\nexport function TransferTokenButton(props: TransferTokenButtonProps) {\n  const disclosure = useDisclosure();\n  return (\n    <>\n      <MinterButton variant=\"primaryAction\" onClick={disclosure.onOpen}>\n        <Box color=\"currentcolor\">\n          <Plus size={16} strokeWidth=\"3\" />\n        </Box>\n        <Text ml={2}>Transfer Token</Text>\n      </MinterButton>\n      <TransferTokenModal\n        {...props}\n        disclosure={disclosure}\n        sync={props.sync}\n      />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}