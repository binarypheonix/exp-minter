{"ast":null,"code":"var _jsxFileName = \"/Users/frankenstein/projects/minter/src/components/common/modals/SellToken.tsx\";\nimport React, { useState } from 'react';\nimport { Box, Flex, FormControl, Input, InputGroup, InputLeftElement, ModalHeader, ModalFooter, ModalBody, ModalCloseButton, useDisclosure } from '@chakra-ui/react';\nimport { Check } from 'react-feather';\nimport { MinterButton } from '../../common';\nimport { useDispatch, useSelector } from '../../../reducer';\nimport { listTokenAction } from '../../../reducer/async/actions';\nimport FormModal from './FormModal';\nimport tz from \"../assets/tezos-sym.svg\";\nexport function SellTokenModal(props) {\n  const [price, setPrice] = useState('');\n  const dispatch = useDispatch();\n  const initialRef = React.useRef(null);\n  const salePrice = Math.floor(Number(price) * 1000000);\n  const validPrice = !Number.isNaN(price) && salePrice > 0;\n  return /*#__PURE__*/React.createElement(FormModal, {\n    disclosure: props.disclosure,\n    sync: props.sync,\n    method: \"listToken\",\n    dispatchThunk: () => dispatch(listTokenAction({\n      contract: props.contract,\n      tokenId: props.tokenId,\n      salePrice: salePrice\n    })),\n    onComplete: () => setPrice(''),\n    initialRef: initialRef,\n    pendingMessage: \"Listing token for sale...\",\n    completeMessage: \"Token listed for sale\",\n    body: onSubmit => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ModalHeader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }\n    }, \"Set your price\"), /*#__PURE__*/React.createElement(ModalCloseButton, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Flex, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormControl, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(InputLeftElement, {\n      pointerEvents: \"none\",\n      color: \"gray.900\",\n      fontSize: \"1.2em\",\n      children: /*#__PURE__*/React.createElement(\"img\", {\n        src: tz,\n        alt: \"\",\n        width: 10,\n        height: \"auto\",\n        style: {\n          display: 'inline-block'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 31\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(Input, {\n      autoFocus: true,\n      ref: initialRef,\n      placeholder: \"Enter sale amount\",\n      value: price,\n      onChange: e => setPrice(e.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 19\n      }\n    }))), /*#__PURE__*/React.createElement(Box, {\n      ml: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(MinterButton, {\n      variant: validPrice ? 'primaryAction' : 'primaryActionInactive',\n      onClick: () => validPrice && onSubmit(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Check, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 19\n      }\n    }))))), /*#__PURE__*/React.createElement(ModalFooter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  });\n}\nexport function SellTokenButton(props) {\n  const disclosure = useDisclosure();\n  const {\n    status\n  } = useSelector(s => s.status.listToken);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MinterButton, {\n    variant: \"primaryAction\",\n    onClick: disclosure.onOpen,\n    disabled: status === 'in_transit',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, \"Sell\"), /*#__PURE__*/React.createElement(SellTokenModal, Object.assign({}, props, {\n    disclosure: disclosure,\n    sync: props.sync,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/src/components/common/modals/SellToken.tsx"],"names":["React","useState","Box","Flex","FormControl","Input","InputGroup","InputLeftElement","ModalHeader","ModalFooter","ModalBody","ModalCloseButton","useDisclosure","Check","MinterButton","useDispatch","useSelector","listTokenAction","FormModal","SellTokenModal","props","price","setPrice","dispatch","initialRef","useRef","salePrice","Math","floor","Number","validPrice","isNaN","disclosure","sync","contract","tokenId","onSubmit","tz","display","e","target","value","SellTokenButton","status","s","listToken","onOpen"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Box,\n  Flex,\n  FormControl,\n  Input,\n  InputGroup,\n  InputLeftElement,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  useDisclosure\n} from '@chakra-ui/react';\nimport { Check } from 'react-feather';\nimport { MinterButton } from '../../common';\nimport { useDispatch, useSelector } from '../../../reducer';\nimport { listTokenAction } from '../../../reducer/async/actions';\nimport FormModal, { BaseModalProps, BaseModalButtonProps } from './FormModal';\nimport tz from '../assets/tezos-sym.svg'\n\ninterface SellTokenModalProps extends BaseModalProps {\n  contract: string;\n  tokenId: number;\n}\n\nexport function SellTokenModal(props: SellTokenModalProps) {\n  const [price, setPrice] = useState('');\n  const dispatch = useDispatch();\n  const initialRef = React.useRef(null);\n\n  const salePrice = Math.floor(Number(price) * 1000000);\n  const validPrice = !Number.isNaN(price) && salePrice > 0;\n  return (\n    <FormModal\n      disclosure={props.disclosure}\n      sync={props.sync}\n      method=\"listToken\"\n      dispatchThunk={() =>\n        dispatch(\n          listTokenAction({\n            contract: props.contract,\n            tokenId: props.tokenId,\n            salePrice: salePrice\n          })\n        )\n      }\n      onComplete={() => setPrice('')}\n      initialRef={initialRef}\n      pendingMessage=\"Listing token for sale...\"\n      completeMessage=\"Token listed for sale\"\n      body={onSubmit => (\n        <>\n          <ModalHeader>Set your price</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Flex>\n              <FormControl>\n                <InputGroup>\n                  <InputLeftElement\n                    pointerEvents=\"none\"\n                    color=\"gray.900\"\n                    fontSize=\"1.2em\"\n                    children={<img src={tz} alt=\"\" width={10} height=\"auto\" style={{display: 'inline-block'}}/>}\n                  />\n                  <Input\n                    autoFocus={true}\n                    ref={initialRef}\n                    placeholder=\"Enter sale amount\"\n                    value={price}\n                    onChange={e => setPrice(e.target.value)}\n                  />\n                </InputGroup>\n              </FormControl>\n              <Box ml={2}>\n                <MinterButton\n                  variant={\n                    validPrice ? 'primaryAction' : 'primaryActionInactive'\n                  }\n                  onClick={() => validPrice && onSubmit()}\n                >\n                  <Check />\n                </MinterButton>\n              </Box>\n            </Flex>\n          </ModalBody>\n          <ModalFooter />\n        </>\n      )}\n    />\n  );\n}\n\ninterface SellTokenButtonProps extends BaseModalButtonProps {\n  contract: string;\n  tokenId: number;\n}\n\nexport function SellTokenButton(props: SellTokenButtonProps) {\n  const disclosure = useDisclosure();\n  const { status } = useSelector(s => s.status.listToken)\n  \n  return (\n    <>\n      <MinterButton variant=\"primaryAction\" onClick={disclosure.onOpen} disabled={status === 'in_transit'}>\n        Sell\n      </MinterButton>\n      <SellTokenModal {...props} disclosure={disclosure} sync={props.sync} />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}