{"ast":null,"code":"import _regeneratorRuntime from \"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { MatrixRoomStatus } from '../models/MatrixRoom';\n/**\n * A service to help with matrix room management\n */\n\nexport var MatrixRoomService = /*#__PURE__*/function () {\n  function MatrixRoomService(httpClient) {\n    _classCallCheck(this, MatrixRoomService);\n\n    this.httpClient = httpClient;\n  }\n  /**\n   * Create a room\n   *\n   * @param accessToken\n   * @param config\n   */\n\n\n  _createClass(MatrixRoomService, [{\n    key: \"createRoom\",\n    value: function createRoom(accessToken) {\n      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this.httpClient.post('/createRoom', config, {\n                  accessToken: accessToken\n                }));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Invite a user to a room\n     *\n     * @param accessToken\n     * @param user\n     * @param room\n     */\n\n  }, {\n    key: \"inviteToRoom\",\n    value: function inviteToRoom(accessToken, user, room) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(room.status !== MatrixRoomStatus.JOINED && room.status !== MatrixRoomStatus.UNKNOWN)) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", Promise.reject(\"User is not a member of room \".concat(room.id, \".\")));\n\n              case 2:\n                return _context2.abrupt(\"return\", this.httpClient.post(\"/rooms/\".concat(encodeURIComponent(room.id), \"/invite\"), {\n                  user_id: user\n                }, {\n                  accessToken: accessToken\n                }));\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n    /**\n     * Join a specific room\n     *\n     * @param accessToken\n     * @param room\n     */\n\n  }, {\n    key: \"joinRoom\",\n    value: function joinRoom(accessToken, room) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(room.status === MatrixRoomStatus.JOINED)) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", Promise.resolve({\n                  room_id: room.id\n                }));\n\n              case 2:\n                return _context3.abrupt(\"return\", this.httpClient.post(\"/rooms/\".concat(encodeURIComponent(room.id), \"/join\"), {}, {\n                  accessToken: accessToken\n                }));\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n    /**\n     * Get all joined rooms\n     *\n     * @param accessToken\n     */\n\n  }, {\n    key: \"getJoinedRooms\",\n    value: function getJoinedRooms(accessToken) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", this.httpClient.get(\"/joined_rooms\", undefined, {\n                  accessToken: accessToken\n                }));\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }]);\n\n  return MatrixRoomService;\n}();","map":{"version":3,"sources":["../../../../src/matrix-client/services/MatrixRoomService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAAqB,gBAArB,QAA6C,sBAA7C;AAMA;;AAEG;;AACH,WAAa,iBAAb;AACE,6BAA6B,UAA7B,EAAyD;AAAA;;AAA5B,SAAA,UAAA,GAAA,UAAA;AAAgC;AAE7D;;;;;AAKG;;;AARL;AAAA;AAAA,WASe,oBACX,WADW,EAEyB;AAAA,UAApC,MAAoC,uEAAF,EAAE;;;;;;iDAE7B,KAAK,UAAL,CAAgB,IAAhB,CAAqB,aAArB,EAAoC,MAApC,EAA4C;AAAE,kBAAA,WAAW,EAAX;AAAF,iBAA5C,C;;;;;;;;;AACR;AAED;;;;;;AAMG;;AAtBL;AAAA;AAAA,WAuBe,sBACX,WADW,EAEX,IAFW,EAGX,IAHW,EAGK;;;;;;sBAEZ,IAAI,CAAC,MAAL,KAAgB,gBAAgB,CAAC,MAAjC,IAA2C,IAAI,CAAC,MAAL,KAAgB,gBAAgB,CAAC,O;;;;;kDACvE,OAAO,CAAC,MAAR,wCAA+C,IAAI,CAAC,EAApD,O;;;kDAGF,KAAK,UAAL,CAAgB,IAAhB,kBACK,kBAAkB,CAAC,IAAI,CAAC,EAAN,CADvB,cAEL;AAAE,kBAAA,OAAO,EAAE;AAAX,iBAFK,EAGL;AAAE,kBAAA,WAAW,EAAX;AAAF,iBAHK,C;;;;;;;;;AAKR;AAED;;;;;AAKG;;AA5CL;AAAA;AAAA,WA6Ce,kBAAS,WAAT,EAA8B,IAA9B,EAA8C;;;;;;sBACrD,IAAI,CAAC,MAAL,KAAgB,gBAAgB,CAAC,M;;;;;kDAC5B,OAAO,CAAC,OAAR,CAAgB;AAAE,kBAAA,OAAO,EAAE,IAAI,CAAC;AAAhB,iBAAhB,C;;;kDAGF,KAAK,UAAL,CAAgB,IAAhB,kBAA+B,kBAAkB,CAAC,IAAI,CAAC,EAAN,CAAjD,YAAmE,EAAnE,EAAuE;AAAE,kBAAA,WAAW,EAAX;AAAF,iBAAvE,C;;;;;;;;;AACR;AAED;;;;AAIG;;AAzDL;AAAA;AAAA,WA0De,wBAAe,WAAf,EAAkC;;;;;;kDACtC,KAAK,UAAL,CAAgB,GAAhB,kBAAqC,SAArC,EAAgD;AAAE,kBAAA,WAAW,EAAX;AAAF,iBAAhD,C;;;;;;;;;AACR;AA5DH;;AAAA;AAAA","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { MatrixRoomStatus } from '../models/MatrixRoom';\n/**\n * A service to help with matrix room management\n */\nexport class MatrixRoomService {\n    constructor(httpClient) {\n        this.httpClient = httpClient;\n    }\n    /**\n     * Create a room\n     *\n     * @param accessToken\n     * @param config\n     */\n    createRoom(accessToken, config = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.httpClient.post('/createRoom', config, { accessToken });\n        });\n    }\n    /**\n     * Invite a user to a room\n     *\n     * @param accessToken\n     * @param user\n     * @param room\n     */\n    inviteToRoom(accessToken, user, room) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (room.status !== MatrixRoomStatus.JOINED && room.status !== MatrixRoomStatus.UNKNOWN) {\n                return Promise.reject(`User is not a member of room ${room.id}.`);\n            }\n            return this.httpClient.post(`/rooms/${encodeURIComponent(room.id)}/invite`, { user_id: user }, { accessToken });\n        });\n    }\n    /**\n     * Join a specific room\n     *\n     * @param accessToken\n     * @param room\n     */\n    joinRoom(accessToken, room) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (room.status === MatrixRoomStatus.JOINED) {\n                return Promise.resolve({ room_id: room.id });\n            }\n            return this.httpClient.post(`/rooms/${encodeURIComponent(room.id)}/join`, {}, { accessToken });\n        });\n    }\n    /**\n     * Get all joined rooms\n     *\n     * @param accessToken\n     */\n    getJoinedRooms(accessToken) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.httpClient.get(`/joined_rooms`, undefined, { accessToken });\n        });\n    }\n}\n//# sourceMappingURL=MatrixRoomService.js.map"]},"metadata":{},"sourceType":"module"}