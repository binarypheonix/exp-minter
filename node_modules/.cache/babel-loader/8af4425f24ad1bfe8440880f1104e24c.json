{"ast":null,"code":"\"use strict\";\n/**\n * ```ts\n * interface Separated<E, A> {\n *    readonly left: E\n *    readonly right: A\n * }\n * ```\n *\n * Represents a result of separating a whole into two parts.\n *\n * @since 2.10.0\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.right = exports.left = exports.flap = exports.Functor = exports.Bifunctor = exports.URI = exports.bimap = exports.mapLeft = exports.map = exports.separated = void 0;\n\nvar function_1 = require(\"./function\");\n\nvar Functor_1 = require(\"./Functor\"); // -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n\n/**\n * @category constructors\n * @since 2.10.0\n */\n\n\nvar separated = function separated(left, right) {\n  return {\n    left: left,\n    right: right\n  };\n};\n\nexports.separated = separated; // -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\n\nvar _map = function _map(fa, f) {\n  return function_1.pipe(fa, exports.map(f));\n};\n\nvar _mapLeft = function _mapLeft(fa, f) {\n  return function_1.pipe(fa, exports.mapLeft(f));\n};\n\nvar _bimap = function _bimap(fa, g, f) {\n  return function_1.pipe(fa, exports.bimap(g, f));\n}; // -------------------------------------------------------------------------------------\n// type class members\n// -------------------------------------------------------------------------------------\n\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category Functor\n * @since 2.10.0\n */\n\n\nvar map = function map(f) {\n  return function (fa) {\n    return exports.separated(exports.left(fa), f(exports.right(fa)));\n  };\n};\n\nexports.map = map;\n/**\n * Map a function over the first type argument of a bifunctor.\n *\n * @category Bifunctor\n * @since 2.10.0\n */\n\nvar mapLeft = function mapLeft(f) {\n  return function (fa) {\n    return exports.separated(f(exports.left(fa)), exports.right(fa));\n  };\n};\n\nexports.mapLeft = mapLeft;\n/**\n * Map a pair of functions over the two type arguments of the bifunctor.\n *\n * @category Bifunctor\n * @since 2.10.0\n */\n\nvar bimap = function bimap(f, g) {\n  return function (fa) {\n    return exports.separated(f(exports.left(fa)), g(exports.right(fa)));\n  };\n};\n\nexports.bimap = bimap; // -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n\n/**\n * @category instances\n * @since 2.10.0\n */\n\nexports.URI = 'Separated';\n/**\n * @category instances\n * @since 2.10.0\n */\n\nexports.Bifunctor = {\n  URI: exports.URI,\n  mapLeft: _mapLeft,\n  bimap: _bimap\n};\n/**\n * @category instances\n * @since 2.10.0\n */\n\nexports.Functor = {\n  URI: exports.URI,\n  map: _map\n};\n/**\n * Derivable from `Functor`.\n *\n * @category combinators\n * @since 2.10.0\n */\n\nexports.flap =\n/*#_PURE_*/\nFunctor_1.flap(exports.Functor); // -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n\n/**\n * @since 2.10.0\n */\n\nvar left = function left(s) {\n  return s.left;\n};\n\nexports.left = left;\n/**\n * @since 2.10.0\n */\n\nvar right = function right(s) {\n  return s.right;\n};\n\nexports.right = right;","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/node_modules/fp-ts/lib/Separated.js"],"names":["Object","defineProperty","exports","value","right","left","flap","Functor","Bifunctor","URI","bimap","mapLeft","map","separated","function_1","require","Functor_1","_map","fa","f","pipe","_mapLeft","_bimap","g","s"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,KAAR,GAAgBF,OAAO,CAACG,IAAR,GAAeH,OAAO,CAACI,IAAR,GAAeJ,OAAO,CAACK,OAAR,GAAkBL,OAAO,CAACM,SAAR,GAAoBN,OAAO,CAACO,GAAR,GAAcP,OAAO,CAACQ,KAAR,GAAgBR,OAAO,CAACS,OAAR,GAAkBT,OAAO,CAACU,GAAR,GAAcV,OAAO,CAACW,SAAR,GAAoB,KAAK,CAA3K;;AACA,IAAIC,UAAU,GAAGC,OAAO,CAAC,YAAD,CAAxB;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAvB,C,CACA;AACA;AACA;;AACA;AACA;AACA;AACA;;;AACA,IAAIF,SAAS,GAAG,SAAZA,SAAY,CAAUR,IAAV,EAAgBD,KAAhB,EAAuB;AAAE,SAAQ;AAAEC,IAAAA,IAAI,EAAEA,IAAR;AAAcD,IAAAA,KAAK,EAAEA;AAArB,GAAR;AAAwC,CAAjF;;AACAF,OAAO,CAACW,SAAR,GAAoBA,SAApB,C,CACA;AACA;AACA;;AACA,IAAII,IAAI,GAAG,SAAPA,IAAO,CAAUC,EAAV,EAAcC,CAAd,EAAiB;AAAE,SAAOL,UAAU,CAACM,IAAX,CAAgBF,EAAhB,EAAoBhB,OAAO,CAACU,GAAR,CAAYO,CAAZ,CAApB,CAAP;AAA6C,CAA3E;;AACA,IAAIE,QAAQ,GAAG,SAAXA,QAAW,CAAUH,EAAV,EAAcC,CAAd,EAAiB;AAAE,SAAOL,UAAU,CAACM,IAAX,CAAgBF,EAAhB,EAAoBhB,OAAO,CAACS,OAAR,CAAgBQ,CAAhB,CAApB,CAAP;AAAiD,CAAnF;;AACA,IAAIG,MAAM,GAAG,SAATA,MAAS,CAAUJ,EAAV,EAAcK,CAAd,EAAiBJ,CAAjB,EAAoB;AAAE,SAAOL,UAAU,CAACM,IAAX,CAAgBF,EAAhB,EAAoBhB,OAAO,CAACQ,KAAR,CAAca,CAAd,EAAiBJ,CAAjB,CAApB,CAAP;AAAkD,CAArF,C,CACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIP,GAAG,GAAG,SAANA,GAAM,CAAUO,CAAV,EAAa;AAAE,SAAO,UAAUD,EAAV,EAAc;AAC1C,WAAOhB,OAAO,CAACW,SAAR,CAAkBX,OAAO,CAACG,IAAR,CAAaa,EAAb,CAAlB,EAAoCC,CAAC,CAACjB,OAAO,CAACE,KAAR,CAAcc,EAAd,CAAD,CAArC,CAAP;AACH,GAFwB;AAErB,CAFJ;;AAGAhB,OAAO,CAACU,GAAR,GAAcA,GAAd;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAID,OAAO,GAAG,SAAVA,OAAU,CAAUQ,CAAV,EAAa;AAAE,SAAO,UAAUD,EAAV,EAAc;AAC9C,WAAOhB,OAAO,CAACW,SAAR,CAAkBM,CAAC,CAACjB,OAAO,CAACG,IAAR,CAAaa,EAAb,CAAD,CAAnB,EAAuChB,OAAO,CAACE,KAAR,CAAcc,EAAd,CAAvC,CAAP;AACH,GAF4B;AAEzB,CAFJ;;AAGAhB,OAAO,CAACS,OAAR,GAAkBA,OAAlB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAID,KAAK,GAAG,SAARA,KAAQ,CAAUS,CAAV,EAAaI,CAAb,EAAgB;AAAE,SAAO,UAAUL,EAAV,EAAc;AAC/C,WAAOhB,OAAO,CAACW,SAAR,CAAkBM,CAAC,CAACjB,OAAO,CAACG,IAAR,CAAaa,EAAb,CAAD,CAAnB,EAAuCK,CAAC,CAACrB,OAAO,CAACE,KAAR,CAAcc,EAAd,CAAD,CAAxC,CAAP;AACH,GAF6B;AAE1B,CAFJ;;AAGAhB,OAAO,CAACQ,KAAR,GAAgBA,KAAhB,C,CACA;AACA;AACA;;AACA;AACA;AACA;AACA;;AACAR,OAAO,CAACO,GAAR,GAAc,WAAd;AACA;AACA;AACA;AACA;;AACAP,OAAO,CAACM,SAAR,GAAoB;AAChBC,EAAAA,GAAG,EAAEP,OAAO,CAACO,GADG;AAEhBE,EAAAA,OAAO,EAAEU,QAFO;AAGhBX,EAAAA,KAAK,EAAEY;AAHS,CAApB;AAKA;AACA;AACA;AACA;;AACApB,OAAO,CAACK,OAAR,GAAkB;AACdE,EAAAA,GAAG,EAAEP,OAAO,CAACO,GADC;AAEdG,EAAAA,GAAG,EAAEK;AAFS,CAAlB;AAIA;AACA;AACA;AACA;AACA;AACA;;AACAf,OAAO,CAACI,IAAR;AACA;AACAU,SAAS,CAACV,IAAV,CAAeJ,OAAO,CAACK,OAAvB,CAFA,C,CAGA;AACA;AACA;;AACA;AACA;AACA;;AACA,IAAIF,IAAI,GAAG,SAAPA,IAAO,CAAUmB,CAAV,EAAa;AAAE,SAAOA,CAAC,CAACnB,IAAT;AAAgB,CAA1C;;AACAH,OAAO,CAACG,IAAR,GAAeA,IAAf;AACA;AACA;AACA;;AACA,IAAID,KAAK,GAAG,SAARA,KAAQ,CAAUoB,CAAV,EAAa;AAAE,SAAOA,CAAC,CAACpB,KAAT;AAAiB,CAA5C;;AACAF,OAAO,CAACE,KAAR,GAAgBA,KAAhB","sourcesContent":["\"use strict\";\n/**\n * ```ts\n * interface Separated<E, A> {\n *    readonly left: E\n *    readonly right: A\n * }\n * ```\n *\n * Represents a result of separating a whole into two parts.\n *\n * @since 2.10.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.right = exports.left = exports.flap = exports.Functor = exports.Bifunctor = exports.URI = exports.bimap = exports.mapLeft = exports.map = exports.separated = void 0;\nvar function_1 = require(\"./function\");\nvar Functor_1 = require(\"./Functor\");\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * @category constructors\n * @since 2.10.0\n */\nvar separated = function (left, right) { return ({ left: left, right: right }); };\nexports.separated = separated;\n// -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\nvar _map = function (fa, f) { return function_1.pipe(fa, exports.map(f)); };\nvar _mapLeft = function (fa, f) { return function_1.pipe(fa, exports.mapLeft(f)); };\nvar _bimap = function (fa, g, f) { return function_1.pipe(fa, exports.bimap(g, f)); };\n// -------------------------------------------------------------------------------------\n// type class members\n// -------------------------------------------------------------------------------------\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category Functor\n * @since 2.10.0\n */\nvar map = function (f) { return function (fa) {\n    return exports.separated(exports.left(fa), f(exports.right(fa)));\n}; };\nexports.map = map;\n/**\n * Map a function over the first type argument of a bifunctor.\n *\n * @category Bifunctor\n * @since 2.10.0\n */\nvar mapLeft = function (f) { return function (fa) {\n    return exports.separated(f(exports.left(fa)), exports.right(fa));\n}; };\nexports.mapLeft = mapLeft;\n/**\n * Map a pair of functions over the two type arguments of the bifunctor.\n *\n * @category Bifunctor\n * @since 2.10.0\n */\nvar bimap = function (f, g) { return function (fa) {\n    return exports.separated(f(exports.left(fa)), g(exports.right(fa)));\n}; };\nexports.bimap = bimap;\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.10.0\n */\nexports.URI = 'Separated';\n/**\n * @category instances\n * @since 2.10.0\n */\nexports.Bifunctor = {\n    URI: exports.URI,\n    mapLeft: _mapLeft,\n    bimap: _bimap\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexports.Functor = {\n    URI: exports.URI,\n    map: _map\n};\n/**\n * Derivable from `Functor`.\n *\n * @category combinators\n * @since 2.10.0\n */\nexports.flap = \n/*#_PURE_*/\nFunctor_1.flap(exports.Functor);\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.10.0\n */\nvar left = function (s) { return s.left; };\nexports.left = left;\n/**\n * @since 2.10.0\n */\nvar right = function (s) { return s.right; };\nexports.right = right;\n"]},"metadata":{},"sourceType":"script"}