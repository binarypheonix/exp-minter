{"ast":null,"code":"import _regeneratorRuntime from \"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { StorageKey } from '..';\nimport { StorageManager } from './StorageManager';\nimport { PermissionValidator } from './PermissionValidator';\n/**\n * @internalapi\n *\n * The AccountManager provides CRUD functionality for account entities and persists them to the provided storage.\n */\n\nexport var AccountManager = /*#__PURE__*/function () {\n  function AccountManager(storage) {\n    _classCallCheck(this, AccountManager);\n\n    this.storageManager = new StorageManager(storage, StorageKey.ACCOUNTS);\n  }\n\n  _createClass(AccountManager, [{\n    key: \"getAccounts\",\n    value: function getAccounts() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this.storageManager.getAll());\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"getAccount\",\n    value: function getAccount(accountIdentifier) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.storageManager.getOne(function (account) {\n                  return account.accountIdentifier === accountIdentifier;\n                }));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"addAccount\",\n    value: function addAccount(accountInfo) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", this.storageManager.addOne(accountInfo, function (account) {\n                  return account.accountIdentifier === accountInfo.accountIdentifier;\n                }));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n  }, {\n    key: \"removeAccount\",\n    value: function removeAccount(accountIdentifier) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", this.storageManager.remove(function (account) {\n                  return account.accountIdentifier === accountIdentifier;\n                }));\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }, {\n    key: \"removeAccounts\",\n    value: function removeAccounts(accountIdentifiers) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", this.storageManager.remove(function (account) {\n                  return accountIdentifiers.includes(account.accountIdentifier);\n                }));\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n  }, {\n    key: \"removeAllAccounts\",\n    value: function removeAllAccounts() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.abrupt(\"return\", this.storageManager.removeAll());\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n    }\n  }, {\n    key: \"hasPermission\",\n    value: function hasPermission(message) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                return _context7.abrupt(\"return\", PermissionValidator.hasPermission(message, this.getAccount.bind(this), this.getAccounts.bind(this)));\n\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n    }\n  }]);\n\n  return AccountManager;\n}();","map":{"version":3,"sources":["../../../src/managers/AccountManager.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAkB,UAAlB,QAAgE,IAAhE;AACA,SAAS,cAAT,QAA+B,kBAA/B;AACA,SAAS,mBAAT,QAAoC,uBAApC;AAEA;;;;AAIG;;AACH,WAAa,cAAb;AAGE,0BAAY,OAAZ,EAA4B;AAAA;;AAC1B,SAAK,cAAL,GAAsB,IAAI,cAAJ,CAAmB,OAAnB,EAA4B,UAAU,CAAC,QAAvC,CAAtB;AACD;;AALH;AAAA;AAAA,WAOe,uBAAW;;;;;;iDACf,KAAK,cAAL,CAAoB,MAApB,E;;;;;;;;;AACR;AATH;AAAA;AAAA,WAWe,oBAAW,iBAAX,EAAoC;;;;;;kDACxC,KAAK,cAAL,CAAoB,MAApB,CAA2B,UAAC,OAAD;AAAA,yBAAa,OAAO,CAAC,iBAAR,KAA8B,iBAA3C;AAAA,iBAA3B,C;;;;;;;;;AACR;AAbH;AAAA;AAAA,WAee,oBAAW,WAAX,EAAmC;;;;;;kDACvC,KAAK,cAAL,CAAoB,MAApB,CACL,WADK,EAEL,UAAC,OAAD;AAAA,yBAAa,OAAO,CAAC,iBAAR,KAA8B,WAAW,CAAC,iBAAvD;AAAA,iBAFK,C;;;;;;;;;AAIR;AApBH;AAAA;AAAA,WAsBe,uBAAc,iBAAd,EAAuC;;;;;;kDAC3C,KAAK,cAAL,CAAoB,MAApB,CAA2B,UAAC,OAAD;AAAA,yBAAa,OAAO,CAAC,iBAAR,KAA8B,iBAA3C;AAAA,iBAA3B,C;;;;;;;;;AACR;AAxBH;AAAA;AAAA,WA0Be,wBAAe,kBAAf,EAA2C;;;;;;kDAC/C,KAAK,cAAL,CAAoB,MAApB,CAA2B,UAAC,OAAD;AAAA,yBAChC,kBAAkB,CAAC,QAAnB,CAA4B,OAAO,CAAC,iBAApC,CADgC;AAAA,iBAA3B,C;;;;;;;;;AAGR;AA9BH;AAAA;AAAA,WAgCe,6BAAiB;;;;;;kDACrB,KAAK,cAAL,CAAoB,SAApB,E;;;;;;;;;AACR;AAlCH;AAAA;AAAA,WAoCe,uBAAc,OAAd,EAAoC;;;;;;kDACxC,mBAAmB,CAAC,aAApB,CACL,OADK,EAEL,KAAK,UAAL,CAAgB,IAAhB,CAAqB,IAArB,CAFK,EAGL,KAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB,CAHK,C;;;;;;;;;AAKR;AA1CH;;AAAA;AAAA","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { StorageKey } from '..';\nimport { StorageManager } from './StorageManager';\nimport { PermissionValidator } from './PermissionValidator';\n/**\n * @internalapi\n *\n * The AccountManager provides CRUD functionality for account entities and persists them to the provided storage.\n */\nexport class AccountManager {\n    constructor(storage) {\n        this.storageManager = new StorageManager(storage, StorageKey.ACCOUNTS);\n    }\n    getAccounts() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.getAll();\n        });\n    }\n    getAccount(accountIdentifier) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.getOne((account) => account.accountIdentifier === accountIdentifier);\n        });\n    }\n    addAccount(accountInfo) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.addOne(accountInfo, (account) => account.accountIdentifier === accountInfo.accountIdentifier);\n        });\n    }\n    removeAccount(accountIdentifier) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.remove((account) => account.accountIdentifier === accountIdentifier);\n        });\n    }\n    removeAccounts(accountIdentifiers) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.remove((account) => accountIdentifiers.includes(account.accountIdentifier));\n        });\n    }\n    removeAllAccounts() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.removeAll();\n        });\n    }\n    hasPermission(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return PermissionValidator.hasPermission(message, this.getAccount.bind(this), this.getAccounts.bind(this));\n        });\n    }\n}\n//# sourceMappingURL=AccountManager.js.map"]},"metadata":{},"sourceType":"module"}