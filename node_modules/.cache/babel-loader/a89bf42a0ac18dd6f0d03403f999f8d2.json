{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.boundedNumber = void 0;\n/**\n * The `Bounded` type class represents totally ordered types that have an upper and lower boundary.\n *\n * Instances should satisfy the following law in addition to the `Ord` laws:\n *\n * - Bounded: `bottom <= a <= top`\n *\n * @since 2.0.0\n */\n\nvar Ord_1 = require(\"./Ord\"); // -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n\n/**\n * Use [`Bounded`](./number.ts.html#Bounded) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\n\nexports.boundedNumber = {\n  // tslint:disable-next-line: deprecation\n  equals: Ord_1.ordNumber.equals,\n  // tslint:disable-next-line: deprecation\n  compare: Ord_1.ordNumber.compare,\n  top: Infinity,\n  bottom: -Infinity\n};","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/node_modules/fp-ts/lib/Bounded.js"],"names":["Object","defineProperty","exports","value","boundedNumber","Ord_1","require","equals","ordNumber","compare","top","Infinity","bottom"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,aAAR,GAAwB,KAAK,CAA7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB,C,CACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAJ,OAAO,CAACE,aAAR,GAAwB;AACpB;AACAG,EAAAA,MAAM,EAAEF,KAAK,CAACG,SAAN,CAAgBD,MAFJ;AAGpB;AACAE,EAAAA,OAAO,EAAEJ,KAAK,CAACG,SAAN,CAAgBC,OAJL;AAKpBC,EAAAA,GAAG,EAAEC,QALe;AAMpBC,EAAAA,MAAM,EAAE,CAACD;AANW,CAAxB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.boundedNumber = void 0;\n/**\n * The `Bounded` type class represents totally ordered types that have an upper and lower boundary.\n *\n * Instances should satisfy the following law in addition to the `Ord` laws:\n *\n * - Bounded: `bottom <= a <= top`\n *\n * @since 2.0.0\n */\nvar Ord_1 = require(\"./Ord\");\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use [`Bounded`](./number.ts.html#Bounded) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexports.boundedNumber = {\n    // tslint:disable-next-line: deprecation\n    equals: Ord_1.ordNumber.equals,\n    // tslint:disable-next-line: deprecation\n    compare: Ord_1.ordNumber.compare,\n    top: Infinity,\n    bottom: -Infinity\n};\n"]},"metadata":{},"sourceType":"script"}