{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hole = exports.pipe = exports.untupled = exports.tupled = exports.absurd = exports.decrement = exports.increment = exports.tuple = exports.flow = exports.flip = exports.constVoid = exports.constUndefined = exports.constNull = exports.constFalse = exports.constTrue = exports.constant = exports.not = exports.unsafeCoerce = exports.identity = exports.getEndomorphismMonoid = exports.getRing = exports.getSemiring = exports.getMonoid = exports.getSemigroup = exports.getBooleanAlgebra = void 0; // -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n\n/**\n * @category instances\n * @since 2.10.0\n */\n\nvar getBooleanAlgebra = function getBooleanAlgebra(B) {\n  return function () {\n    return {\n      meet: function meet(x, y) {\n        return function (a) {\n          return B.meet(x(a), y(a));\n        };\n      },\n      join: function join(x, y) {\n        return function (a) {\n          return B.join(x(a), y(a));\n        };\n      },\n      zero: function zero() {\n        return B.zero;\n      },\n      one: function one() {\n        return B.one;\n      },\n      implies: function implies(x, y) {\n        return function (a) {\n          return B.implies(x(a), y(a));\n        };\n      },\n      not: function not(x) {\n        return function (a) {\n          return B.not(x(a));\n        };\n      }\n    };\n  };\n};\n\nexports.getBooleanAlgebra = getBooleanAlgebra;\n/**\n * Unary functions form a semigroup as long as you can provide a semigroup for the codomain.\n *\n * @example\n * import { Predicate, getSemigroup } from 'fp-ts/function'\n * import * as B from 'fp-ts/boolean'\n *\n * const f: Predicate<number> = (n) => n <= 2\n * const g: Predicate<number> = (n) => n >= 0\n *\n * const S1 = getSemigroup(B.SemigroupAll)<number>()\n *\n * assert.deepStrictEqual(S1.concat(f, g)(1), true)\n * assert.deepStrictEqual(S1.concat(f, g)(3), false)\n *\n * const S2 = getSemigroup(B.SemigroupAny)<number>()\n *\n * assert.deepStrictEqual(S2.concat(f, g)(1), true)\n * assert.deepStrictEqual(S2.concat(f, g)(3), true)\n *\n * @category instances\n * @since 2.10.0\n */\n\nvar getSemigroup = function getSemigroup(S) {\n  return function () {\n    return {\n      concat: function concat(f, g) {\n        return function (a) {\n          return S.concat(f(a), g(a));\n        };\n      }\n    };\n  };\n};\n\nexports.getSemigroup = getSemigroup;\n/**\n * Unary functions form a monoid as long as you can provide a monoid for the codomain.\n *\n * @example\n * import { Predicate, getMonoid } from 'fp-ts/function'\n * import * as B from 'fp-ts/boolean'\n *\n * const f: Predicate<number> = (n) => n <= 2\n * const g: Predicate<number> = (n) => n >= 0\n *\n * const M1 = getMonoid(B.MonoidAll)<number>()\n *\n * assert.deepStrictEqual(M1.concat(f, g)(1), true)\n * assert.deepStrictEqual(M1.concat(f, g)(3), false)\n *\n * const M2 = getMonoid(B.MonoidAny)<number>()\n *\n * assert.deepStrictEqual(M2.concat(f, g)(1), true)\n * assert.deepStrictEqual(M2.concat(f, g)(3), true)\n *\n * @category instances\n * @since 2.10.0\n */\n\nvar getMonoid = function getMonoid(M) {\n  var getSemigroupM = exports.getSemigroup(M);\n  return function () {\n    return {\n      concat: getSemigroupM().concat,\n      empty: function empty() {\n        return M.empty;\n      }\n    };\n  };\n};\n\nexports.getMonoid = getMonoid;\n/**\n * @category instances\n * @since 2.10.0\n */\n\nvar getSemiring = function getSemiring(S) {\n  return {\n    add: function add(f, g) {\n      return function (x) {\n        return S.add(f(x), g(x));\n      };\n    },\n    zero: function zero() {\n      return S.zero;\n    },\n    mul: function mul(f, g) {\n      return function (x) {\n        return S.mul(f(x), g(x));\n      };\n    },\n    one: function one() {\n      return S.one;\n    }\n  };\n};\n\nexports.getSemiring = getSemiring;\n/**\n * @category instances\n * @since 2.10.0\n */\n\nvar getRing = function getRing(R) {\n  var S = exports.getSemiring(R);\n  return {\n    add: S.add,\n    mul: S.mul,\n    one: S.one,\n    zero: S.zero,\n    sub: function sub(f, g) {\n      return function (x) {\n        return R.sub(f(x), g(x));\n      };\n    }\n  };\n};\n\nexports.getRing = getRing;\n/**\n * Endomorphism form a monoid where the `empty` value is the identity function.\n *\n * @category instances\n * @since 2.10.0\n */\n\nvar getEndomorphismMonoid = function getEndomorphismMonoid() {\n  return {\n    concat: function concat(x, y) {\n      return function (a) {\n        return y(x(a));\n      };\n    },\n    empty: identity\n  };\n};\n\nexports.getEndomorphismMonoid = getEndomorphismMonoid;\n/**\n * @since 2.0.0\n */\n\nfunction identity(a) {\n  return a;\n}\n\nexports.identity = identity;\n/**\n * @since 2.0.0\n */\n\nexports.unsafeCoerce = identity;\n/**\n * @since 2.0.0\n */\n\nfunction not(predicate) {\n  return function (a) {\n    return !predicate(a);\n  };\n}\n\nexports.not = not;\n/**\n * @since 2.0.0\n */\n\nfunction constant(a) {\n  return function () {\n    return a;\n  };\n}\n\nexports.constant = constant;\n/**\n * A thunk that returns always `true`.\n *\n * @since 2.0.0\n */\n\nexports.constTrue = /*#__PURE__*/constant(true);\n/**\n * A thunk that returns always `false`.\n *\n * @since 2.0.0\n */\n\nexports.constFalse = /*#__PURE__*/constant(false);\n/**\n * A thunk that returns always `null`.\n *\n * @since 2.0.0\n */\n\nexports.constNull = /*#__PURE__*/constant(null);\n/**\n * A thunk that returns always `undefined`.\n *\n * @since 2.0.0\n */\n\nexports.constUndefined = /*#__PURE__*/constant(undefined);\n/**\n * A thunk that returns always `void`.\n *\n * @since 2.0.0\n */\n\nexports.constVoid = exports.constUndefined;\n/**\n * Flips the order of the arguments of a function of two arguments.\n *\n * @since 2.0.0\n */\n\nfunction flip(f) {\n  return function (b, a) {\n    return f(a, b);\n  };\n}\n\nexports.flip = flip;\n\nfunction flow(ab, bc, cd, de, ef, fg, gh, hi, ij) {\n  switch (arguments.length) {\n    case 1:\n      return ab;\n\n    case 2:\n      return function () {\n        return bc(ab.apply(this, arguments));\n      };\n\n    case 3:\n      return function () {\n        return cd(bc(ab.apply(this, arguments)));\n      };\n\n    case 4:\n      return function () {\n        return de(cd(bc(ab.apply(this, arguments))));\n      };\n\n    case 5:\n      return function () {\n        return ef(de(cd(bc(ab.apply(this, arguments)))));\n      };\n\n    case 6:\n      return function () {\n        return fg(ef(de(cd(bc(ab.apply(this, arguments))))));\n      };\n\n    case 7:\n      return function () {\n        return gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))));\n      };\n\n    case 8:\n      return function () {\n        return hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments))))))));\n      };\n\n    case 9:\n      return function () {\n        return ij(hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))))));\n      };\n  }\n\n  return;\n}\n\nexports.flow = flow;\n/**\n * @since 2.0.0\n */\n\nfunction tuple() {\n  var t = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    t[_i] = arguments[_i];\n  }\n\n  return t;\n}\n\nexports.tuple = tuple;\n/**\n * @since 2.0.0\n */\n\nfunction increment(n) {\n  return n + 1;\n}\n\nexports.increment = increment;\n/**\n * @since 2.0.0\n */\n\nfunction decrement(n) {\n  return n - 1;\n}\n\nexports.decrement = decrement;\n/**\n * @since 2.0.0\n */\n\nfunction absurd(_) {\n  throw new Error('Called `absurd` function which should be uncallable');\n}\n\nexports.absurd = absurd;\n/**\n * Creates a tupled version of this function: instead of `n` arguments, it accepts a single tuple argument.\n *\n * @example\n * import { tupled } from 'fp-ts/function'\n *\n * const add = tupled((x: number, y: number): number => x + y)\n *\n * assert.strictEqual(add([1, 2]), 3)\n *\n * @since 2.4.0\n */\n\nfunction tupled(f) {\n  return function (a) {\n    return f.apply(void 0, a);\n  };\n}\n\nexports.tupled = tupled;\n/**\n * Inverse function of `tupled`\n *\n * @since 2.4.0\n */\n\nfunction untupled(f) {\n  return function () {\n    var a = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      a[_i] = arguments[_i];\n    }\n\n    return f(a);\n  };\n}\n\nexports.untupled = untupled;\n\nfunction pipe(a, ab, bc, cd, de, ef, fg, gh, hi, ij, jk, kl, lm, mn, no, op, pq, qr, rs, st) {\n  switch (arguments.length) {\n    case 1:\n      return a;\n\n    case 2:\n      return ab(a);\n\n    case 3:\n      return bc(ab(a));\n\n    case 4:\n      return cd(bc(ab(a)));\n\n    case 5:\n      return de(cd(bc(ab(a))));\n\n    case 6:\n      return ef(de(cd(bc(ab(a)))));\n\n    case 7:\n      return fg(ef(de(cd(bc(ab(a))))));\n\n    case 8:\n      return gh(fg(ef(de(cd(bc(ab(a)))))));\n\n    case 9:\n      return hi(gh(fg(ef(de(cd(bc(ab(a))))))));\n\n    case 10:\n      return ij(hi(gh(fg(ef(de(cd(bc(ab(a)))))))));\n\n    case 11:\n      return jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a))))))))));\n\n    case 12:\n      return kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a)))))))))));\n\n    case 13:\n      return lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a))))))))))));\n\n    case 14:\n      return mn(lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a)))))))))))));\n\n    case 15:\n      return no(mn(lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a))))))))))))));\n\n    case 16:\n      return op(no(mn(lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a)))))))))))))));\n\n    case 17:\n      return pq(op(no(mn(lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a))))))))))))))));\n\n    case 18:\n      return qr(pq(op(no(mn(lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a)))))))))))))))));\n\n    case 19:\n      return rs(qr(pq(op(no(mn(lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a))))))))))))))))));\n\n    case 20:\n      return st(rs(qr(pq(op(no(mn(lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a)))))))))))))))))));\n  }\n\n  return;\n}\n\nexports.pipe = pipe;\n/**\n * Type hole simulation\n *\n * @since 2.7.0\n */\n\nexports.hole = absurd;","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/node_modules/fp-ts/lib/function.js"],"names":["Object","defineProperty","exports","value","hole","pipe","untupled","tupled","absurd","decrement","increment","tuple","flow","flip","constVoid","constUndefined","constNull","constFalse","constTrue","constant","not","unsafeCoerce","identity","getEndomorphismMonoid","getRing","getSemiring","getMonoid","getSemigroup","getBooleanAlgebra","B","meet","x","y","a","join","zero","one","implies","S","concat","f","g","M","getSemigroupM","empty","add","mul","R","sub","predicate","undefined","b","ab","bc","cd","de","ef","fg","gh","hi","ij","arguments","length","apply","t","_i","n","_","Error","jk","kl","lm","mn","no","op","pq","qr","rs","st"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hole = exports.pipe = exports.untupled = exports.tupled = exports.absurd = exports.decrement = exports.increment = exports.tuple = exports.flow = exports.flip = exports.constVoid = exports.constUndefined = exports.constNull = exports.constFalse = exports.constTrue = exports.constant = exports.not = exports.unsafeCoerce = exports.identity = exports.getEndomorphismMonoid = exports.getRing = exports.getSemiring = exports.getMonoid = exports.getSemigroup = exports.getBooleanAlgebra = void 0;\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.10.0\n */\nvar getBooleanAlgebra = function (B) { return function () { return ({\n    meet: function (x, y) { return function (a) { return B.meet(x(a), y(a)); }; },\n    join: function (x, y) { return function (a) { return B.join(x(a), y(a)); }; },\n    zero: function () { return B.zero; },\n    one: function () { return B.one; },\n    implies: function (x, y) { return function (a) { return B.implies(x(a), y(a)); }; },\n    not: function (x) { return function (a) { return B.not(x(a)); }; }\n}); }; };\nexports.getBooleanAlgebra = getBooleanAlgebra;\n/**\n * Unary functions form a semigroup as long as you can provide a semigroup for the codomain.\n *\n * @example\n * import { Predicate, getSemigroup } from 'fp-ts/function'\n * import * as B from 'fp-ts/boolean'\n *\n * const f: Predicate<number> = (n) => n <= 2\n * const g: Predicate<number> = (n) => n >= 0\n *\n * const S1 = getSemigroup(B.SemigroupAll)<number>()\n *\n * assert.deepStrictEqual(S1.concat(f, g)(1), true)\n * assert.deepStrictEqual(S1.concat(f, g)(3), false)\n *\n * const S2 = getSemigroup(B.SemigroupAny)<number>()\n *\n * assert.deepStrictEqual(S2.concat(f, g)(1), true)\n * assert.deepStrictEqual(S2.concat(f, g)(3), true)\n *\n * @category instances\n * @since 2.10.0\n */\nvar getSemigroup = function (S) { return function () { return ({\n    concat: function (f, g) { return function (a) { return S.concat(f(a), g(a)); }; }\n}); }; };\nexports.getSemigroup = getSemigroup;\n/**\n * Unary functions form a monoid as long as you can provide a monoid for the codomain.\n *\n * @example\n * import { Predicate, getMonoid } from 'fp-ts/function'\n * import * as B from 'fp-ts/boolean'\n *\n * const f: Predicate<number> = (n) => n <= 2\n * const g: Predicate<number> = (n) => n >= 0\n *\n * const M1 = getMonoid(B.MonoidAll)<number>()\n *\n * assert.deepStrictEqual(M1.concat(f, g)(1), true)\n * assert.deepStrictEqual(M1.concat(f, g)(3), false)\n *\n * const M2 = getMonoid(B.MonoidAny)<number>()\n *\n * assert.deepStrictEqual(M2.concat(f, g)(1), true)\n * assert.deepStrictEqual(M2.concat(f, g)(3), true)\n *\n * @category instances\n * @since 2.10.0\n */\nvar getMonoid = function (M) {\n    var getSemigroupM = exports.getSemigroup(M);\n    return function () { return ({\n        concat: getSemigroupM().concat,\n        empty: function () { return M.empty; }\n    }); };\n};\nexports.getMonoid = getMonoid;\n/**\n * @category instances\n * @since 2.10.0\n */\nvar getSemiring = function (S) { return ({\n    add: function (f, g) { return function (x) { return S.add(f(x), g(x)); }; },\n    zero: function () { return S.zero; },\n    mul: function (f, g) { return function (x) { return S.mul(f(x), g(x)); }; },\n    one: function () { return S.one; }\n}); };\nexports.getSemiring = getSemiring;\n/**\n * @category instances\n * @since 2.10.0\n */\nvar getRing = function (R) {\n    var S = exports.getSemiring(R);\n    return {\n        add: S.add,\n        mul: S.mul,\n        one: S.one,\n        zero: S.zero,\n        sub: function (f, g) { return function (x) { return R.sub(f(x), g(x)); }; }\n    };\n};\nexports.getRing = getRing;\n/**\n * Endomorphism form a monoid where the `empty` value is the identity function.\n *\n * @category instances\n * @since 2.10.0\n */\nvar getEndomorphismMonoid = function () { return ({\n    concat: function (x, y) { return function (a) { return y(x(a)); }; },\n    empty: identity\n}); };\nexports.getEndomorphismMonoid = getEndomorphismMonoid;\n/**\n * @since 2.0.0\n */\nfunction identity(a) {\n    return a;\n}\nexports.identity = identity;\n/**\n * @since 2.0.0\n */\nexports.unsafeCoerce = identity;\n/**\n * @since 2.0.0\n */\nfunction not(predicate) {\n    return function (a) { return !predicate(a); };\n}\nexports.not = not;\n/**\n * @since 2.0.0\n */\nfunction constant(a) {\n    return function () { return a; };\n}\nexports.constant = constant;\n/**\n * A thunk that returns always `true`.\n *\n * @since 2.0.0\n */\nexports.constTrue = \n/*#__PURE__*/\nconstant(true);\n/**\n * A thunk that returns always `false`.\n *\n * @since 2.0.0\n */\nexports.constFalse = \n/*#__PURE__*/\nconstant(false);\n/**\n * A thunk that returns always `null`.\n *\n * @since 2.0.0\n */\nexports.constNull = \n/*#__PURE__*/\nconstant(null);\n/**\n * A thunk that returns always `undefined`.\n *\n * @since 2.0.0\n */\nexports.constUndefined = \n/*#__PURE__*/\nconstant(undefined);\n/**\n * A thunk that returns always `void`.\n *\n * @since 2.0.0\n */\nexports.constVoid = exports.constUndefined;\n/**\n * Flips the order of the arguments of a function of two arguments.\n *\n * @since 2.0.0\n */\nfunction flip(f) {\n    return function (b, a) { return f(a, b); };\n}\nexports.flip = flip;\nfunction flow(ab, bc, cd, de, ef, fg, gh, hi, ij) {\n    switch (arguments.length) {\n        case 1:\n            return ab;\n        case 2:\n            return function () {\n                return bc(ab.apply(this, arguments));\n            };\n        case 3:\n            return function () {\n                return cd(bc(ab.apply(this, arguments)));\n            };\n        case 4:\n            return function () {\n                return de(cd(bc(ab.apply(this, arguments))));\n            };\n        case 5:\n            return function () {\n                return ef(de(cd(bc(ab.apply(this, arguments)))));\n            };\n        case 6:\n            return function () {\n                return fg(ef(de(cd(bc(ab.apply(this, arguments))))));\n            };\n        case 7:\n            return function () {\n                return gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))));\n            };\n        case 8:\n            return function () {\n                return hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments))))))));\n            };\n        case 9:\n            return function () {\n                return ij(hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))))));\n            };\n    }\n    return;\n}\nexports.flow = flow;\n/**\n * @since 2.0.0\n */\nfunction tuple() {\n    var t = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        t[_i] = arguments[_i];\n    }\n    return t;\n}\nexports.tuple = tuple;\n/**\n * @since 2.0.0\n */\nfunction increment(n) {\n    return n + 1;\n}\nexports.increment = increment;\n/**\n * @since 2.0.0\n */\nfunction decrement(n) {\n    return n - 1;\n}\nexports.decrement = decrement;\n/**\n * @since 2.0.0\n */\nfunction absurd(_) {\n    throw new Error('Called `absurd` function which should be uncallable');\n}\nexports.absurd = absurd;\n/**\n * Creates a tupled version of this function: instead of `n` arguments, it accepts a single tuple argument.\n *\n * @example\n * import { tupled } from 'fp-ts/function'\n *\n * const add = tupled((x: number, y: number): number => x + y)\n *\n * assert.strictEqual(add([1, 2]), 3)\n *\n * @since 2.4.0\n */\nfunction tupled(f) {\n    return function (a) { return f.apply(void 0, a); };\n}\nexports.tupled = tupled;\n/**\n * Inverse function of `tupled`\n *\n * @since 2.4.0\n */\nfunction untupled(f) {\n    return function () {\n        var a = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            a[_i] = arguments[_i];\n        }\n        return f(a);\n    };\n}\nexports.untupled = untupled;\nfunction pipe(a, ab, bc, cd, de, ef, fg, gh, hi, ij, jk, kl, lm, mn, no, op, pq, qr, rs, st) {\n    switch (arguments.length) {\n        case 1:\n            return a;\n        case 2:\n            return ab(a);\n        case 3:\n            return bc(ab(a));\n        case 4:\n            return cd(bc(ab(a)));\n        case 5:\n            return de(cd(bc(ab(a))));\n        case 6:\n            return ef(de(cd(bc(ab(a)))));\n        case 7:\n            return fg(ef(de(cd(bc(ab(a))))));\n        case 8:\n            return gh(fg(ef(de(cd(bc(ab(a)))))));\n        case 9:\n            return hi(gh(fg(ef(de(cd(bc(ab(a))))))));\n        case 10:\n            return ij(hi(gh(fg(ef(de(cd(bc(ab(a)))))))));\n        case 11:\n            return jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a))))))))));\n        case 12:\n            return kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a)))))))))));\n        case 13:\n            return lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a))))))))))));\n        case 14:\n            return mn(lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a)))))))))))));\n        case 15:\n            return no(mn(lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a))))))))))))));\n        case 16:\n            return op(no(mn(lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a)))))))))))))));\n        case 17:\n            return pq(op(no(mn(lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a))))))))))))))));\n        case 18:\n            return qr(pq(op(no(mn(lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a)))))))))))))))));\n        case 19:\n            return rs(qr(pq(op(no(mn(lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a))))))))))))))))));\n        case 20:\n            return st(rs(qr(pq(op(no(mn(lm(kl(jk(ij(hi(gh(fg(ef(de(cd(bc(ab(a)))))))))))))))))));\n    }\n    return;\n}\nexports.pipe = pipe;\n/**\n * Type hole simulation\n *\n * @since 2.7.0\n */\nexports.hole = absurd;\n"]},"metadata":{},"sourceType":"script"}