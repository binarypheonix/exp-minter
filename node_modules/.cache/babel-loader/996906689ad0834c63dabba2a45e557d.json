{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function get() {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  }\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.semigroupProduct = exports.semigroupSum = exports.semigroupString = exports.getFunctionSemigroup = exports.semigroupAny = exports.semigroupAll = exports.fold = exports.getIntercalateSemigroup = exports.getMeetSemigroup = exports.getJoinSemigroup = exports.getDualSemigroup = exports.getStructSemigroup = exports.getTupleSemigroup = exports.getFirstSemigroup = exports.getLastSemigroup = exports.getObjectSemigroup = exports.concatAll = exports.semigroupVoid = exports.last = exports.first = exports.intercalate = exports.tuple = exports.struct = exports.reverse = exports.constant = exports.max = exports.min = void 0;\n/**\n * If a type `A` can form a `Semigroup` it has an **associative** binary operation.\n *\n * ```ts\n * interface Semigroup<A> {\n *   readonly concat: (x: A, y: A) => A\n * }\n * ```\n *\n * Associativity means the following equality must hold for any choice of `x`, `y`, and `z`.\n *\n * ```ts\n * concat(x, concat(y, z)) = concat(concat(x, y), z)\n * ```\n *\n * A common example of a semigroup is the type `string` with the operation `+`.\n *\n * ```ts\n * import { Semigroup } from 'fp-ts/Semigroup'\n *\n * const semigroupString: Semigroup<string> = {\n *   concat: (x, y) => x + y\n * }\n *\n * const x = 'x'\n * const y = 'y'\n * const z = 'z'\n *\n * semigroupString.concat(x, y) // 'xy'\n *\n * semigroupString.concat(x, semigroupString.concat(y, z)) // 'xyz'\n *\n * semigroupString.concat(semigroupString.concat(x, y), z) // 'xyz'\n * ```\n *\n * *Adapted from https://typelevel.org/cats*\n *\n * @since 2.0.0\n */\n\nvar function_1 = require(\"./function\");\n\nvar _ = __importStar(require(\"./internal\"));\n\nvar Or = __importStar(require(\"./Ord\")); // -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n\n/**\n * Get a semigroup where `concat` will return the minimum, based on the provided order.\n *\n * @example\n * import * as N from 'fp-ts/number'\n * import * as S from 'fp-ts/Semigroup'\n *\n * const S1 = S.min(N.Ord)\n *\n * assert.deepStrictEqual(S1.concat(1, 2), 1)\n *\n * @category constructors\n * @since 2.10.0\n */\n\n\nvar min = function min(O) {\n  return {\n    concat: Or.min(O)\n  };\n};\n\nexports.min = min;\n/**\n * Get a semigroup where `concat` will return the maximum, based on the provided order.\n *\n * @example\n * import * as N from 'fp-ts/number'\n * import * as S from 'fp-ts/Semigroup'\n *\n * const S1 = S.max(N.Ord)\n *\n * assert.deepStrictEqual(S1.concat(1, 2), 2)\n *\n * @category constructors\n * @since 2.10.0\n */\n\nvar max = function max(O) {\n  return {\n    concat: Or.max(O)\n  };\n};\n\nexports.max = max;\n/**\n * @category constructors\n * @since 2.10.0\n */\n\nvar constant = function constant(a) {\n  return {\n    concat: function concat() {\n      return a;\n    }\n  };\n};\n\nexports.constant = constant; // -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n\n/**\n * The dual of a `Semigroup`, obtained by swapping the arguments of `concat`.\n *\n * @example\n * import { reverse } from 'fp-ts/Semigroup'\n * import * as S from 'fp-ts/string'\n *\n * assert.deepStrictEqual(reverse(S.Semigroup).concat('a', 'b'), 'ba')\n *\n * @category combinators\n * @since 2.10.0\n */\n\nvar reverse = function reverse(S) {\n  return {\n    concat: function concat(x, y) {\n      return S.concat(y, x);\n    }\n  };\n};\n\nexports.reverse = reverse;\n/**\n * Given a struct of semigroups returns a semigroup for the struct.\n *\n * @example\n * import { struct } from 'fp-ts/Semigroup'\n * import * as N from 'fp-ts/number'\n *\n * interface Point {\n *   readonly x: number\n *   readonly y: number\n * }\n *\n * const S = struct<Point>({\n *   x: N.SemigroupSum,\n *   y: N.SemigroupSum\n * })\n *\n * assert.deepStrictEqual(S.concat({ x: 1, y: 2 }, { x: 3, y: 4 }), { x: 4, y: 6 })\n *\n * @category combinators\n * @since 2.10.0\n */\n\nvar struct = function struct(semigroups) {\n  return {\n    concat: function concat(first, second) {\n      var r = {};\n\n      for (var k in semigroups) {\n        if (_.has.call(semigroups, k)) {\n          r[k] = semigroups[k].concat(first[k], second[k]);\n        }\n      }\n\n      return r;\n    }\n  };\n};\n\nexports.struct = struct;\n/**\n * Given a tuple of semigroups returns a semigroup for the tuple.\n *\n * @example\n * import { tuple } from 'fp-ts/Semigroup'\n * import * as B from 'fp-ts/boolean'\n * import * as N from 'fp-ts/number'\n * import * as S from 'fp-ts/string'\n *\n * const S1 = tuple(S.Semigroup, N.SemigroupSum)\n * assert.deepStrictEqual(S1.concat(['a', 1], ['b', 2]), ['ab', 3])\n *\n * const S2 = tuple(S.Semigroup, N.SemigroupSum, B.SemigroupAll)\n * assert.deepStrictEqual(S2.concat(['a', 1, true], ['b', 2, false]), ['ab', 3, false])\n *\n * @category combinators\n * @since 2.10.0\n */\n\nvar tuple = function tuple() {\n  var semigroups = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    semigroups[_i] = arguments[_i];\n  }\n\n  return {\n    concat: function concat(first, second) {\n      return semigroups.map(function (s, i) {\n        return s.concat(first[i], second[i]);\n      });\n    }\n  };\n};\n\nexports.tuple = tuple;\n/**\n * Between each pair of elements insert `middle`.\n *\n * @example\n * import { intercalate } from 'fp-ts/Semigroup'\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * const S1 = pipe(S.Semigroup, intercalate(' + '))\n *\n * assert.strictEqual(S1.concat('a', 'b'), 'a + b')\n *\n * @category combinators\n * @since 2.10.0\n */\n\nvar intercalate = function intercalate(middle) {\n  return function (S) {\n    return {\n      concat: function concat(x, y) {\n        return S.concat(x, S.concat(middle, y));\n      }\n    };\n  };\n};\n\nexports.intercalate = intercalate; // -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n\n/**\n * Always return the first argument.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.first<number>().concat(1, 2), 1)\n *\n * @category instances\n * @since 2.10.0\n */\n\nvar first = function first() {\n  return {\n    concat: function_1.identity\n  };\n};\n\nexports.first = first;\n/**\n * Always return the last argument.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.last<number>().concat(1, 2), 2)\n *\n * @category instances\n * @since 2.10.0\n */\n\nvar last = function last() {\n  return {\n    concat: function concat(_, y) {\n      return y;\n    }\n  };\n};\n\nexports.last = last;\n/**\n * @category instances\n * @since 2.0.0\n */\n\nexports.semigroupVoid = exports.constant(undefined); // -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n\n/**\n * Given a sequence of `as`, concat them and return the total.\n *\n * If `as` is empty, return the provided `startWith` value.\n *\n * @example\n * import { concatAll } from 'fp-ts/Semigroup'\n * import * as N from 'fp-ts/number'\n *\n * const sum = concatAll(N.SemigroupSum)(0)\n *\n * assert.deepStrictEqual(sum([1, 2, 3]), 6)\n * assert.deepStrictEqual(sum([]), 0)\n *\n * @since 2.10.0\n */\n\nvar concatAll = function concatAll(S) {\n  return function (startWith) {\n    return function (as) {\n      return as.reduce(S.concat, startWith);\n    };\n  };\n};\n\nexports.concatAll = concatAll; // -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n\n/**\n * Use [`getAssignSemigroup`](./struct.ts.html#getAssignSemigroup) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nvar getObjectSemigroup = function getObjectSemigroup() {\n  return {\n    concat: function concat(first, second) {\n      return Object.assign({}, first, second);\n    }\n  };\n};\n\nexports.getObjectSemigroup = getObjectSemigroup;\n/**\n * Use [`last`](#last) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexports.getLastSemigroup = exports.last;\n/**\n * Use [`first`](#first) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexports.getFirstSemigroup = exports.first;\n/**\n * Use [`tuple`](#tuple) instead.\n *\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\n\nexports.getTupleSemigroup = exports.tuple;\n/**\n * Use [`struct`](#struct) instead.\n *\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\n\nexports.getStructSemigroup = exports.struct;\n/**\n * Use [`reverse`](#reverse) instead.\n *\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\n\nexports.getDualSemigroup = exports.reverse;\n/**\n * Use [`max`](#max) instead.\n *\n * @category constructors\n * @since 2.0.0\n * @deprecated\n */\n\nexports.getJoinSemigroup = exports.max;\n/**\n * Use [`min`](#min) instead.\n *\n * @category constructors\n * @since 2.0.0\n * @deprecated\n */\n\nexports.getMeetSemigroup = exports.min;\n/**\n * Use [`intercalate`](#intercalate) instead.\n *\n * @category combinators\n * @since 2.5.0\n * @deprecated\n */\n\nexports.getIntercalateSemigroup = exports.intercalate;\n\nfunction fold(S) {\n  var concatAllS = exports.concatAll(S);\n  return function (startWith, as) {\n    return as === undefined ? concatAllS(startWith) : concatAllS(startWith)(as);\n  };\n}\n\nexports.fold = fold;\n/**\n * Use [`SemigroupAll`](./boolean.ts.html#SemigroupAll) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexports.semigroupAll = {\n  concat: function concat(x, y) {\n    return x && y;\n  }\n};\n/**\n * Use [`SemigroupAny`](./boolean.ts.html#SemigroupAny) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexports.semigroupAny = {\n  concat: function concat(x, y) {\n    return x || y;\n  }\n};\n/**\n * Use [`getSemigroup`](./function.ts.html#getSemigroup) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexports.getFunctionSemigroup = function_1.getSemigroup;\n/**\n * Use [`Semigroup`](./string.ts.html#Semigroup) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexports.semigroupString = {\n  concat: function concat(x, y) {\n    return x + y;\n  }\n};\n/**\n * Use [`SemigroupSum`](./number.ts.html#SemigroupSum) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexports.semigroupSum = {\n  concat: function concat(x, y) {\n    return x + y;\n  }\n};\n/**\n * Use [`SemigroupProduct`](./number.ts.html#SemigroupProduct) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexports.semigroupProduct = {\n  concat: function concat(x, y) {\n    return x * y;\n  }\n};","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/node_modules/fp-ts/lib/Semigroup.js"],"names":["__createBinding","Object","create","o","m","k","k2","undefined","defineProperty","enumerable","get","__setModuleDefault","v","value","__importStar","mod","__esModule","result","prototype","hasOwnProperty","call","exports","semigroupProduct","semigroupSum","semigroupString","getFunctionSemigroup","semigroupAny","semigroupAll","fold","getIntercalateSemigroup","getMeetSemigroup","getJoinSemigroup","getDualSemigroup","getStructSemigroup","getTupleSemigroup","getFirstSemigroup","getLastSemigroup","getObjectSemigroup","concatAll","semigroupVoid","last","first","intercalate","tuple","struct","reverse","constant","max","min","function_1","require","_","Or","O","concat","a","S","x","y","semigroups","second","r","has","_i","arguments","length","map","s","i","middle","identity","startWith","as","reduce","assign","concatAllS","getSemigroup"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.semigroupProduct = exports.semigroupSum = exports.semigroupString = exports.getFunctionSemigroup = exports.semigroupAny = exports.semigroupAll = exports.fold = exports.getIntercalateSemigroup = exports.getMeetSemigroup = exports.getJoinSemigroup = exports.getDualSemigroup = exports.getStructSemigroup = exports.getTupleSemigroup = exports.getFirstSemigroup = exports.getLastSemigroup = exports.getObjectSemigroup = exports.concatAll = exports.semigroupVoid = exports.last = exports.first = exports.intercalate = exports.tuple = exports.struct = exports.reverse = exports.constant = exports.max = exports.min = void 0;\n/**\n * If a type `A` can form a `Semigroup` it has an **associative** binary operation.\n *\n * ```ts\n * interface Semigroup<A> {\n *   readonly concat: (x: A, y: A) => A\n * }\n * ```\n *\n * Associativity means the following equality must hold for any choice of `x`, `y`, and `z`.\n *\n * ```ts\n * concat(x, concat(y, z)) = concat(concat(x, y), z)\n * ```\n *\n * A common example of a semigroup is the type `string` with the operation `+`.\n *\n * ```ts\n * import { Semigroup } from 'fp-ts/Semigroup'\n *\n * const semigroupString: Semigroup<string> = {\n *   concat: (x, y) => x + y\n * }\n *\n * const x = 'x'\n * const y = 'y'\n * const z = 'z'\n *\n * semigroupString.concat(x, y) // 'xy'\n *\n * semigroupString.concat(x, semigroupString.concat(y, z)) // 'xyz'\n *\n * semigroupString.concat(semigroupString.concat(x, y), z) // 'xyz'\n * ```\n *\n * *Adapted from https://typelevel.org/cats*\n *\n * @since 2.0.0\n */\nvar function_1 = require(\"./function\");\nvar _ = __importStar(require(\"./internal\"));\nvar Or = __importStar(require(\"./Ord\"));\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * Get a semigroup where `concat` will return the minimum, based on the provided order.\n *\n * @example\n * import * as N from 'fp-ts/number'\n * import * as S from 'fp-ts/Semigroup'\n *\n * const S1 = S.min(N.Ord)\n *\n * assert.deepStrictEqual(S1.concat(1, 2), 1)\n *\n * @category constructors\n * @since 2.10.0\n */\nvar min = function (O) { return ({\n    concat: Or.min(O)\n}); };\nexports.min = min;\n/**\n * Get a semigroup where `concat` will return the maximum, based on the provided order.\n *\n * @example\n * import * as N from 'fp-ts/number'\n * import * as S from 'fp-ts/Semigroup'\n *\n * const S1 = S.max(N.Ord)\n *\n * assert.deepStrictEqual(S1.concat(1, 2), 2)\n *\n * @category constructors\n * @since 2.10.0\n */\nvar max = function (O) { return ({\n    concat: Or.max(O)\n}); };\nexports.max = max;\n/**\n * @category constructors\n * @since 2.10.0\n */\nvar constant = function (a) { return ({\n    concat: function () { return a; }\n}); };\nexports.constant = constant;\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * The dual of a `Semigroup`, obtained by swapping the arguments of `concat`.\n *\n * @example\n * import { reverse } from 'fp-ts/Semigroup'\n * import * as S from 'fp-ts/string'\n *\n * assert.deepStrictEqual(reverse(S.Semigroup).concat('a', 'b'), 'ba')\n *\n * @category combinators\n * @since 2.10.0\n */\nvar reverse = function (S) { return ({\n    concat: function (x, y) { return S.concat(y, x); }\n}); };\nexports.reverse = reverse;\n/**\n * Given a struct of semigroups returns a semigroup for the struct.\n *\n * @example\n * import { struct } from 'fp-ts/Semigroup'\n * import * as N from 'fp-ts/number'\n *\n * interface Point {\n *   readonly x: number\n *   readonly y: number\n * }\n *\n * const S = struct<Point>({\n *   x: N.SemigroupSum,\n *   y: N.SemigroupSum\n * })\n *\n * assert.deepStrictEqual(S.concat({ x: 1, y: 2 }, { x: 3, y: 4 }), { x: 4, y: 6 })\n *\n * @category combinators\n * @since 2.10.0\n */\nvar struct = function (semigroups) { return ({\n    concat: function (first, second) {\n        var r = {};\n        for (var k in semigroups) {\n            if (_.has.call(semigroups, k)) {\n                r[k] = semigroups[k].concat(first[k], second[k]);\n            }\n        }\n        return r;\n    }\n}); };\nexports.struct = struct;\n/**\n * Given a tuple of semigroups returns a semigroup for the tuple.\n *\n * @example\n * import { tuple } from 'fp-ts/Semigroup'\n * import * as B from 'fp-ts/boolean'\n * import * as N from 'fp-ts/number'\n * import * as S from 'fp-ts/string'\n *\n * const S1 = tuple(S.Semigroup, N.SemigroupSum)\n * assert.deepStrictEqual(S1.concat(['a', 1], ['b', 2]), ['ab', 3])\n *\n * const S2 = tuple(S.Semigroup, N.SemigroupSum, B.SemigroupAll)\n * assert.deepStrictEqual(S2.concat(['a', 1, true], ['b', 2, false]), ['ab', 3, false])\n *\n * @category combinators\n * @since 2.10.0\n */\nvar tuple = function () {\n    var semigroups = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        semigroups[_i] = arguments[_i];\n    }\n    return ({\n        concat: function (first, second) { return semigroups.map(function (s, i) { return s.concat(first[i], second[i]); }); }\n    });\n};\nexports.tuple = tuple;\n/**\n * Between each pair of elements insert `middle`.\n *\n * @example\n * import { intercalate } from 'fp-ts/Semigroup'\n * import * as S from 'fp-ts/string'\n * import { pipe } from 'fp-ts/function'\n *\n * const S1 = pipe(S.Semigroup, intercalate(' + '))\n *\n * assert.strictEqual(S1.concat('a', 'b'), 'a + b')\n *\n * @category combinators\n * @since 2.10.0\n */\nvar intercalate = function (middle) { return function (S) { return ({\n    concat: function (x, y) { return S.concat(x, S.concat(middle, y)); }\n}); }; };\nexports.intercalate = intercalate;\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * Always return the first argument.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.first<number>().concat(1, 2), 1)\n *\n * @category instances\n * @since 2.10.0\n */\nvar first = function () { return ({ concat: function_1.identity }); };\nexports.first = first;\n/**\n * Always return the last argument.\n *\n * @example\n * import * as S from 'fp-ts/Semigroup'\n *\n * assert.deepStrictEqual(S.last<number>().concat(1, 2), 2)\n *\n * @category instances\n * @since 2.10.0\n */\nvar last = function () { return ({ concat: function (_, y) { return y; } }); };\nexports.last = last;\n/**\n * @category instances\n * @since 2.0.0\n */\nexports.semigroupVoid = exports.constant(undefined);\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * Given a sequence of `as`, concat them and return the total.\n *\n * If `as` is empty, return the provided `startWith` value.\n *\n * @example\n * import { concatAll } from 'fp-ts/Semigroup'\n * import * as N from 'fp-ts/number'\n *\n * const sum = concatAll(N.SemigroupSum)(0)\n *\n * assert.deepStrictEqual(sum([1, 2, 3]), 6)\n * assert.deepStrictEqual(sum([]), 0)\n *\n * @since 2.10.0\n */\nvar concatAll = function (S) { return function (startWith) { return function (as) {\n    return as.reduce(S.concat, startWith);\n}; }; };\nexports.concatAll = concatAll;\n// -------------------------------------------------------------------------------------\n// deprecated\n// -------------------------------------------------------------------------------------\n/**\n * Use [`getAssignSemigroup`](./struct.ts.html#getAssignSemigroup) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nvar getObjectSemigroup = function () { return ({\n    concat: function (first, second) { return Object.assign({}, first, second); }\n}); };\nexports.getObjectSemigroup = getObjectSemigroup;\n/**\n * Use [`last`](#last) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexports.getLastSemigroup = exports.last;\n/**\n * Use [`first`](#first) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexports.getFirstSemigroup = exports.first;\n/**\n * Use [`tuple`](#tuple) instead.\n *\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\nexports.getTupleSemigroup = exports.tuple;\n/**\n * Use [`struct`](#struct) instead.\n *\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\nexports.getStructSemigroup = exports.struct;\n/**\n * Use [`reverse`](#reverse) instead.\n *\n * @category combinators\n * @since 2.0.0\n * @deprecated\n */\nexports.getDualSemigroup = exports.reverse;\n/**\n * Use [`max`](#max) instead.\n *\n * @category constructors\n * @since 2.0.0\n * @deprecated\n */\nexports.getJoinSemigroup = exports.max;\n/**\n * Use [`min`](#min) instead.\n *\n * @category constructors\n * @since 2.0.0\n * @deprecated\n */\nexports.getMeetSemigroup = exports.min;\n/**\n * Use [`intercalate`](#intercalate) instead.\n *\n * @category combinators\n * @since 2.5.0\n * @deprecated\n */\nexports.getIntercalateSemigroup = exports.intercalate;\nfunction fold(S) {\n    var concatAllS = exports.concatAll(S);\n    return function (startWith, as) { return (as === undefined ? concatAllS(startWith) : concatAllS(startWith)(as)); };\n}\nexports.fold = fold;\n/**\n * Use [`SemigroupAll`](./boolean.ts.html#SemigroupAll) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexports.semigroupAll = {\n    concat: function (x, y) { return x && y; }\n};\n/**\n * Use [`SemigroupAny`](./boolean.ts.html#SemigroupAny) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexports.semigroupAny = {\n    concat: function (x, y) { return x || y; }\n};\n/**\n * Use [`getSemigroup`](./function.ts.html#getSemigroup) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexports.getFunctionSemigroup = function_1.getSemigroup;\n/**\n * Use [`Semigroup`](./string.ts.html#Semigroup) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexports.semigroupString = {\n    concat: function (x, y) { return x + y; }\n};\n/**\n * Use [`SemigroupSum`](./number.ts.html#SemigroupSum) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexports.semigroupSum = {\n    concat: function (x, y) { return x + y; }\n};\n/**\n * Use [`SemigroupProduct`](./number.ts.html#SemigroupProduct) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexports.semigroupProduct = {\n    concat: function (x, y) { return x * y; }\n};\n"]},"metadata":{},"sourceType":"script"}