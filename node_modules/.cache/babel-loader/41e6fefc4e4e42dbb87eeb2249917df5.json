{"ast":null,"code":"import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { Minter } from '../../lib/system';\nimport { ErrorKind } from './errors';\nexport const connectWallet = createAsyncThunk('wallet/connect', async (_arg, {\n  getState,\n  rejectWithValue\n  /* , dispatch */\n\n}) => {\n  const {\n    system\n  } = getState();\n\n  if (system.status === 'ToolkitConnected') {\n    // TODO: Implement custom UI behavior by overriding Beacon events\n    // NOTE: These event handlers will be passed to the Beacon DAppClient *once*\n    // as the client is cached after its first instantiation\n    // eslint-disable-next-line\n    const eventHandlers = {\n      PERMISSION_REQUEST_SENT: {\n        handler(data) {\n          console.log(data);\n        }\n\n      },\n      PERMISSION_REQUEST_SUCCESS: {\n        handler(data) {\n          console.log(data);\n        }\n\n      },\n      PERMISSION_REQUEST_ERROR: {\n        handler(data) {\n          console.log(data);\n        }\n\n      },\n      OPERATION_REQUEST_SENT: {\n        handler(data) {\n          console.log(data);\n        }\n\n      },\n      OPERATION_REQUEST_SUCCESS: {\n        handler(data) {\n          console.log(data);\n        }\n\n      },\n      OPERATION_REQUEST_ERROR: {\n        handler(data) {\n          console.log(data);\n        }\n\n      },\n      ACKNOWLEDGE_RECEIVED: {\n        handler(data) {\n          console.log(data);\n        }\n\n      }\n    };\n\n    try {\n      return await Minter.connectWallet(system\n      /*eventHandlers*/\n      );\n    } catch (e) {\n      return rejectWithValue({\n        kind: ErrorKind.WalletPermissionRequestDenied,\n        message: 'Wallet permission request denied'\n      });\n    }\n  }\n\n  return rejectWithValue({\n    kind: ErrorKind.WalletNotConnected,\n    message: 'Wallet already connected'\n  });\n});\nexport const reconnectWallet = createAsyncThunk('wallet/reconnect', async (_arg, {\n  getState,\n  rejectWithValue\n}) => {\n  const {\n    system\n  } = getState();\n\n  if (system.status === 'ToolkitConnected') {\n    return await Minter.reconnectWallet(system);\n  }\n\n  return rejectWithValue({\n    kind: ErrorKind.WalletNotConnected,\n    message: 'Wallet already connected'\n  });\n});\nexport const disconnectWallet = createAsyncThunk('wallet/disconnect', async (_arg, {\n  getState,\n  rejectWithValue\n}) => {\n  const {\n    system\n  } = getState();\n\n  if (system.status === 'WalletConnected') {\n    return await Minter.disconnectWallet(system);\n  }\n\n  return rejectWithValue({\n    kind: ErrorKind.WalletNotConnected,\n    message: 'No wallet to disconnect from '\n  });\n});","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/src/reducer/async/wallet.ts"],"names":["createAsyncThunk","Minter","ErrorKind","connectWallet","_arg","getState","rejectWithValue","system","status","eventHandlers","PERMISSION_REQUEST_SENT","handler","data","console","log","PERMISSION_REQUEST_SUCCESS","PERMISSION_REQUEST_ERROR","OPERATION_REQUEST_SENT","OPERATION_REQUEST_SUCCESS","OPERATION_REQUEST_ERROR","ACKNOWLEDGE_RECEIVED","e","kind","WalletPermissionRequestDenied","message","WalletNotConnected","reconnectWallet","disconnectWallet"],"mappings":"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","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { State } from '..';\nimport { Minter, SystemWithToolkit, SystemWithWallet } from '../../lib/system';\nimport { ErrorKind, RejectValue } from './errors';\n\ntype Options = {\n  state: State;\n  rejectValue: RejectValue;\n};\n\nexport const connectWallet = createAsyncThunk<\n  SystemWithWallet,\n  undefined,\n  Options\n>(\n  'wallet/connect',\n  async (_arg, { getState, rejectWithValue /* , dispatch */ }) => {\n    const { system } = getState();\n    if (system.status === 'ToolkitConnected') {\n      // TODO: Implement custom UI behavior by overriding Beacon events\n      // NOTE: These event handlers will be passed to the Beacon DAppClient *once*\n      // as the client is cached after its first instantiation\n      // eslint-disable-next-line\n      const eventHandlers: Parameters<typeof Minter.connectWallet>[1] = {\n        PERMISSION_REQUEST_SENT: {\n          handler(data) {\n            console.log(data);\n          }\n        },\n        PERMISSION_REQUEST_SUCCESS: {\n          handler(data) {\n            console.log(data);\n          }\n        },\n        PERMISSION_REQUEST_ERROR: {\n          handler(data) {\n            console.log(data);\n          }\n        },\n        OPERATION_REQUEST_SENT: {\n          handler(data) {\n            console.log(data);\n          }\n        },\n        OPERATION_REQUEST_SUCCESS: {\n          handler(data) {\n            console.log(data);\n          }\n        },\n        OPERATION_REQUEST_ERROR: {\n          handler(data) {\n            console.log(data);\n          }\n        },\n        ACKNOWLEDGE_RECEIVED: {\n          handler(data) {\n            console.log(data);\n          }\n        }\n      };\n      try {\n        return await Minter.connectWallet(system /*eventHandlers*/);\n      } catch (e) {\n        return rejectWithValue({\n          kind: ErrorKind.WalletPermissionRequestDenied,\n          message: 'Wallet permission request denied'\n        });\n      }\n    }\n    return rejectWithValue({\n      kind: ErrorKind.WalletNotConnected,\n      message: 'Wallet already connected'\n    });\n  }\n);\n\nexport const reconnectWallet = createAsyncThunk<\n  SystemWithWallet | SystemWithToolkit,\n  undefined,\n  Options\n>('wallet/reconnect', async (_arg, { getState, rejectWithValue }) => {\n  const { system } = getState();\n  if (system.status === 'ToolkitConnected') {\n    return await Minter.reconnectWallet(system);\n  }\n  return rejectWithValue({\n    kind: ErrorKind.WalletNotConnected,\n    message: 'Wallet already connected'\n  });\n});\n\nexport const disconnectWallet = createAsyncThunk<\n  SystemWithToolkit,\n  undefined,\n  Options\n>('wallet/disconnect', async (_arg, { getState, rejectWithValue }) => {\n  const { system } = getState();\n  if (system.status === 'WalletConnected') {\n    return await Minter.disconnectWallet(system);\n  }\n  return rejectWithValue({\n    kind: ErrorKind.WalletNotConnected,\n    message: 'No wallet to disconnect from '\n  });\n});\n"]},"metadata":{},"sourceType":"module"}