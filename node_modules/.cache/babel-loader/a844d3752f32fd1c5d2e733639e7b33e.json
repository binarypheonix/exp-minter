{"ast":null,"code":"import _regeneratorRuntime from \"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n/* eslint-disable prefer-arrow/prefer-arrow-functions */\n\n\nfunction fixArrayType(array) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return array;\n}\n/* eslint-enable prefer-arrow/prefer-arrow-functions */\n\n/**\n * @internalapi\n *\n * The StorageManager provides CRUD functionality for specific entities and persists them to the provided storage.\n */\n\n\nexport var StorageManager = /*#__PURE__*/function () {\n  function StorageManager(storage, storageKey) {\n    _classCallCheck(this, StorageManager);\n\n    this.storage = storage;\n    this.storageKey = storageKey;\n  }\n\n  _createClass(StorageManager, [{\n    key: \"getAll\",\n    value: function getAll() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this.storage.get(this.storageKey));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"getOne\",\n    value: function getOne(predicate) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var entities;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.storage.get(this.storageKey);\n\n              case 2:\n                entities = _context2.sent;\n                return _context2.abrupt(\"return\", fixArrayType(entities).find(predicate));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"addOne\",\n    value: function addOne(element, predicate) {\n      var overwrite = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var entities, i;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.storage.get(this.storageKey);\n\n              case 2:\n                entities = _context3.sent;\n\n                if (!fixArrayType(entities).some(predicate)) {\n                  fixArrayType(entities).push(element);\n                } else if (overwrite) {\n                  for (i = 0; i < entities.length; i++) {\n                    if (predicate(fixArrayType(entities)[i])) {\n                      entities[i] = element;\n                    }\n                  }\n                }\n\n                return _context3.abrupt(\"return\", this.storage.set(this.storageKey, entities));\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(predicate) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var entities, filteredEntities;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.storage.get(this.storageKey);\n\n              case 2:\n                entities = _context4.sent;\n                filteredEntities = fixArrayType(entities).filter(function (entity) {\n                  return !predicate(entity);\n                }); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n                return _context4.abrupt(\"return\", this.storage.set(this.storageKey, filteredEntities));\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }, {\n    key: \"removeAll\",\n    value: function removeAll() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", this.storage.delete(this.storageKey));\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n  }]);\n\n  return StorageManager;\n}();","map":{"version":3,"sources":["../../../src/managers/StorageManager.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;AACA,SAAS,YAAT,CAAyB,KAAzB,EAAiC;AAC/B;AACA,SAAO,KAAP;AACD;AACD;;AAEA;;;;AAIG;;;AACH,WAAa,cAAb;AAaE,0BAAY,OAAZ,EAA8B,UAA9B,EAA2C;AAAA;;AACzC,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,UAAL,GAAkB,UAAlB;AACD;;AAhBH;AAAA;AAAA,WAkBe,kBAAM;;;;;;iDACV,KAAK,OAAL,CAAa,GAAb,CAAiB,KAAK,UAAtB,C;;;;;;;;;AACR;AApBH;AAAA;AAAA,WAsBe,gBACX,SADW,EACwD;;;;;;;;AAElD,uBAAM,KAAK,OAAL,CAAa,GAAb,CAAiB,KAAK,UAAtB,CAAN;;;AAAX,gBAAA,Q;kDAEC,YAAY,CAAC,QAAD,CAAZ,CAAuB,IAAvB,CAA4B,SAA5B,C;;;;;;;;;AACR;AA5BH;AAAA;AAAA,WA8Be,gBACX,OADW,EAEX,SAFW,EAGc;AAAA,UAAzB,SAAyB,uEAAJ,IAAI;;;;;;;;AAER,uBAAM,KAAK,OAAL,CAAa,GAAb,CAAiB,KAAK,UAAtB,CAAN;;;AAAX,gBAAA,Q;;AAEN,oBAAI,CAAC,YAAY,CAAC,QAAD,CAAZ,CAAuB,IAAvB,CAA4B,SAA5B,CAAL,EAA6C;AAC3C,kBAAA,YAAY,CAAC,QAAD,CAAZ,CAAuB,IAAvB,CAA4B,OAA5B;AACD,iBAFD,MAEO,IAAI,SAAJ,EAAe;AACpB,uBAAS,CAAT,GAAa,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,EAAtC,EAA0C;AACxC,wBAAI,SAAS,CAAC,YAAY,CAAC,QAAD,CAAZ,CAAuB,CAAvB,CAAD,CAAb,EAA0C;AACxC,sBAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,OAAd;AACD;AACF;AACF;;kDAEM,KAAK,OAAL,CAAa,GAAb,CAAiB,KAAK,UAAtB,EAAkC,QAAlC,C;;;;;;;;;AACR;AAhDH;AAAA;AAAA,WAkDe,gBACX,SADW,EACwD;;;;;;;;AAElD,uBAAM,KAAK,OAAL,CAAa,GAAb,CAAiB,KAAK,UAAtB,CAAN;;;AAAX,gBAAA,Q;AAEA,gBAAA,gB,GAAmB,YAAY,CAAC,QAAD,CAAZ,CAAuB,MAAvB,CAA8B,UAAC,MAAD;AAAA,yBAAY,CAAC,SAAS,CAAC,MAAD,CAAtB;AAAA,iBAA9B,C,EAEzB;;kDACO,KAAK,OAAL,CAAa,GAAb,CAAiB,KAAK,UAAtB,EAAkC,gBAAlC,C;;;;;;;;;AACR;AA3DH;AAAA;AAAA,WA6De,qBAAS;;;;;;kDACb,KAAK,OAAL,CAAa,MAAb,CAAoB,KAAK,UAAzB,C;;;;;;;;;AACR;AA/DH;;AAAA;AAAA","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n/* eslint-disable prefer-arrow/prefer-arrow-functions */\nfunction fixArrayType(array) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return array;\n}\n/* eslint-enable prefer-arrow/prefer-arrow-functions */\n/**\n * @internalapi\n *\n * The StorageManager provides CRUD functionality for specific entities and persists them to the provided storage.\n */\nexport class StorageManager {\n    constructor(storage, storageKey) {\n        this.storage = storage;\n        this.storageKey = storageKey;\n    }\n    getAll() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storage.get(this.storageKey);\n        });\n    }\n    getOne(predicate) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const entities = yield this.storage.get(this.storageKey);\n            return fixArrayType(entities).find(predicate);\n        });\n    }\n    addOne(element, predicate, overwrite = true) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const entities = yield this.storage.get(this.storageKey);\n            if (!fixArrayType(entities).some(predicate)) {\n                fixArrayType(entities).push(element);\n            }\n            else if (overwrite) {\n                for (let i = 0; i < entities.length; i++) {\n                    if (predicate(fixArrayType(entities)[i])) {\n                        entities[i] = element;\n                    }\n                }\n            }\n            return this.storage.set(this.storageKey, entities);\n        });\n    }\n    remove(predicate) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const entities = yield this.storage.get(this.storageKey);\n            const filteredEntities = fixArrayType(entities).filter((entity) => !predicate(entity));\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            return this.storage.set(this.storageKey, filteredEntities);\n        });\n    }\n    removeAll() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storage.delete(this.storageKey);\n        });\n    }\n}\n//# sourceMappingURL=StorageManager.js.map"]},"metadata":{},"sourceType":"module"}