{"ast":null,"code":"import { HttpBackend } from '@taquito/http-utils';\nexport default class CustomIpfsHttpHandler {\n  constructor(ipfsGatheway, gatewayProtocol) {\n    this._ipfsGateway = void 0;\n    this._gatewayProtocol = void 0;\n    this._httpBackend = new HttpBackend();\n    this._ipfsGateway = ipfsGatheway ? ipfsGatheway : 'ipfs.io';\n    this._gatewayProtocol = gatewayProtocol ? gatewayProtocol : 'https';\n  }\n\n  async getMetadata(_contractAbstraction, {\n    location\n  }, _context) {\n    return this._httpBackend.createRequest({\n      url: `${this._gatewayProtocol}://${this._ipfsGateway}/ipfs/${location.substring(2)}/`,\n      method: 'GET',\n      headers: {\n        'Content-Type': 'text/plain'\n      },\n      mimeType: 'text; charset=utf-8',\n      json: false\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/src/lib/util/taquito-custom-ipfs-http-handler.ts"],"names":["HttpBackend","CustomIpfsHttpHandler","constructor","ipfsGatheway","gatewayProtocol","_ipfsGateway","_gatewayProtocol","_httpBackend","getMetadata","_contractAbstraction","location","_context","createRequest","url","substring","method","headers","mimeType","json"],"mappings":"AACA,SAASA,WAAT,QAA4B,qBAA5B;AAQA,eAAe,MAAMC,qBAAN,CAA+C;AAK5DC,EAAAA,WAAW,CAACC,YAAD,EAAwBC,eAAxB,EAAkD;AAAA,SAJrDC,YAIqD;AAAA,SAHrDC,gBAGqD;AAAA,SAFrDC,YAEqD,GAFtC,IAAIP,WAAJ,EAEsC;AAC3D,SAAKK,YAAL,GAAoBF,YAAY,GAAGA,YAAH,GAAkB,SAAlD;AACA,SAAKG,gBAAL,GAAwBF,eAAe,GAAGA,eAAH,GAAqB,OAA5D;AACD;;AAEgB,QAAXI,WAAW,CACfC,oBADe,EAEf;AAAEC,IAAAA;AAAF,GAFe,EAGfC,QAHe,EAIE;AACjB,WAAO,KAAKJ,YAAL,CAAkBK,aAAlB,CAAwC;AAC7CC,MAAAA,GAAG,EAAG,GAAE,KAAKP,gBAAiB,MAC5B,KAAKD,YACN,SAAQK,QAAQ,CAACI,SAAT,CAAmB,CAAnB,CAAsB,GAHc;AAI7CC,MAAAA,MAAM,EAAE,KAJqC;AAK7CC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OALoC;AAM7CC,MAAAA,QAAQ,EAAE,qBANmC;AAO7CC,MAAAA,IAAI,EAAE;AAPuC,KAAxC,CAAP;AASD;;AAxB2D","sourcesContent":["import { Handler, Tzip16Uri } from '@taquito/tzip16';\nimport { HttpBackend } from '@taquito/http-utils';\nimport {\n  ContractAbstraction,\n  ContractProvider,\n  Wallet,\n  Context\n} from '@taquito/taquito';\n\nexport default class CustomIpfsHttpHandler implements Handler {\n  private _ipfsGateway: string;\n  private _gatewayProtocol: string;\n  private _httpBackend = new HttpBackend();\n\n  constructor(ipfsGatheway?: string, gatewayProtocol?: string) {\n    this._ipfsGateway = ipfsGatheway ? ipfsGatheway : 'ipfs.io';\n    this._gatewayProtocol = gatewayProtocol ? gatewayProtocol : 'https';\n  }\n\n  async getMetadata(\n    _contractAbstraction: ContractAbstraction<ContractProvider | Wallet>,\n    { location }: Tzip16Uri,\n    _context: Context\n  ): Promise<string> {\n    return this._httpBackend.createRequest<string>({\n      url: `${this._gatewayProtocol}://${\n        this._ipfsGateway\n      }/ipfs/${location.substring(2)}/`,\n      method: 'GET',\n      headers: { 'Content-Type': 'text/plain' },\n      mimeType: 'text; charset=utf-8',\n      json: false\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}