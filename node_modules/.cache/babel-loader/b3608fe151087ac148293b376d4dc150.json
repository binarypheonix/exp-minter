{"ast":null,"code":"import _regeneratorRuntime from \"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { StorageManager } from './StorageManager';\n/**\n * @internalapi\n *\n * The PeerManager provides CRUD functionality for peer entities and persists them to the provided storage.\n */\n\nexport var PeerManager = /*#__PURE__*/function () {\n  function PeerManager(storage, key) {\n    _classCallCheck(this, PeerManager);\n\n    this.storageManager = new StorageManager(storage, key);\n  }\n\n  _createClass(PeerManager, [{\n    key: \"hasPeer\",\n    value: function hasPeer(publicKey) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.getPeer(publicKey);\n\n              case 2:\n                if (!_context.sent) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.t0 = true;\n                _context.next = 7;\n                break;\n\n              case 6:\n                _context.t0 = false;\n\n              case 7:\n                return _context.abrupt(\"return\", _context.t0);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"getPeers\",\n    value: function getPeers() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.storageManager.getAll());\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"getPeer\",\n    value: function getPeer(publicKey) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", this.storageManager.getOne(function (peer) {\n                  return peer.publicKey === publicKey;\n                }));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n  }, {\n    key: \"addPeer\",\n    value: function addPeer(peerInfo) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", this.storageManager.addOne(peerInfo, function (peer) {\n                  return peer.publicKey === peerInfo.publicKey;\n                }));\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }, {\n    key: \"removePeer\",\n    value: function removePeer(publicKey) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", this.storageManager.remove(function (peer) {\n                  return peer.publicKey === publicKey;\n                }));\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n  }, {\n    key: \"removePeers\",\n    value: function removePeers(publicKeys) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.abrupt(\"return\", this.storageManager.remove(function (peer) {\n                  return publicKeys.includes(peer.publicKey);\n                }));\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n    }\n  }, {\n    key: \"removeAllPeers\",\n    value: function removeAllPeers() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                return _context7.abrupt(\"return\", this.storageManager.removeAll());\n\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n    }\n  }]);\n\n  return PeerManager;\n}();","map":{"version":3,"sources":["../../../src/managers/PeerManager.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAAS,cAAT,QAA0C,kBAA1C;AAEA;;;;AAIG;;AACH,WAAa,WAAb;AASE,uBAAY,OAAZ,EAA8B,GAA9B,EAAoC;AAAA;;AAClC,SAAK,cAAL,GAAsB,IAAI,cAAJ,CAAmB,OAAnB,EAA4B,GAA5B,CAAtB;AACD;;AAXH;AAAA;AAAA,WAae,iBAAQ,SAAR,EAAyB;;;;;;;AAC5B,uBAAM,KAAK,OAAL,CAAa,SAAb,CAAN;;;;;;;;8BAAiC,I;;;;;8BAAO,K;;;;;;;;;;;;AACjD;AAfH;AAAA;AAAA,WAiBe,oBAAQ;;;;;;kDACZ,KAAK,cAAL,CAAoB,MAApB,E;;;;;;;;;AACR;AAnBH;AAAA;AAAA,WAqBe,iBAAQ,SAAR,EAAyB;;;;;;kDAC7B,KAAK,cAAL,CAAoB,MAApB,CAA2B,UAAC,IAAD;AAAA,yBAAU,IAAI,CAAC,SAAL,KAAmB,SAA7B;AAAA,iBAA3B,C;;;;;;;;;AACR;AAvBH;AAAA;AAAA,WAyBe,iBAAQ,QAAR,EAAoD;;;;;;kDACxD,KAAK,cAAL,CAAoB,MAApB,CAA2B,QAA3B,EAAqC,UAAC,IAAD;AAAA,yBAAU,IAAI,CAAC,SAAL,KAAmB,QAAQ,CAAC,SAAtC;AAAA,iBAArC,C;;;;;;;;;AACR;AA3BH;AAAA;AAAA,WA6Be,oBAAW,SAAX,EAA4B;;;;;;kDAChC,KAAK,cAAL,CAAoB,MAApB,CAA2B,UAAC,IAAD;AAAA,yBAAU,IAAI,CAAC,SAAL,KAAmB,SAA7B;AAAA,iBAA3B,C;;;;;;;;;AACR;AA/BH;AAAA;AAAA,WAiCe,qBAAY,UAAZ,EAAgC;;;;;;kDACpC,KAAK,cAAL,CAAoB,MAApB,CAA2B,UAAC,IAAD;AAAA,yBAAU,UAAU,CAAC,QAAX,CAAoB,IAAI,CAAC,SAAzB,CAAV;AAAA,iBAA3B,C;;;;;;;;;AACR;AAnCH;AAAA;AAAA,WAqCe,0BAAc;;;;;;kDAClB,KAAK,cAAL,CAAoB,SAApB,E;;;;;;;;;AACR;AAvCH;;AAAA;AAAA","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { StorageManager } from './StorageManager';\n/**\n * @internalapi\n *\n * The PeerManager provides CRUD functionality for peer entities and persists them to the provided storage.\n */\nexport class PeerManager {\n    constructor(storage, key) {\n        this.storageManager = new StorageManager(storage, key);\n    }\n    hasPeer(publicKey) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield this.getPeer(publicKey)) ? true : false;\n        });\n    }\n    getPeers() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.getAll();\n        });\n    }\n    getPeer(publicKey) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.getOne((peer) => peer.publicKey === publicKey);\n        });\n    }\n    addPeer(peerInfo) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.addOne(peerInfo, (peer) => peer.publicKey === peerInfo.publicKey);\n        });\n    }\n    removePeer(publicKey) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.remove((peer) => peer.publicKey === publicKey);\n        });\n    }\n    removePeers(publicKeys) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.remove((peer) => publicKeys.includes(peer.publicKey));\n        });\n    }\n    removeAllPeers() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.storageManager.removeAll();\n        });\n    }\n}\n//# sourceMappingURL=PeerManager.js.map"]},"metadata":{},"sourceType":"module"}