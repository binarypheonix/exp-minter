{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { readFileAsDataUrlAction } from '../async/actions';\nexport const initialState = {\n  selectedCsvFile: null\n};\nconst slice = createSlice({\n  name: 'createNftCsvImport',\n  initialState,\n  reducers: {\n    updateSelectedCsvFile(state, action) {\n      state.selectedCsvFile = action.payload;\n    },\n\n    clearSelectedCsvFile(state) {\n      state.selectedCsvFile = null;\n    }\n\n  },\n  extraReducers: ({\n    addCase\n  }) => {\n    addCase(readFileAsDataUrlAction.fulfilled, (state, action) => {\n      if (action.payload.ns === 'createNftCsvImport') {\n        state.selectedCsvFile = action.payload.result;\n      }\n    });\n  }\n});\nexport const {\n  updateSelectedCsvFile,\n  clearSelectedCsvFile\n} = slice.actions;\nexport default slice;","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/src/reducer/slices/createNftCsvImport.ts"],"names":["createSlice","readFileAsDataUrlAction","initialState","selectedCsvFile","slice","name","reducers","updateSelectedCsvFile","state","action","payload","clearSelectedCsvFile","extraReducers","addCase","fulfilled","ns","result","actions"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AACA,SAASC,uBAAT,QAAwC,kBAAxC;AAaA,OAAO,MAAMC,YAAqC,GAAG;AACnDC,EAAAA,eAAe,EAAE;AADkC,CAA9C;AAIP,MAAMC,KAAK,GAAGJ,WAAW,CAAC;AACxBK,EAAAA,IAAI,EAAE,oBADkB;AAExBH,EAAAA,YAFwB;AAGxBI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,qBAAqB,CAACC,KAAD,EAAQC,MAAR,EAA6C;AAChED,MAAAA,KAAK,CAACL,eAAN,GAAwBM,MAAM,CAACC,OAA/B;AACD,KAHO;;AAIRC,IAAAA,oBAAoB,CAACH,KAAD,EAAQ;AAC1BA,MAAAA,KAAK,CAACL,eAAN,GAAwB,IAAxB;AACD;;AANO,GAHc;AAWxBS,EAAAA,aAAa,EAAE,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAiB;AAC9BA,IAAAA,OAAO,CAACZ,uBAAuB,CAACa,SAAzB,EAAoC,CAACN,KAAD,EAAQC,MAAR,KAAmB;AAC5D,UAAIA,MAAM,CAACC,OAAP,CAAeK,EAAf,KAAsB,oBAA1B,EAAgD;AAC9CP,QAAAA,KAAK,CAACL,eAAN,GAAwBM,MAAM,CAACC,OAAP,CAAeM,MAAvC;AACD;AACF,KAJM,CAAP;AAKD;AAjBuB,CAAD,CAAzB;AAoBA,OAAO,MAAM;AAAET,EAAAA,qBAAF;AAAyBI,EAAAA;AAAzB,IAAkDP,KAAK,CAACa,OAA9D;AAEP,eAAeb,KAAf","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { readFileAsDataUrlAction } from '../async/actions';\n\nexport interface SelectedFile {\n  objectUrl: string;\n  name: string;\n  type: string;\n  size: number;\n}\n\nexport interface CreateNftCsvImportState {\n  selectedCsvFile: SelectedFile | null;\n}\n\nexport const initialState: CreateNftCsvImportState = {\n  selectedCsvFile: null\n};\n\nconst slice = createSlice({\n  name: 'createNftCsvImport',\n  initialState,\n  reducers: {\n    updateSelectedCsvFile(state, action: PayloadAction<SelectedFile>) {\n      state.selectedCsvFile = action.payload;\n    },\n    clearSelectedCsvFile(state) {\n      state.selectedCsvFile = null;\n    }\n  },\n  extraReducers: ({ addCase }) => {\n    addCase(readFileAsDataUrlAction.fulfilled, (state, action) => {\n      if (action.payload.ns === 'createNftCsvImport') {\n        state.selectedCsvFile = action.payload.result;\n      }\n    });\n  }\n});\n\nexport const { updateSelectedCsvFile, clearSelectedCsvFile } = slice.actions;\n\nexport default slice;\n"]},"metadata":{},"sourceType":"module"}