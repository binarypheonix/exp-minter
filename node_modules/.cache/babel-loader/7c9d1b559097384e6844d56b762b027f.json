{"ast":null,"code":"import React from'react';import{Box,Button,Flex,Menu,MenuButton,MenuList,MenuOptionGroup,MenuItemOption,Text}from'@chakra-ui/react';import{useSelector,useDispatch}from'../../../reducer';import{selectCollection}from'../../../reducer/slices/collections';import{ChevronDown}from'react-feather';export default function CollectionsDropdown(){var state=useSelector(function(s){return s.collections;});var dispatch=useDispatch();return/*#__PURE__*/React.createElement(Flex,{width:\"100%\",align:\"center\"},/*#__PURE__*/React.createElement(Menu,null,/*#__PURE__*/React.createElement(MenuButton,{as:Button,border:\"1px solid\",borderColor:\"brand.gray\",flex:\"1\"},/*#__PURE__*/React.createElement(Flex,{align:\"center\"},/*#__PURE__*/React.createElement(Box,{mr:3},/*#__PURE__*/React.createElement(ChevronDown,null)),state.selectedCollection?state.collections[state.selectedCollection].metadata.name:'-')),/*#__PURE__*/React.createElement(MenuList,null,/*#__PURE__*/React.createElement(MenuOptionGroup,{type:\"radio\",defaultValue:state.selectedCollection||''},/*#__PURE__*/React.createElement(Text,{ml:4,my:2,fontWeight:\"600\"},\"Featured\"),/*#__PURE__*/React.createElement(MenuItemOption,{key:state.globalCollection,selected:state.globalCollection===state.selectedCollection,value:state.globalCollection,onSelect:function onSelect(){return dispatch(selectCollection(state.globalCollection));}},state.collections[state.globalCollection].metadata.name),/*#__PURE__*/React.createElement(Text,{ml:4,my:2,fontWeight:\"600\"},\"Your Collections\"),Object.keys(state.collections).filter(function(address){return address!==state.globalCollection;}).map(function(address,idx){return/*#__PURE__*/React.createElement(MenuItemOption,{key:address+idx,value:address,selected:address===state.selectedCollection,onClick:function onClick(){return dispatch(selectCollection(address));}},state.collections[address].metadata.name);})))));}","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/src/components/Collections/Catalog/CollectionsDropdown.tsx"],"names":["React","Box","Button","Flex","Menu","MenuButton","MenuList","MenuOptionGroup","MenuItemOption","Text","useSelector","useDispatch","selectCollection","ChevronDown","CollectionsDropdown","state","s","collections","dispatch","selectedCollection","metadata","name","globalCollection","Object","keys","filter","address","map","idx"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OACEC,GADF,CAEEC,MAFF,CAGEC,IAHF,CAIEC,IAJF,CAKEC,UALF,CAMEC,QANF,CAOEC,eAPF,CAQEC,cARF,CASEC,IATF,KAUO,kBAVP,CAWA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,kBAAzC,CACA,OAASC,gBAAT,KAAiC,qCAAjC,CACA,OAASC,WAAT,KAA4B,eAA5B,CAEA,cAAe,SAASC,CAAAA,mBAAT,EAA+B,CAC5C,GAAMC,CAAAA,KAAK,CAAGL,WAAW,CAAC,SAAAM,CAAC,QAAIA,CAAAA,CAAC,CAACC,WAAN,EAAF,CAAzB,CACA,GAAMC,CAAAA,QAAQ,CAAGP,WAAW,EAA5B,CAEA,mBACE,oBAAC,IAAD,EAAM,KAAK,CAAC,MAAZ,CAAmB,KAAK,CAAC,QAAzB,eACE,oBAAC,IAAD,mBACE,oBAAC,UAAD,EACE,EAAE,CAAET,MADN,CAEE,MAAM,CAAC,WAFT,CAGE,WAAW,CAAC,YAHd,CAIE,IAAI,CAAC,GAJP,eAME,oBAAC,IAAD,EAAM,KAAK,CAAC,QAAZ,eACE,oBAAC,GAAD,EAAK,EAAE,CAAE,CAAT,eACE,oBAAC,WAAD,MADF,CADF,CAIGa,KAAK,CAACI,kBAAN,CACGJ,KAAK,CAACE,WAAN,CAAkBF,KAAK,CAACI,kBAAxB,EAA4CC,QAA5C,CAAqDC,IADxD,CAEG,GANN,CANF,CADF,cAgBE,oBAAC,QAAD,mBACE,oBAAC,eAAD,EACE,IAAI,CAAC,OADP,CAEE,YAAY,CAAEN,KAAK,CAACI,kBAAN,EAA4B,EAF5C,eAIE,oBAAC,IAAD,EAAM,EAAE,CAAE,CAAV,CAAa,EAAE,CAAE,CAAjB,CAAoB,UAAU,CAAC,KAA/B,aAJF,cAOE,oBAAC,cAAD,EACE,GAAG,CAAEJ,KAAK,CAACO,gBADb,CAEE,QAAQ,CAAEP,KAAK,CAACO,gBAAN,GAA2BP,KAAK,CAACI,kBAF7C,CAGE,KAAK,CAAEJ,KAAK,CAACO,gBAHf,CAIE,QAAQ,CAAE,0BACRJ,CAAAA,QAAQ,CAACN,gBAAgB,CAACG,KAAK,CAACO,gBAAP,CAAjB,CADA,EAJZ,EAQGP,KAAK,CAACE,WAAN,CAAkBF,KAAK,CAACO,gBAAxB,EAA0CF,QAA1C,CAAmDC,IARtD,CAPF,cAiBE,oBAAC,IAAD,EAAM,EAAE,CAAE,CAAV,CAAa,EAAE,CAAE,CAAjB,CAAoB,UAAU,CAAC,KAA/B,qBAjBF,CAoBGE,MAAM,CAACC,IAAP,CAAYT,KAAK,CAACE,WAAlB,EACEQ,MADF,CACS,SAAAC,OAAO,QAAIA,CAAAA,OAAO,GAAKX,KAAK,CAACO,gBAAtB,EADhB,EAEEK,GAFF,CAEM,SAACD,OAAD,CAAUE,GAAV,qBACH,oBAAC,cAAD,EACE,GAAG,CAAEF,OAAO,CAAGE,GADjB,CAEE,KAAK,CAAEF,OAFT,CAGE,QAAQ,CAAEA,OAAO,GAAKX,KAAK,CAACI,kBAH9B,CAIE,OAAO,CAAE,yBAAMD,CAAAA,QAAQ,CAACN,gBAAgB,CAACc,OAAD,CAAjB,CAAd,EAJX,EAMGX,KAAK,CAACE,WAAN,CAAkBS,OAAlB,EAA2BN,QAA3B,CAAoCC,IANvC,CADG,EAFN,CApBH,CADF,CAhBF,CADF,CADF,CAwDD","sourcesContent":["import React from 'react';\nimport {\n  Box,\n  Button,\n  Flex,\n  Menu,\n  MenuButton,\n  MenuList,\n  MenuOptionGroup,\n  MenuItemOption,\n  Text\n} from '@chakra-ui/react';\nimport { useSelector, useDispatch } from '../../../reducer';\nimport { selectCollection } from '../../../reducer/slices/collections';\nimport { ChevronDown } from 'react-feather';\n\nexport default function CollectionsDropdown() {\n  const state = useSelector(s => s.collections);\n  const dispatch = useDispatch();\n\n  return (\n    <Flex width=\"100%\" align=\"center\">\n      <Menu>\n        <MenuButton\n          as={Button}\n          border=\"1px solid\"\n          borderColor=\"brand.gray\"\n          flex=\"1\"\n        >\n          <Flex align=\"center\">\n            <Box mr={3}>\n              <ChevronDown />\n            </Box>\n            {state.selectedCollection\n              ? state.collections[state.selectedCollection].metadata.name\n              : '-'}\n          </Flex>\n        </MenuButton>\n        <MenuList>\n          <MenuOptionGroup\n            type=\"radio\"\n            defaultValue={state.selectedCollection || ''}\n          >\n            <Text ml={4} my={2} fontWeight=\"600\">\n              Featured\n            </Text>\n            <MenuItemOption\n              key={state.globalCollection}\n              selected={state.globalCollection === state.selectedCollection}\n              value={state.globalCollection}\n              onSelect={() =>\n                dispatch(selectCollection(state.globalCollection))\n              }\n            >\n              {state.collections[state.globalCollection].metadata.name}\n            </MenuItemOption>\n            <Text ml={4} my={2} fontWeight=\"600\">\n              Your Collections\n            </Text>\n            {Object.keys(state.collections)\n              .filter(address => address !== state.globalCollection)\n              .map((address, idx) => (\n                <MenuItemOption\n                  key={address + idx}\n                  value={address}\n                  selected={address === state.selectedCollection}\n                  onClick={() => dispatch(selectCollection(address))}\n                >\n                  {state.collections[address].metadata.name}\n                </MenuItemOption>\n              ))}\n          </MenuOptionGroup>\n        </MenuList>\n      </Menu>\n    </Flex>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}