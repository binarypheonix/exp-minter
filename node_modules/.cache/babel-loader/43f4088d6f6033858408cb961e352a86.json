{"ast":null,"code":"var _classCallCheck = require(\"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar ResizeableBuffer = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function ResizeableBuffer() {\n    var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n\n    _classCallCheck(this, ResizeableBuffer);\n\n    this.size = size;\n    this.length = 0;\n    this.buf = Buffer.alloc(size);\n  }\n\n  _createClass(ResizeableBuffer, [{\n    key: \"prepend\",\n    value: function prepend(val) {\n      if (Buffer.isBuffer(val)) {\n        var length = this.length + val.length;\n\n        if (length >= this.size) {\n          this.resize();\n\n          if (length >= this.size) {\n            throw Error('INVALID_BUFFER_STATE');\n          }\n        }\n\n        var buf = this.buf;\n        this.buf = Buffer.alloc(this.size);\n        val.copy(this.buf, 0);\n        buf.copy(this.buf, val.length);\n        this.length += val.length;\n      } else {\n        var _length = this.length++;\n\n        if (_length === this.size) {\n          this.resize();\n        }\n\n        var _buf = this.clone();\n\n        this.buf[0] = val;\n\n        _buf.copy(this.buf, 1, 0, _length);\n      }\n    }\n  }, {\n    key: \"append\",\n    value: function append(val) {\n      var length = this.length++;\n\n      if (length === this.size) {\n        this.resize();\n      }\n\n      this.buf[length] = val;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return Buffer.from(this.buf.slice(0, this.length));\n    }\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var length = this.length;\n      this.size = this.size * 2;\n      var buf = Buffer.alloc(this.size);\n      this.buf.copy(buf, 0, 0, length);\n      this.buf = buf;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString(encoding) {\n      if (encoding) {\n        return this.buf.slice(0, this.length).toString(encoding);\n      } else {\n        return Uint8Array.prototype.slice.call(this.buf.slice(0, this.length));\n      }\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString('utf8');\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.length = 0;\n    }\n  }]);\n\n  return ResizeableBuffer;\n}();\n\nmodule.exports = ResizeableBuffer;","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/node_modules/csv-parse/lib/ResizeableBuffer.js"],"names":["ResizeableBuffer","size","length","buf","Buffer","alloc","val","isBuffer","resize","Error","copy","clone","from","slice","encoding","toString","Uint8Array","prototype","call","module","exports"],"mappings":";;;;IAEMA,gB;;;AACJ,8BAAqB;AAAA,QAATC,IAAS,uEAAJ,GAAI;;AAAA;;AACnB,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAc,CAAd;AACA,SAAKC,GAAL,GAAWC,MAAM,CAACC,KAAP,CAAaJ,IAAb,CAAX;AACD;;;;WACD,iBAAQK,GAAR,EAAY;AACV,UAAGF,MAAM,CAACG,QAAP,CAAgBD,GAAhB,CAAH,EAAwB;AACtB,YAAMJ,MAAM,GAAG,KAAKA,MAAL,GAAcI,GAAG,CAACJ,MAAjC;;AACA,YAAGA,MAAM,IAAI,KAAKD,IAAlB,EAAuB;AACrB,eAAKO,MAAL;;AACA,cAAGN,MAAM,IAAI,KAAKD,IAAlB,EAAuB;AACrB,kBAAMQ,KAAK,CAAC,sBAAD,CAAX;AACD;AACF;;AACD,YAAMN,GAAG,GAAG,KAAKA,GAAjB;AACA,aAAKA,GAAL,GAAWC,MAAM,CAACC,KAAP,CAAa,KAAKJ,IAAlB,CAAX;AACAK,QAAAA,GAAG,CAACI,IAAJ,CAAS,KAAKP,GAAd,EAAmB,CAAnB;AACAA,QAAAA,GAAG,CAACO,IAAJ,CAAS,KAAKP,GAAd,EAAmBG,GAAG,CAACJ,MAAvB;AACA,aAAKA,MAAL,IAAeI,GAAG,CAACJ,MAAnB;AACD,OAbD,MAaK;AACH,YAAMA,OAAM,GAAG,KAAKA,MAAL,EAAf;;AACA,YAAGA,OAAM,KAAK,KAAKD,IAAnB,EAAwB;AACtB,eAAKO,MAAL;AACD;;AACD,YAAML,IAAG,GAAG,KAAKQ,KAAL,EAAZ;;AACA,aAAKR,GAAL,CAAS,CAAT,IAAcG,GAAd;;AACAH,QAAAA,IAAG,CAACO,IAAJ,CAAS,KAAKP,GAAd,EAAkB,CAAlB,EAAqB,CAArB,EAAwBD,OAAxB;AACD;AACF;;;WACD,gBAAOI,GAAP,EAAW;AACT,UAAMJ,MAAM,GAAG,KAAKA,MAAL,EAAf;;AACA,UAAGA,MAAM,KAAK,KAAKD,IAAnB,EAAwB;AACtB,aAAKO,MAAL;AACD;;AACD,WAAKL,GAAL,CAASD,MAAT,IAAmBI,GAAnB;AACD;;;WACD,iBAAO;AACL,aAAOF,MAAM,CAACQ,IAAP,CAAY,KAAKT,GAAL,CAASU,KAAT,CAAe,CAAf,EAAkB,KAAKX,MAAvB,CAAZ,CAAP;AACD;;;WACD,kBAAQ;AACN,UAAMA,MAAM,GAAG,KAAKA,MAApB;AACA,WAAKD,IAAL,GAAY,KAAKA,IAAL,GAAY,CAAxB;AACA,UAAME,GAAG,GAAGC,MAAM,CAACC,KAAP,CAAa,KAAKJ,IAAlB,CAAZ;AACA,WAAKE,GAAL,CAASO,IAAT,CAAcP,GAAd,EAAkB,CAAlB,EAAqB,CAArB,EAAwBD,MAAxB;AACA,WAAKC,GAAL,GAAWA,GAAX;AACD;;;WACD,kBAASW,QAAT,EAAkB;AAChB,UAAGA,QAAH,EAAY;AACV,eAAO,KAAKX,GAAL,CAASU,KAAT,CAAe,CAAf,EAAkB,KAAKX,MAAvB,EAA+Ba,QAA/B,CAAwCD,QAAxC,CAAP;AACD,OAFD,MAEK;AACH,eAAOE,UAAU,CAACC,SAAX,CAAqBJ,KAArB,CAA2BK,IAA3B,CAAgC,KAAKf,GAAL,CAASU,KAAT,CAAe,CAAf,EAAkB,KAAKX,MAAvB,CAAhC,CAAP;AACD;AACF;;;WACD,kBAAQ;AACN,aAAO,KAAKa,QAAL,CAAc,MAAd,CAAP;AACD;;;WACD,iBAAO;AACL,WAAKb,MAAL,GAAc,CAAd;AACD;;;;;;AAGHiB,MAAM,CAACC,OAAP,GAAiBpB,gBAAjB","sourcesContent":["\n\nclass ResizeableBuffer{\n  constructor(size=100){\n    this.size = size\n    this.length = 0\n    this.buf = Buffer.alloc(size)\n  }\n  prepend(val){\n    if(Buffer.isBuffer(val)){\n      const length = this.length + val.length\n      if(length >= this.size){\n        this.resize()\n        if(length >= this.size){\n          throw Error('INVALID_BUFFER_STATE')\n        }\n      }\n      const buf = this.buf\n      this.buf = Buffer.alloc(this.size)\n      val.copy(this.buf, 0)\n      buf.copy(this.buf, val.length)\n      this.length += val.length\n    }else{\n      const length = this.length++\n      if(length === this.size){\n        this.resize()\n      }\n      const buf = this.clone()\n      this.buf[0] = val\n      buf.copy(this.buf,1, 0, length)\n    }\n  }\n  append(val){\n    const length = this.length++\n    if(length === this.size){\n      this.resize()\n    }\n    this.buf[length] = val\n  }\n  clone(){\n    return Buffer.from(this.buf.slice(0, this.length))\n  }\n  resize(){\n    const length = this.length\n    this.size = this.size * 2\n    const buf = Buffer.alloc(this.size)\n    this.buf.copy(buf,0, 0, length)\n    this.buf = buf\n  }\n  toString(encoding){\n    if(encoding){\n      return this.buf.slice(0, this.length).toString(encoding)\n    }else{\n      return Uint8Array.prototype.slice.call(this.buf.slice(0, this.length))\n    }\n  }\n  toJSON(){\n    return this.toString('utf8')\n  }\n  reset(){\n    this.length = 0\n  }\n}\n\nmodule.exports = ResizeableBuffer\n"]},"metadata":{},"sourceType":"script"}