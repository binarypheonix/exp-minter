{"ast":null,"code":"import _objectSpread from\"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";/* eslint-disable no-redeclare */import*as t from'io-ts';import*as e from'fp-ts/Either';import merge from\"ts-deepmerge\";//// Contracts\nexport var ContractRow=function ContractRow(storage){return t.type({type:t.string,kind:t.string,tzips:t.union([t.array(t.string),t.undefined]),address:t.string,balance:t.number,creator:t.type({address:t.string}),numContracts:t.number,numDelegations:t.number,numOriginations:t.number,numTransactions:t.number,numReveals:t.number,numMigrations:t.number,firstActivity:t.number,firstActivityTime:t.string,lastActivity:t.number,lastActivityTime:t.string,storage:storage});};//// Generic BigMaps\nexport var BigMapRow=function BigMapRow(props){return t.type({id:t.number,active:t.boolean,hash:t.string,key:props.key,value:props.value,firstLevel:t.number,lastLevel:t.number,updates:t.number});};export var BigMapUpdateRow=function BigMapUpdateRow(content){return t.type({id:t.number,level:t.number,timestamp:t.string,bigmap:t.number,contract:t.intersection([t.partial({alias:t.string}),t.type({address:t.string})]),path:t.string,action:t.string,content:t.type({hash:t.string,key:content.key,value:content.value})});};//// FA2 BigMaps\nexport var AssetMetadataBigMap=t.array(BigMapRow({key:t.string,value:t.string}));export var LedgerBigMap=t.array(BigMapRow({key:t.string,value:t.string}));export var TokenMetadataBigMap=t.array(BigMapRow({key:t.string,value:t.type({token_id:t.string,token_info:t.type({'':t.string})})}));//// FixedPriceSale BigMaps\nfunction sequenceCodecs(inputCodec,transform,outputCodec){var name=arguments.length>3&&arguments[3]!==undefined?arguments[3]:outputCodec.name;return new t.Type(name,outputCodec.is,function(input,context){return e.chain(function(decoded){return outputCodec.validate(transform(decoded),context);})(inputCodec.validate(input,context));},outputCodec.encode);}// Compatibility: Some fixed_price_sale contract bigmaps use a `sale_seller`\n// field while others use a `seller` field. This decoder conforms all bigmaps\n// to use the `sale_seller` field. The decoder receives an \"input\" codec that\n// describes the `sale_seller` and `seller` fields as optional strings. This\n// initial validation allows us to reference these (possibly undefined) fields\n// and pass them to the \"output\" codec for validation via a transformation\n// function.\n//\n// In this case the transformation defines the `sale_seller` field as one of the\n// two input fields. Note the resulting field could be undefined; however, the\n// \"output\" codec will fail if this is the case.\nvar legacySaleV1=t.type({sale_seller:t.string,sale_token:t.type({token_for_sale_address:t.string,token_for_sale_token_id:t.string})});var legacySaleV2=t.type({seller:t.string,sale_token:t.type({token_for_sale_address:t.string,token_for_sale_token_id:t.string})});var saleV3=t.type({sale_data:t.type({amount:t.string,price:t.string,sale_token:t.type({fa2_address:t.string,token_id:t.string})}),seller:t.string});var sale=t.intersection([saleV3,t.partial({isLegacy:t.boolean})]);export var FixedPriceSaleBigMapKey=sequenceCodecs(t.union([legacySaleV1,legacySaleV2,saleV3]),function(decoded){return _objectSpread(_objectSpread({},decoded),{},{sale_data:saleV3.is(decoded)?decoded.sale_data:{amount:\"1\",price:\"0\",sale_token:{fa2_address:decoded.sale_token.token_for_sale_address,token_id:decoded.sale_token.token_for_sale_token_id}},seller:saleV3.is(decoded)||legacySaleV2.is(decoded)?decoded.seller:decoded.sale_seller});},sale);var FixedPriceSaleBigMapRowV1=BigMapRow({key:FixedPriceSaleBigMapKey,value:t.string});var FixedPriceSaleBigMapRowV2=BigMapRow({key:t.string,value:FixedPriceSaleBigMapKey});export var FixedPriceSaleBigMap=t.array(sequenceCodecs(t.union([FixedPriceSaleBigMapRowV1,FixedPriceSaleBigMapRowV2]),function(row){return FixedPriceSaleBigMapRowV1.is(row)?merge(row,{key:row.id.toString(),value:row.key},{value:{isLegacy:true,sale_data:{price:row.value}}}):merge(row,{value:{isLegacy:false}});},FixedPriceSaleBigMapRowV2));// Compatibility: fixed_price_sale contracts may have different storage\n// depending on which version was originated. Older versions only contain a\n// number referencing a `sales` bigmap, while newer versions store this number\n// in a `sales` field. For example:\n//   Legacy version:\n//     42\n//   Current version:\n//     { sales: 42 }\n//\n// This decoder conforms both storage schemas into the current version.\nexport var FixedPriceSaleStorage=sequenceCodecs(t.union([t.number,t.type({sales:t.number})]),function(sales){return t.number.is(sales)?{sales:sales}:sales;},t.type({sales:t.number}));//// NFT Metadata\nexport var NftMetadataFormat=t.partial({uri:t.string,hash:t.string,mimeType:t.string,fileSize:t.number,fileName:t.string,duration:t.string,dimensions:t.partial({value:t.string,unit:t.string}),dataRate:t.partial({value:t.number,unit:t.string})});export var NftMetadataAttribute=t.intersection([t.type({name:t.string,value:t.string}),t.partial({type:t.string})]);export var NftMetadata=t.partial({'':t.string,name:t.string,minter:t.string,symbol:t.string,decimals:t.number,rightUri:t.string,artifactUri:t.string,displayUri:t.string,thumbnailUri:t.string,externalUri:t.string,description:t.string,creators:t.array(t.string),contributors:t.array(t.string),publishers:t.array(t.string),date:t.string,blocklevel:t.number,type:t.string,tags:t.array(t.string),genres:t.array(t.string),language:t.string,identifier:t.string,rights:t.string,isTransferable:t.boolean,isBooleanAmount:t.boolean,shouldPreferSymbol:t.boolean,formats:t.array(NftMetadataFormat),attributes:t.array(NftMetadataAttribute)});export var NftSale=t.type({id:t.number,seller:t.string,price:t.number,mutez:t.number,type:t.string,saleToken:t.type({address:t.string,tokenId:t.number}),saleId:t.number});export var Nft=t.intersection([t.type({id:t.number,title:t.string,owner:t.string,description:t.string,artifactUri:t.string,metadata:NftMetadata}),t.partial({sale:NftSale,address:t.string})]);//// Contract Metadata\nexport var AssetContractMetadata=t.type({name:t.string});export var AssetContract=t.intersection([ContractRow(t.unknown),t.type({metadata:AssetContractMetadata})]);","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/src/lib/nfts/decoders.ts"],"names":["t","e","merge","ContractRow","storage","type","string","kind","tzips","union","array","undefined","address","balance","number","creator","numContracts","numDelegations","numOriginations","numTransactions","numReveals","numMigrations","firstActivity","firstActivityTime","lastActivity","lastActivityTime","BigMapRow","props","id","active","boolean","hash","key","value","firstLevel","lastLevel","updates","BigMapUpdateRow","content","level","timestamp","bigmap","contract","intersection","partial","alias","path","action","AssetMetadataBigMap","LedgerBigMap","TokenMetadataBigMap","token_id","token_info","sequenceCodecs","inputCodec","transform","outputCodec","name","Type","is","input","context","chain","decoded","validate","encode","legacySaleV1","sale_seller","sale_token","token_for_sale_address","token_for_sale_token_id","legacySaleV2","seller","saleV3","sale_data","amount","price","fa2_address","sale","isLegacy","FixedPriceSaleBigMapKey","FixedPriceSaleBigMapRowV1","FixedPriceSaleBigMapRowV2","FixedPriceSaleBigMap","row","toString","FixedPriceSaleStorage","sales","NftMetadataFormat","uri","mimeType","fileSize","fileName","duration","dimensions","unit","dataRate","NftMetadataAttribute","NftMetadata","minter","symbol","decimals","rightUri","artifactUri","displayUri","thumbnailUri","externalUri","description","creators","contributors","publishers","date","blocklevel","tags","genres","language","identifier","rights","isTransferable","isBooleanAmount","shouldPreferSymbol","formats","attributes","NftSale","mutez","saleToken","tokenId","saleId","Nft","title","owner","metadata","AssetContractMetadata","AssetContract","unknown"],"mappings":"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","sourcesContent":["/* eslint-disable no-redeclare */\nimport * as t from 'io-ts';\nimport * as e from 'fp-ts/Either';\nimport merge from \"ts-deepmerge\";\n\n//// Contracts\n\nexport const ContractRow = <S extends t.Mixed>(storage: S) =>\n  t.type({\n    type: t.string,\n    kind: t.string,\n    tzips: t.union([t.array(t.string), t.undefined]),\n    address: t.string,\n    balance: t.number,\n    creator: t.type({\n      address: t.string\n    }),\n    numContracts: t.number,\n    numDelegations: t.number,\n    numOriginations: t.number,\n    numTransactions: t.number,\n    numReveals: t.number,\n    numMigrations: t.number,\n    firstActivity: t.number,\n    firstActivityTime: t.string,\n    lastActivity: t.number,\n    lastActivityTime: t.string,\n    storage: storage\n  });\n\n//// Generic BigMaps\n\nexport const BigMapRow = <K extends t.Mixed, V extends t.Mixed>(props: {\n  key: K;\n  value: V;\n}) =>\n  t.type({\n    id: t.number,\n    active: t.boolean,\n    hash: t.string,\n    key: props.key,\n    value: props.value,\n    firstLevel: t.number,\n    lastLevel: t.number,\n    updates: t.number\n  });\n\nexport const BigMapUpdateRow = <K extends t.Mixed, V extends t.Mixed>(content: {\n  key: K;\n  value: V;\n}) =>\n  t.type({\n    id: t.number,\n    level: t.number,\n    timestamp: t.string,\n    bigmap: t.number,\n    contract: t.intersection([\n      t.partial({ alias: t.string }),\n      t.type({ address: t.string })\n    ]),\n    path: t.string,\n    action: t.string,\n    content: t.type({ hash: t.string, key: content.key, value: content.value })\n  });\n\n//// FA2 BigMaps\n\nexport type AssetMetadataBigMap = t.TypeOf<typeof AssetMetadataBigMap>;\nexport const AssetMetadataBigMap = t.array(\n  BigMapRow({ key: t.string, value: t.string })\n);\n\nexport type LedgerBigMap = t.TypeOf<typeof LedgerBigMap>;\nexport const LedgerBigMap = t.array(\n  BigMapRow({ key: t.string, value: t.string })\n);\n\nexport type TokenMetadataBigMap = t.TypeOf<typeof TokenMetadataBigMap>;\nexport const TokenMetadataBigMap = t.array(\n  BigMapRow({\n    key: t.string,\n    value: t.type({\n      token_id: t.string,\n      token_info: t.type({\n        '': t.string\n      })\n    })\n  })\n);\n\n//// FixedPriceSale BigMaps\n\nfunction sequenceCodecs<A, B, O, P, H, I>(\n  inputCodec: t.Type<A, O, H>,\n  transform: (decoded: A) => I,\n  outputCodec: t.Type<B, P, I>,\n  name: string = outputCodec.name\n): t.Type<B, P, H> {\n  return new t.Type(\n    name,\n    outputCodec.is,\n    (input, context) =>\n      e.chain((decoded: A) => {\n        return outputCodec.validate(transform(decoded), context);\n      })(inputCodec.validate(input, context)),\n    outputCodec.encode\n  );\n}\n\n// Compatibility: Some fixed_price_sale contract bigmaps use a `sale_seller`\n// field while others use a `seller` field. This decoder conforms all bigmaps\n// to use the `sale_seller` field. The decoder receives an \"input\" codec that\n// describes the `sale_seller` and `seller` fields as optional strings. This\n// initial validation allows us to reference these (possibly undefined) fields\n// and pass them to the \"output\" codec for validation via a transformation\n// function.\n//\n// In this case the transformation defines the `sale_seller` field as one of the\n// two input fields. Note the resulting field could be undefined; however, the\n// \"output\" codec will fail if this is the case.\n\nexport type FixedPriceSaleBigMapKey = t.TypeOf<typeof FixedPriceSaleBigMapKey>;\nconst legacySaleV1 = t.type({\n    sale_seller: t.string,\n    sale_token: t.type({\n      token_for_sale_address: t.string,\n      token_for_sale_token_id: t.string\n    })\n  });\nconst legacySaleV2 = t.type({\n    seller: t.string,\n    sale_token: t.type({\n      token_for_sale_address: t.string,\n      token_for_sale_token_id: t.string\n    })\n  });\nconst saleV3 = t.type({\n  sale_data: t.type({\n    amount: t.string,\n    price: t.string,\n    sale_token: t.type({\n      fa2_address: t.string,\n      token_id: t.string\n    }),\n  }),\n  seller: t.string\n});\nconst sale = t.intersection([\n  saleV3,\n  t.partial({ isLegacy: t.boolean })\n]);\n\nexport const FixedPriceSaleBigMapKey = sequenceCodecs(\n  t.union([ legacySaleV1, legacySaleV2, saleV3 ]),\n  decoded => ({\n    ...decoded,\n    sale_data: saleV3.is(decoded) ? decoded.sale_data : {\n      amount: \"1\",\n      price: \"0\",\n      sale_token: {\n        fa2_address: decoded.sale_token.token_for_sale_address,\n        token_id: decoded.sale_token.token_for_sale_token_id\n      }\n    },\n    seller: (saleV3.is(decoded) || legacySaleV2.is(decoded)) ? decoded.seller : decoded.sale_seller\n  }),\n  sale\n);\n\nconst FixedPriceSaleBigMapRowV1 = BigMapRow({\n  key: FixedPriceSaleBigMapKey,\n  value: t.string\n});\n\nconst FixedPriceSaleBigMapRowV2 = BigMapRow({\n  key: t.string,\n  value: FixedPriceSaleBigMapKey\n});\n\nexport type FixedPriceSaleBigMap = t.TypeOf<typeof FixedPriceSaleBigMap>;\nexport const FixedPriceSaleBigMap = t.array(sequenceCodecs(\n  t.union([ FixedPriceSaleBigMapRowV1, FixedPriceSaleBigMapRowV2 ]),\n  row => (FixedPriceSaleBigMapRowV1.is(row) ? merge(\n      row,\n      { key: row.id.toString(), value: row.key },\n      { value: { isLegacy: true, sale_data: { price: row.value }}}\n    ) : merge(row, { value: { isLegacy: false }})\n  ),\n  FixedPriceSaleBigMapRowV2\n));\n\n// Compatibility: fixed_price_sale contracts may have different storage\n// depending on which version was originated. Older versions only contain a\n// number referencing a `sales` bigmap, while newer versions store this number\n// in a `sales` field. For example:\n//   Legacy version:\n//     42\n//   Current version:\n//     { sales: 42 }\n//\n// This decoder conforms both storage schemas into the current version.\n\nexport type FixedPriceSaleStorage = t.TypeOf<typeof FixedPriceSaleStorage>;\nexport const FixedPriceSaleStorage = sequenceCodecs(\n  t.union([t.number, t.type({ sales: t.number })]),\n  sales => (t.number.is(sales) ? { sales } : sales),\n  t.type({ sales: t.number })\n);\n\n//// NFT Metadata\n\nexport type NftMetadataFormat = t.TypeOf<typeof NftMetadataFormat>;\nexport const NftMetadataFormat = t.partial({\n  uri: t.string,\n  hash: t.string,\n  mimeType: t.string,\n  fileSize: t.number,\n  fileName: t.string,\n  duration: t.string,\n  dimensions: t.partial({\n    value: t.string,\n    unit: t.string\n  }),\n  dataRate: t.partial({\n    value: t.number,\n    unit: t.string\n  })\n});\n\nexport type NftMetadataAttribute = t.TypeOf<typeof NftMetadataAttribute>;\nexport const NftMetadataAttribute = t.intersection([\n  t.type({ name: t.string, value: t.string }),\n  t.partial({ type: t.string })\n]);\n\nexport type NftMetadata = t.TypeOf<typeof NftMetadata>;\nexport const NftMetadata = t.partial({\n  '': t.string,\n  name: t.string,\n  minter: t.string,\n  symbol: t.string,\n  decimals: t.number,\n  rightUri: t.string,\n  artifactUri: t.string,\n  displayUri: t.string,\n  thumbnailUri: t.string,\n  externalUri: t.string,\n  description: t.string,\n  creators: t.array(t.string),\n  contributors: t.array(t.string),\n  publishers: t.array(t.string),\n  date: t.string,\n  blocklevel: t.number,\n  type: t.string,\n  tags: t.array(t.string),\n  genres: t.array(t.string),\n  language: t.string,\n  identifier: t.string,\n  rights: t.string,\n  isTransferable: t.boolean,\n  isBooleanAmount: t.boolean,\n  shouldPreferSymbol: t.boolean,\n  formats: t.array(NftMetadataFormat),\n  attributes: t.array(NftMetadataAttribute)\n});\n\nexport type NftSale = t.TypeOf<typeof NftSale>;\nexport const NftSale = t.type({\n  id: t.number,\n  seller: t.string,\n  price: t.number,\n  mutez: t.number,\n  type: t.string,\n  saleToken: t.type({\n    address: t.string,\n    tokenId: t.number\n  }),\n  saleId: t.number\n});\n\nexport type Nft = t.TypeOf<typeof Nft>;\nexport const Nft = t.intersection([\n  t.type({\n    id: t.number,\n    title: t.string,\n    owner: t.string,\n    description: t.string,\n    artifactUri: t.string,\n    metadata: NftMetadata\n  }),\n  t.partial({\n    sale: NftSale,\n    address: t.string\n  })\n]);\n\n//// Contract Metadata\n\nexport const AssetContractMetadata = t.type({\n  name: t.string\n});\n\nexport type AssetContract = t.TypeOf<typeof AssetContract>;\nexport const AssetContract = t.intersection([\n  ContractRow(t.unknown),\n  t.type({\n    metadata: AssetContractMetadata\n  })\n]);\n"]},"metadata":{},"sourceType":"module"}