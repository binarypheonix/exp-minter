{"ast":null,"code":"import _toConsumableArray from\"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _defineProperty from\"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";/* eslint-disable no-redeclare */import{createAsyncThunk}from'@reduxjs/toolkit';import{createAssetContract,mintToken,mintTokens,transferToken,listTokenForSale,cancelTokenSale,cancelTokenSaleLegacy,buyToken,buyTokenLegacy}from'../../lib/nfts/actions';import{ErrorKind}from'./errors';import{getContractNftsQuery,getWalletAssetContractsQuery}from'./queries';import{validateCreateNftForm}from'../validators/createNft';import{uploadIPFSFile,uploadIPFSImageWithThumbnail}from'../../lib/util/ipfs';import{connectWallet}from'./wallet';import{NftMetadata}from'../../lib/nfts/decoders';import{notifyPending,notifyFulfilled}from'../slices/notificationsActions';import parse from'csv-parse/lib/sync';import*as t from'io-ts';export var readFileAsDataUrlAction=createAsyncThunk('action/readFileAsDataUrl',/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref,_ref2){var ns,file,rejectWithValue,readFile;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:ns=_ref.ns,file=_ref.file;rejectWithValue=_ref2.rejectWithValue;readFile=new Promise(function(resolve,reject){var name=file.name,type=file.type,size=file.size;var reader=new FileReader();if(!type){if(name.substr(-4)==='.glb'){type='model/gltf-binary';}if(name.substr(-5)==='.gltf'){type='model/gltf+json';}}reader.onload=function(e){var _e$target;var buffer=(_e$target=e.target)===null||_e$target===void 0?void 0:_e$target.result;if(!buffer||!(buffer instanceof ArrayBuffer)){return reject();}var blob=new Blob([new Uint8Array(buffer)],{type:type});var objectUrl=window.URL.createObjectURL(blob);return resolve({ns:ns,result:{objectUrl:objectUrl,name:name,type:type,size:size}});};reader.readAsArrayBuffer(file);});_context.prev=3;_context.next=6;return readFile;case 6:return _context.abrupt(\"return\",_context.sent);case 9:_context.prev=9;_context.t0=_context[\"catch\"](3);return _context.abrupt(\"return\",rejectWithValue({kind:ErrorKind.UnknownError,message:'Could not read file'}));case 12:case\"end\":return _context.stop();}}},_callee,null,[[3,9]]);}));return function(_x,_x2){return _ref3.apply(this,arguments);};}());export var createAssetContractAction=createAsyncThunk('action/createAssetContract',/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(name,_ref4){var getState,rejectWithValue,dispatch,requestId,_getState,system,op,pendingMessage,_yield$op$contract,address,fulfilledMessage;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:getState=_ref4.getState,rejectWithValue=_ref4.rejectWithValue,dispatch=_ref4.dispatch,requestId=_ref4.requestId;_getState=getState(),system=_getState.system;if(!(system.status!=='WalletConnected')){_context2.next=4;break;}return _context2.abrupt(\"return\",rejectWithValue({kind:ErrorKind.WalletNotConnected,message:'Cannot create collection: Wallet not connected'}));case 4:_context2.prev=4;_context2.next=7;return createAssetContract(system,{name:name});case 7:op=_context2.sent;pendingMessage=\"Creating new collection \".concat(name);dispatch(notifyPending(requestId,pendingMessage));_context2.next=12;return op.confirmation();case 12:_context2.next=14;return op.contract();case 14:_yield$op$contract=_context2.sent;address=_yield$op$contract.address;fulfilledMessage=\"Created new collection \".concat(name,\" (\").concat(address,\")\");dispatch(notifyFulfilled(requestId,fulfilledMessage));// TODO: Poll for contract availability on indexer\ndispatch(getWalletAssetContractsQuery());return _context2.abrupt(\"return\",{name:name,address:address});case 22:_context2.prev=22;_context2.t0=_context2[\"catch\"](4);return _context2.abrupt(\"return\",rejectWithValue({kind:ErrorKind.CreateAssetContractFailed,message:'Collection creation failed'}));case 25:case\"end\":return _context2.stop();}}},_callee2,null,[[4,22]]);}));return function(_x3,_x4){return _ref5.apply(this,arguments);};}());function appendAttributes(metadata,attributes){return attributes.reduce(function(acc,row){var _acc$attributes;var keys=Object.keys(NftMetadata.props);var key=keys.find(function(k){return k===row.name;});if(key&&NftMetadata.props[key].decode(row.value)._tag==='Right'){return _objectSpread(_objectSpread({},acc),{},_defineProperty({},key,row.value));}var attribute={name:row.name,value:row.value};return _objectSpread(_objectSpread({},acc),{},{attributes:[].concat(_toConsumableArray((_acc$attributes=acc.attributes)!==null&&_acc$attributes!==void 0?_acc$attributes:[]),[attribute])});},metadata);}function appendStateMetadata(state,metadata,system){var appendedMetadata=_objectSpread(_objectSpread({},metadata),{},{name:state.fields.name,minter:system.tzPublicKey||undefined,description:state.fields.description||undefined,attributes:[]});return appendAttributes(appendedMetadata,state.attributes);}export var mintTokenAction=createAsyncThunk('action/mintToken',/*#__PURE__*/function(){var _ref7=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_,_ref6){var getState,rejectWithValue,dispatch,requestId,_getState2,system,state,file,_state$selectedFile,objectUrl,name,type,fetched,blob,ipfsMetadata,imageResponse,displayFile,_state$displayImageFi,_objectUrl,_name,_type,_fetched,_blob,fileResponse,_imageResponse,_fileResponse,address,metadata,op,pendingMessage,fulfilledMessage;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:getState=_ref6.getState,rejectWithValue=_ref6.rejectWithValue,dispatch=_ref6.dispatch,requestId=_ref6.requestId;_getState2=getState(),system=_getState2.system,state=_getState2.createNft;if(!(state.selectedFile===null)){_context3.next=6;break;}return _context3.abrupt(\"return\",rejectWithValue({kind:ErrorKind.UnknownError,message:'Could not mint token: no file selected'}));case 6:if(!(system.status!=='WalletConnected')){_context3.next=10;break;}return _context3.abrupt(\"return\",rejectWithValue({kind:ErrorKind.WalletNotConnected,message:'Could not mint token: no wallet connected'}));case 10:if(validateCreateNftForm(state)){_context3.next=12;break;}return _context3.abrupt(\"return\",rejectWithValue({kind:ErrorKind.CreateNftFormInvalid,message:'Could not mint token: form validation failed'}));case 12:_context3.prev=12;_state$selectedFile=state.selectedFile,objectUrl=_state$selectedFile.objectUrl,name=_state$selectedFile.name,type=_state$selectedFile.type;_context3.next=16;return fetch(objectUrl);case 16:fetched=_context3.sent;_context3.next=19;return fetched.blob();case 19:blob=_context3.sent;file=new File([blob],name,{type:type});_context3.next=26;break;case 23:_context3.prev=23;_context3.t0=_context3[\"catch\"](12);return _context3.abrupt(\"return\",rejectWithValue({kind:ErrorKind.UnknownError,message:'Could not mint token: selected file not found'}));case 26:ipfsMetadata={};_context3.prev=27;if(!/^image\\/.*/.test(file.type)){_context3.next=38;break;}_context3.next=31;return uploadIPFSImageWithThumbnail(system.config.ipfsApi,file);case 31:imageResponse=_context3.sent;ipfsMetadata.artifactUri=imageResponse.data.ipfsUri;ipfsMetadata.displayUri=imageResponse.data.ipfsUri;ipfsMetadata.thumbnailUri=imageResponse.data.thumbnail.ipfsUri;ipfsMetadata.formats=[{fileSize:imageResponse.headers['content-length'],mimeType:imageResponse.headers['content-type']}];_context3.next=72;break;case 38:if(!/^video\\/.*/.test(file.type)){_context3.next=67;break;}if(!(state.displayImageFile===null)){_context3.next=41;break;}return _context3.abrupt(\"return\",rejectWithValue({kind:ErrorKind.IPFSUploadFailed,message:'Ipfs upload failed: Video display file not found'}));case 41:_context3.prev=41;_state$displayImageFi=state.displayImageFile,_objectUrl=_state$displayImageFi.objectUrl,_name=_state$displayImageFi.name,_type=_state$displayImageFi.type;_context3.next=45;return fetch(_objectUrl);case 45:_fetched=_context3.sent;_context3.next=48;return _fetched.blob();case 48:_blob=_context3.sent;displayFile=new File([_blob],_name,{type:_type});_context3.next=55;break;case 52:_context3.prev=52;_context3.t1=_context3[\"catch\"](41);return _context3.abrupt(\"return\",rejectWithValue({kind:ErrorKind.UnknownError,message:'Could not mint token: video display file not found'}));case 55:_context3.next=57;return uploadIPFSFile(system.config.ipfsApi,file);case 57:fileResponse=_context3.sent;_context3.next=60;return uploadIPFSImageWithThumbnail(system.config.ipfsApi,displayFile);case 60:_imageResponse=_context3.sent;ipfsMetadata.artifactUri=fileResponse.data.ipfsUri;ipfsMetadata.displayUri=_imageResponse.data.ipfsUri;ipfsMetadata.thumbnailUri=_imageResponse.data.thumbnail.ipfsUri;ipfsMetadata.formats=[{fileSize:fileResponse.headers['content-length'],mimeType:fileResponse.headers['content-type']}];_context3.next=72;break;case 67:_context3.next=69;return uploadIPFSFile(system.config.ipfsApi,file);case 69:_fileResponse=_context3.sent;ipfsMetadata.artifactUri=_fileResponse.data.ipfsUri;ipfsMetadata.formats=[{fileSize:_fileResponse.data.size,mimeType:file.type}];case 72:_context3.next=77;break;case 74:_context3.prev=74;_context3.t2=_context3[\"catch\"](27);return _context3.abrupt(\"return\",rejectWithValue({kind:ErrorKind.IPFSUploadFailed,message:'IPFS upload failed'}));case 77:address=state.collectionAddress;metadata=appendStateMetadata(state,ipfsMetadata,system);_context3.prev=79;_context3.next=82;return mintToken(system,address,metadata);case 82:op=_context3.sent;pendingMessage=\"Minting new token: \".concat(metadata.name);dispatch(notifyPending(requestId,pendingMessage));_context3.next=87;return op.confirmation(2);case 87:fulfilledMessage=\"Created new token: \".concat(metadata.name,\" in \").concat(address);dispatch(notifyFulfilled(requestId,fulfilledMessage));dispatch(getContractNftsQuery(address));return _context3.abrupt(\"return\",{contract:address,metadata:metadata});case 93:_context3.prev=93;_context3.t3=_context3[\"catch\"](79);return _context3.abrupt(\"return\",rejectWithValue({kind:ErrorKind.MintTokenFailed,message:'Mint token failed'}));case 96:case\"end\":return _context3.stop();}}},_callee3,null,[[12,23],[27,74],[41,52],[79,93]]);}));return function(_x5,_x6){return _ref7.apply(this,arguments);};}());var ParsedCsvRow=t.intersection([t.type({name:t.string,description:t.string,artifactUri:t.string,collection:t.string}),t.partial({displayUri:t.string}),t.record(t.string,t.string)]);var ParsedCsv=t.brand(t.array(ParsedCsvRow),function(n){return n.length>0;},'NonEmptyArray');export var mintCsvTokensAction=createAsyncThunk('action/mintCsvTokens',/*#__PURE__*/function(){var _ref9=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(_,_ref8){var getState,rejectWithValue,dispatch,requestId,_getState3,system,state,text,parsed,attrRegex,attrRegexTest,metadataArray,address,op,pendingMessage,fulfilledMessage;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:getState=_ref8.getState,rejectWithValue=_ref8.rejectWithValue,dispatch=_ref8.dispatch,requestId=_ref8.requestId;_getState3=getState(),system=_getState3.system,state=_getState3.createNftCsvImport;if(!(system.status!=='WalletConnected')){_context4.next=4;break;}return _context4.abrupt(\"return\",rejectWithValue({kind:ErrorKind.WalletNotConnected,message:'Wallet not connected'}));case 4:if(!(state.selectedCsvFile===null)){_context4.next=6;break;}return _context4.abrupt(\"return\",rejectWithValue({kind:ErrorKind.UnknownError,message:'No CSV file selected'}));case 6:_context4.prev=6;_context4.next=9;return fetch(state.selectedCsvFile.objectUrl).then(function(r){return r.text();});case 9:text=_context4.sent;_context4.next=15;break;case 12:_context4.prev=12;_context4.t0=_context4[\"catch\"](6);return _context4.abrupt(\"return\",rejectWithValue({kind:ErrorKind.UnknownError,message:'Could not mint tokens: selected CSV file not found'}));case 15:parsed=parse(text,{columns:true,skipEmptyLines:true});if(ParsedCsv.is(parsed)){_context4.next=19;break;}console.log('ERROR:',parsed);return _context4.abrupt(\"return\",rejectWithValue({kind:ErrorKind.UnknownError,message:''}));case 19:attrRegex=/^attribute\\./;attrRegexTest=new RegExp(attrRegex.source+'.+');metadataArray=parsed.map(function(p){var attributes=Object.keys(p).filter(function(k){return attrRegexTest.test(k);}).map(function(k){return{name:k.split(attrRegex)[1],value:p[k]};});var metadata={name:p.name,minter:system.tzPublicKey,description:p.description,artifactUri:p.artifactUri,displayUri:p.displayUri,attributes:[]};return appendAttributes(metadata,attributes);});_context4.prev=22;address=parsed[0].collection;_context4.next=26;return mintTokens(system,address,metadataArray);case 26:op=_context4.sent;pendingMessage=\"Minting new tokens from CSV\";dispatch(notifyPending(requestId,pendingMessage));_context4.next=31;return op.confirmation(2);case 31:fulfilledMessage=\"Created new tokens from CSV in \".concat(address);dispatch(notifyFulfilled(requestId,fulfilledMessage));dispatch(getContractNftsQuery(address));_context4.next=39;break;case 36:_context4.prev=36;_context4.t1=_context4[\"catch\"](22);return _context4.abrupt(\"return\",rejectWithValue({kind:ErrorKind.MintTokenFailed,message:'Mint tokens from CSV failed'}));case 39:return _context4.abrupt(\"return\",null);case 40:case\"end\":return _context4.stop();}}},_callee4,null,[[6,12],[22,36]]);}));return function(_x7,_x8){return _ref9.apply(this,arguments);};}());export var transferTokenAction=createAsyncThunk('action/transferToken',/*#__PURE__*/function(){var _ref10=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(args,api){var getState,rejectWithValue,dispatch,requestId,contract,tokenId,to,_getState4,system,op;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:getState=api.getState,rejectWithValue=api.rejectWithValue,dispatch=api.dispatch,requestId=api.requestId;contract=args.contract,tokenId=args.tokenId,to=args.to;_getState4=getState(),system=_getState4.system;if(!(system.status!=='WalletConnected')){_context5.next=5;break;}return _context5.abrupt(\"return\",rejectWithValue({kind:ErrorKind.WalletNotConnected,message:'Could not transfer token: no wallet connected'}));case 5:_context5.prev=5;_context5.next=8;return transferToken(system,contract,tokenId,to);case 8:op=_context5.sent;dispatch(notifyPending(requestId,\"Transferring token to \".concat(to)));_context5.next=12;return op.confirmation(2);case 12:dispatch(notifyFulfilled(requestId,\"Transferred token to \".concat(to)));dispatch(getContractNftsQuery(contract));return _context5.abrupt(\"return\",args);case 17:_context5.prev=17;_context5.t0=_context5[\"catch\"](5);return _context5.abrupt(\"return\",rejectWithValue({kind:ErrorKind.TransferTokenFailed,message:'Transfer token failed'}));case 20:case\"end\":return _context5.stop();}}},_callee5,null,[[5,17]]);}));return function(_x9,_x10){return _ref10.apply(this,arguments);};}());export var listTokenAction=createAsyncThunk('action/listToken',/*#__PURE__*/function(){var _ref11=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(args,api){var getState,rejectWithValue,dispatch,requestId,contract,tokenId,salePrice,_getState5,system,marketplaceContract,op,pendingMessage,fulfilledMessage;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:getState=api.getState,rejectWithValue=api.rejectWithValue,dispatch=api.dispatch,requestId=api.requestId;contract=args.contract,tokenId=args.tokenId,salePrice=args.salePrice;_getState5=getState(),system=_getState5.system;marketplaceContract=system.config.contracts.marketplace.fixedPrice.tez;if(!(system.status!=='WalletConnected')){_context6.next=6;break;}return _context6.abrupt(\"return\",rejectWithValue({kind:ErrorKind.WalletNotConnected,message:'Could not list token: no wallet connected'}));case 6:_context6.prev=6;_context6.next=9;return listTokenForSale(system,marketplaceContract,contract,tokenId,salePrice,1);case 9:op=_context6.sent;pendingMessage=\"Listing token for sale for \".concat(salePrice/1000000,\"\\uA729\");dispatch(notifyPending(requestId,pendingMessage));_context6.next=14;return op.confirmation(2);case 14:fulfilledMessage=\"Token listed for sale for \".concat(salePrice/1000000,\"\\uA729\");dispatch(notifyFulfilled(requestId,fulfilledMessage));dispatch(getContractNftsQuery(contract));return _context6.abrupt(\"return\",args);case 20:_context6.prev=20;_context6.t0=_context6[\"catch\"](6);console.log(_context6.t0);return _context6.abrupt(\"return\",rejectWithValue({kind:ErrorKind.ListTokenFailed,message:'List token failed'}));case 24:case\"end\":return _context6.stop();}}},_callee6,null,[[6,20]]);}));return function(_x11,_x12){return _ref11.apply(this,arguments);};}());export var cancelTokenSaleAction=createAsyncThunk('action/cancelTokenSale',/*#__PURE__*/function(){var _ref12=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(args,api){var getState,rejectWithValue,dispatch,requestId,contract,tokenId,saleId,saleType,_getState6,system,marketplaceContract,op;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:getState=api.getState,rejectWithValue=api.rejectWithValue,dispatch=api.dispatch,requestId=api.requestId;contract=args.contract,tokenId=args.tokenId,saleId=args.saleId,saleType=args.saleType;_getState6=getState(),system=_getState6.system;marketplaceContract=system.config.contracts.marketplace.fixedPrice.tez;if(!(system.status!=='WalletConnected')){_context7.next=6;break;}return _context7.abrupt(\"return\",rejectWithValue({kind:ErrorKind.WalletNotConnected,message:'Could not list token: no wallet connected'}));case 6:_context7.prev=6;if(!(saleType===\"fixedPriceLegacy\")){_context7.next=13;break;}_context7.next=10;return cancelTokenSaleLegacy(system,marketplaceContract,contract,tokenId);case 10:op=_context7.sent;_context7.next=16;break;case 13:_context7.next=15;return cancelTokenSale(system,marketplaceContract,contract,tokenId,saleId);case 15:op=_context7.sent;case 16:dispatch(notifyPending(requestId,\"Canceling token sale\"));_context7.next=19;return op.confirmation(2);case 19:dispatch(notifyFulfilled(requestId,\"Token sale canceled\"));dispatch(getContractNftsQuery(contract));return _context7.abrupt(\"return\",{contract:contract,tokenId:tokenId,saleId:saleId,saleType:saleType});case 24:_context7.prev=24;_context7.t0=_context7[\"catch\"](6);return _context7.abrupt(\"return\",rejectWithValue({kind:ErrorKind.CancelTokenSaleFailed,message:'Cancel token sale failed'}));case 27:case\"end\":return _context7.stop();}}},_callee7,null,[[6,24]]);}));return function(_x13,_x14){return _ref12.apply(this,arguments);};}());export var buyTokenAction=createAsyncThunk('action/buyToken',/*#__PURE__*/function(){var _ref13=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(args,api){var getState,rejectWithValue,dispatch,requestId,contract,tokenId,tokenSeller,salePrice,saleId,saleType,_getState7,system,marketplaceContract,res,op,pendingMessage,fulfilledMessage;return _regeneratorRuntime.wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:getState=api.getState,rejectWithValue=api.rejectWithValue,dispatch=api.dispatch,requestId=api.requestId;contract=args.contract,tokenId=args.tokenId,tokenSeller=args.tokenSeller,salePrice=args.salePrice,saleId=args.saleId,saleType=args.saleType;_getState7=getState(),system=_getState7.system;marketplaceContract=system.config.contracts.marketplace.fixedPrice.tez;if(!(system.status!=='WalletConnected')){_context8.next=11;break;}_context8.next=7;return dispatch(connectWallet());case 7:res=_context8.sent;if(!(!res.payload||!('wallet'in res.payload))){_context8.next=10;break;}return _context8.abrupt(\"return\",rejectWithValue({kind:ErrorKind.WalletNotConnected,message:'Could not list token: no wallet connected'}));case 10:system=res.payload;case 11:_context8.prev=11;if(!(saleType===\"fixedPriceLegacy\")){_context8.next=18;break;}_context8.next=15;return buyTokenLegacy(system,marketplaceContract,contract,tokenId,tokenSeller,salePrice);case 15:op=_context8.sent;_context8.next=21;break;case 18:_context8.next=20;return buyToken(system,marketplaceContract,saleId,salePrice);case 20:op=_context8.sent;case 21:pendingMessage=\"Buying token from \".concat(tokenSeller,\" for \").concat(salePrice);dispatch(notifyPending(requestId,pendingMessage));_context8.next=25;return op.confirmation(2);case 25:fulfilledMessage=\"Bought token from \".concat(tokenSeller,\" for \").concat(salePrice);dispatch(notifyFulfilled(requestId,fulfilledMessage));dispatch(getContractNftsQuery(contract));return _context8.abrupt(\"return\",{contract:contract,tokenId:tokenId,saleId:saleId,saleType:saleType});case 31:_context8.prev=31;_context8.t0=_context8[\"catch\"](11);return _context8.abrupt(\"return\",rejectWithValue({kind:ErrorKind.BuyTokenFailed,message:'Purchase token failed'}));case 34:case\"end\":return _context8.stop();}}},_callee8,null,[[11,31]]);}));return function(_x15,_x16){return _ref13.apply(this,arguments);};}());","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/src/reducer/async/actions.ts"],"names":["createAsyncThunk","createAssetContract","mintToken","mintTokens","transferToken","listTokenForSale","cancelTokenSale","cancelTokenSaleLegacy","buyToken","buyTokenLegacy","ErrorKind","getContractNftsQuery","getWalletAssetContractsQuery","validateCreateNftForm","uploadIPFSFile","uploadIPFSImageWithThumbnail","connectWallet","NftMetadata","notifyPending","notifyFulfilled","parse","t","readFileAsDataUrlAction","ns","file","rejectWithValue","readFile","Promise","resolve","reject","name","type","size","reader","FileReader","substr","onload","e","buffer","target","result","ArrayBuffer","blob","Blob","Uint8Array","objectUrl","window","URL","createObjectURL","readAsArrayBuffer","kind","UnknownError","message","createAssetContractAction","getState","dispatch","requestId","system","status","WalletNotConnected","op","pendingMessage","confirmation","contract","address","fulfilledMessage","CreateAssetContractFailed","appendAttributes","metadata","attributes","reduce","acc","row","keys","Object","props","key","find","k","decode","value","_tag","attribute","appendStateMetadata","state","appendedMetadata","fields","minter","tzPublicKey","undefined","description","mintTokenAction","_","createNft","selectedFile","CreateNftFormInvalid","fetch","fetched","File","ipfsMetadata","test","config","ipfsApi","imageResponse","artifactUri","data","ipfsUri","displayUri","thumbnailUri","thumbnail","formats","fileSize","headers","mimeType","displayImageFile","IPFSUploadFailed","displayFile","fileResponse","collectionAddress","MintTokenFailed","ParsedCsvRow","intersection","string","collection","partial","record","ParsedCsv","brand","array","n","length","mintCsvTokensAction","createNftCsvImport","selectedCsvFile","then","r","text","parsed","columns","skipEmptyLines","is","console","log","attrRegex","attrRegexTest","RegExp","source","metadataArray","map","p","filter","split","transferTokenAction","args","api","tokenId","to","TransferTokenFailed","listTokenAction","salePrice","marketplaceContract","contracts","marketplace","fixedPrice","tez","ListTokenFailed","cancelTokenSaleAction","saleId","saleType","CancelTokenSaleFailed","buyTokenAction","tokenSeller","res","payload","BuyTokenFailed"],"mappings":"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","sourcesContent":["/* eslint-disable no-redeclare */\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport { State } from '..';\nimport {\n  createAssetContract,\n  mintToken,\n  mintTokens,\n  transferToken,\n  listTokenForSale,\n  cancelTokenSale,\n  cancelTokenSaleLegacy,\n  buyToken,\n  buyTokenLegacy\n} from '../../lib/nfts/actions';\nimport { ErrorKind, RejectValue } from './errors';\nimport { getContractNftsQuery, getWalletAssetContractsQuery } from './queries';\nimport { validateCreateNftForm } from '../validators/createNft';\nimport {\n  uploadIPFSFile,\n  uploadIPFSImageWithThumbnail\n} from '../../lib/util/ipfs';\nimport { SelectedFile } from '../slices/createNft';\nimport { connectWallet } from './wallet';\nimport { NftMetadata } from '../../lib/nfts/decoders';\nimport { SystemWithToolkit, SystemWithWallet } from '../../lib/system';\nimport { notifyPending, notifyFulfilled } from '../slices/notificationsActions';\nimport parse from 'csv-parse/lib/sync';\nimport * as t from 'io-ts';\n\ntype Options = {\n  state: State;\n  rejectValue: RejectValue;\n};\n\nexport const readFileAsDataUrlAction = createAsyncThunk<\n  { ns: string; result: SelectedFile },\n  { ns: string; file: File },\n  Options\n>('action/readFileAsDataUrl', async ({ ns, file }, { rejectWithValue }) => {\n  const readFile = new Promise<{ ns: string; result: SelectedFile }>(\n    (resolve, reject) => {\n      let { name, type, size } = file;\n      const reader = new FileReader();\n\n      if (!type) {\n        if (name.substr(-4) === '.glb') {\n          type = 'model/gltf-binary';\n        }\n        if (name.substr(-5) === '.gltf') {\n          type = 'model/gltf+json';\n        }\n      }\n\n      reader.onload = e => {\n        const buffer = e.target?.result;\n        if (!buffer || !(buffer instanceof ArrayBuffer)) {\n          return reject();\n        }\n        const blob = new Blob([new Uint8Array(buffer)], { type });\n        const objectUrl = window.URL.createObjectURL(blob);\n        return resolve({ ns, result: { objectUrl, name, type, size } });\n      };\n      reader.readAsArrayBuffer(file);\n    }\n  );\n  try {\n    return await readFile;\n  } catch (e) {\n    return rejectWithValue({\n      kind: ErrorKind.UnknownError,\n      message: 'Could not read file'\n    });\n  }\n});\n\nexport const createAssetContractAction = createAsyncThunk<\n  { name: string; address: string },\n  string,\n  Options\n>(\n  'action/createAssetContract',\n  async (name, { getState, rejectWithValue, dispatch, requestId }) => {\n    const { system } = getState();\n    if (system.status !== 'WalletConnected') {\n      return rejectWithValue({\n        kind: ErrorKind.WalletNotConnected,\n        message: 'Cannot create collection: Wallet not connected'\n      });\n    }\n    try {\n      const op = await createAssetContract(system, { name });\n      const pendingMessage = `Creating new collection ${name}`;\n      dispatch(notifyPending(requestId, pendingMessage));\n      await op.confirmation();\n\n      const { address } = await op.contract();\n      const fulfilledMessage = `Created new collection ${name} (${address})`;\n      dispatch(notifyFulfilled(requestId, fulfilledMessage));\n      // TODO: Poll for contract availability on indexer\n      dispatch(getWalletAssetContractsQuery());\n      return { name, address };\n    } catch (e) {\n      return rejectWithValue({\n        kind: ErrorKind.CreateAssetContractFailed,\n        message: 'Collection creation failed'\n      });\n    }\n  }\n);\n\ntype Attributes = { name: string; value: string }[];\n\nfunction appendAttributes(metadata: NftMetadata, attributes: Attributes) {\n  return attributes.reduce(\n    (acc, row) => {\n      const keys = Object.keys(NftMetadata.props);\n      const key = keys.find(k => k === row.name) as keyof NftMetadata;\n      if (key && NftMetadata.props[key].decode(row.value)._tag === 'Right') {\n        return { ...acc, [key]: row.value };\n      }\n      const attribute = { name: row.name, value: row.value };\n      return { ...acc, attributes: [...acc.attributes ?? [], attribute] };\n    }, \n    metadata\n  );\n}\n\nfunction appendStateMetadata(\n  state: State['createNft'],\n  metadata: NftMetadata,\n  system: SystemWithToolkit | SystemWithWallet\n) {\n  const appendedMetadata: NftMetadata = {\n    ...metadata,\n    name: state.fields.name as string,\n    minter: system.tzPublicKey || undefined,\n    description: state.fields.description || undefined,\n    attributes: []\n  };\n  return appendAttributes(appendedMetadata, state.attributes);\n}\n\nexport const mintTokenAction = createAsyncThunk<\n  { contract: string; metadata: ReturnType<typeof appendStateMetadata> },\n  undefined,\n  Options\n>(\n  'action/mintToken',\n  async (_, { getState, rejectWithValue, dispatch, requestId }) => {\n    const { system, createNft: state } = getState();\n    if (state.selectedFile === null) {\n      return rejectWithValue({\n        kind: ErrorKind.UnknownError,\n        message: 'Could not mint token: no file selected'\n      });\n    } else if (system.status !== 'WalletConnected') {\n      return rejectWithValue({\n        kind: ErrorKind.WalletNotConnected,\n        message: 'Could not mint token: no wallet connected'\n      });\n    } else if (!validateCreateNftForm(state)) {\n      return rejectWithValue({\n        kind: ErrorKind.CreateNftFormInvalid,\n        message: 'Could not mint token: form validation failed'\n      });\n    }\n\n    let file: File;\n    try {\n      const { objectUrl, name, type } = state.selectedFile;\n      const fetched = await fetch(objectUrl);\n      const blob = await fetched.blob();\n      file = new File([blob], name, { type });\n    } catch (e) {\n      return rejectWithValue({\n        kind: ErrorKind.UnknownError,\n        message: 'Could not mint token: selected file not found'\n      });\n    }\n\n    let ipfsMetadata: NftMetadata = {};\n    try {\n      if (/^image\\/.*/.test(file.type)) {\n        const imageResponse = await uploadIPFSImageWithThumbnail(\n          system.config.ipfsApi,\n          file\n        );\n        ipfsMetadata.artifactUri = imageResponse.data.ipfsUri;\n        ipfsMetadata.displayUri = imageResponse.data.ipfsUri;\n        ipfsMetadata.thumbnailUri = imageResponse.data.thumbnail.ipfsUri;\n        ipfsMetadata.formats = [\n          {\n            fileSize: imageResponse.headers['content-length'],\n            mimeType: imageResponse.headers['content-type']\n          }\n        ];\n      } else if (/^video\\/.*/.test(file.type)) {\n        if (state.displayImageFile === null) {\n          return rejectWithValue({\n            kind: ErrorKind.IPFSUploadFailed,\n            message: 'Ipfs upload failed: Video display file not found'\n          });\n        }\n        let displayFile: File;\n        try {\n          const { objectUrl, name, type } = state.displayImageFile;\n          const fetched = await fetch(objectUrl);\n          const blob = await fetched.blob();\n          displayFile = new File([blob], name, { type });\n        } catch (e) {\n          return rejectWithValue({\n            kind: ErrorKind.UnknownError,\n            message: 'Could not mint token: video display file not found'\n          });\n        }\n        const fileResponse = await uploadIPFSFile(system.config.ipfsApi, file);\n        const imageResponse = await uploadIPFSImageWithThumbnail(\n          system.config.ipfsApi,\n          displayFile\n        );\n        ipfsMetadata.artifactUri = fileResponse.data.ipfsUri;\n        ipfsMetadata.displayUri = imageResponse.data.ipfsUri;\n        ipfsMetadata.thumbnailUri = imageResponse.data.thumbnail.ipfsUri;\n        ipfsMetadata.formats = [\n          {\n            fileSize: fileResponse.headers['content-length'],\n            mimeType: fileResponse.headers['content-type']\n          }\n        ];\n      } else {\n        const fileResponse = await uploadIPFSFile(system.config.ipfsApi, file);\n        ipfsMetadata.artifactUri = fileResponse.data.ipfsUri;\n        ipfsMetadata.formats = [\n          {\n            fileSize: fileResponse.data.size,\n            mimeType: file.type\n          }\n        ];\n      }\n    } catch (e) {\n      return rejectWithValue({\n        kind: ErrorKind.IPFSUploadFailed,\n        message: 'IPFS upload failed'\n      });\n    }\n\n    const address = state.collectionAddress as string;\n    const metadata = appendStateMetadata(state, ipfsMetadata, system);\n\n    try {\n      const op = await mintToken(system, address, metadata);\n      const pendingMessage = `Minting new token: ${metadata.name}`;\n      dispatch(notifyPending(requestId, pendingMessage));\n      await op.confirmation(2);\n\n      const fulfilledMessage = `Created new token: ${metadata.name} in ${address}`;\n      dispatch(notifyFulfilled(requestId, fulfilledMessage));\n      dispatch(getContractNftsQuery(address));\n      return { contract: address, metadata };\n    } catch (e) {\n      return rejectWithValue({\n        kind: ErrorKind.MintTokenFailed,\n        message: 'Mint token failed'\n      });\n    }\n  }\n);\n\ninterface NonEmptyArrayBrand {\n  readonly NonEmptyArray: unique symbol;\n}\n\ntype ParsedCsvRow = t.TypeOf<typeof ParsedCsvRow>;\nconst ParsedCsvRow = t.intersection([\n  t.type({\n    name: t.string,\n    description: t.string,\n    artifactUri: t.string,\n    collection: t.string\n  }),\n  t.partial({\n    displayUri: t.string\n  }),\n  t.record(t.string, t.string)\n]);\n\nconst ParsedCsv = t.brand(\n  t.array(ParsedCsvRow),\n  (n): n is t.Branded<Array<ParsedCsvRow>, NonEmptyArrayBrand> => n.length > 0,\n  'NonEmptyArray'\n);\n\nexport const mintCsvTokensAction = createAsyncThunk<null, undefined, Options>(\n  'action/mintCsvTokens',\n  async (_, { getState, rejectWithValue, dispatch, requestId }) => {\n    const { system, createNftCsvImport: state } = getState();\n    if (system.status !== 'WalletConnected') {\n      return rejectWithValue({\n        kind: ErrorKind.WalletNotConnected,\n        message: 'Wallet not connected'\n      });\n    }\n    if (state.selectedCsvFile === null) {\n      return rejectWithValue({\n        kind: ErrorKind.UnknownError,\n        message: 'No CSV file selected'\n      });\n    }\n\n    let text: string;\n    try {\n      text = await fetch(state.selectedCsvFile.objectUrl).then(r => r.text());\n    } catch (e) {\n      return rejectWithValue({\n        kind: ErrorKind.UnknownError,\n        message: 'Could not mint tokens: selected CSV file not found'\n      });\n    }\n    const parsed = parse(text, { columns: true, skipEmptyLines: true });\n    if (!ParsedCsv.is(parsed)) {\n      console.log('ERROR:', parsed);\n      return rejectWithValue({\n        kind: ErrorKind.UnknownError,\n        message: ''\n      });\n    }\n    const attrRegex = /^attribute\\./;\n    const attrRegexTest = new RegExp(attrRegex.source + '.+');\n    const metadataArray = parsed.map(p => {\n      const attributes = Object.keys(p)\n        .filter(k => attrRegexTest.test(k))\n        .map(k => ({\n          name: k.split(attrRegex)[1],\n          value: p[k]\n        }));\n      const metadata: NftMetadata = {\n        name: p.name,\n        minter: system.tzPublicKey,\n        description: p.description,\n        artifactUri: p.artifactUri,\n        displayUri: p.displayUri,\n        attributes: [],\n      };\n      return appendAttributes(metadata, attributes);\n    });\n\n    try {\n      const address = parsed[0].collection;\n      const op = await mintTokens(system, address, metadataArray);\n      const pendingMessage = `Minting new tokens from CSV`;\n      dispatch(notifyPending(requestId, pendingMessage));\n      await op.confirmation(2);\n\n      const fulfilledMessage = `Created new tokens from CSV in ${address}`;\n      dispatch(notifyFulfilled(requestId, fulfilledMessage));\n      dispatch(getContractNftsQuery(address));\n    } catch (e) {\n      return rejectWithValue({\n        kind: ErrorKind.MintTokenFailed,\n        message: 'Mint tokens from CSV failed'\n      });\n    }\n\n    return null;\n  }\n);\n\nexport const transferTokenAction = createAsyncThunk<\n  { contract: string; tokenId: number; to: string },\n  { contract: string; tokenId: number; to: string },\n  Options\n>('action/transferToken', async (args, api) => {\n  const { getState, rejectWithValue, dispatch, requestId } = api;\n  const { contract, tokenId, to } = args;\n  const { system } = getState();\n  if (system.status !== 'WalletConnected') {\n    return rejectWithValue({\n      kind: ErrorKind.WalletNotConnected,\n      message: 'Could not transfer token: no wallet connected'\n    });\n  }\n  try {\n    const op = await transferToken(system, contract, tokenId, to);\n    dispatch(notifyPending(requestId, `Transferring token to ${to}`));\n    await op.confirmation(2);\n\n    dispatch(notifyFulfilled(requestId, `Transferred token to ${to}`));\n    dispatch(getContractNftsQuery(contract));\n    return args;\n  } catch (e) {\n    return rejectWithValue({\n      kind: ErrorKind.TransferTokenFailed,\n      message: 'Transfer token failed'\n    });\n  }\n});\n\nexport const listTokenAction = createAsyncThunk<\n  { contract: string; tokenId: number; salePrice: number },\n  { contract: string; tokenId: number; salePrice: number },\n  Options\n>('action/listToken', async (args, api) => {\n  const { getState, rejectWithValue, dispatch, requestId } = api;\n  const { contract, tokenId, salePrice } = args;\n  const { system } = getState();\n  const marketplaceContract =\n    system.config.contracts.marketplace.fixedPrice.tez;\n  if (system.status !== 'WalletConnected') {\n    return rejectWithValue({\n      kind: ErrorKind.WalletNotConnected,\n      message: 'Could not list token: no wallet connected'\n    });\n  }\n  try {\n    const op = await listTokenForSale(\n      system,\n      marketplaceContract,\n      contract,\n      tokenId,\n      salePrice,\n      1\n    );\n    const pendingMessage = `Listing token for sale for ${salePrice / 1000000}ꜩ`;\n    dispatch(notifyPending(requestId, pendingMessage));\n    await op.confirmation(2);\n\n    const fulfilledMessage = `Token listed for sale for ${\n      salePrice / 1000000\n    }ꜩ`;\n    dispatch(notifyFulfilled(requestId, fulfilledMessage));\n    dispatch(getContractNftsQuery(contract));\n    return args;\n  } catch (e) {\n      console.log(e);\n    return rejectWithValue({\n      kind: ErrorKind.ListTokenFailed,\n      message: 'List token failed'\n    });\n  }\n});\n\nexport const cancelTokenSaleAction = createAsyncThunk<\n  { contract: string; tokenId: number; saleId: number; saleType: string },\n  { contract: string; tokenId: number; saleId: number; saleType: string },\n  Options\n>('action/cancelTokenSale', async (args, api) => {\n  const { getState, rejectWithValue, dispatch, requestId } = api;\n  const { contract, tokenId, saleId, saleType } = args;\n  const { system } = getState();\n  const marketplaceContract =\n    system.config.contracts.marketplace.fixedPrice.tez;\n  if (system.status !== 'WalletConnected') {\n    return rejectWithValue({\n      kind: ErrorKind.WalletNotConnected,\n      message: 'Could not list token: no wallet connected'\n    });\n  }\n  try {\n    let op;\n    if (saleType === \"fixedPriceLegacy\") {\n      op = await cancelTokenSaleLegacy(\n        system,\n        marketplaceContract,\n        contract,\n        tokenId\n      );\n    } else {\n      op = await cancelTokenSale(\n        system,\n        marketplaceContract,\n        contract,\n        tokenId,\n        saleId\n      );\n    }\n\n    dispatch(notifyPending(requestId, `Canceling token sale`));\n    await op.confirmation(2);\n\n    dispatch(notifyFulfilled(requestId, `Token sale canceled`));\n    dispatch(getContractNftsQuery(contract));\n    return { contract: contract, tokenId: tokenId, saleId: saleId, saleType: saleType };\n  } catch (e) {\n    return rejectWithValue({\n      kind: ErrorKind.CancelTokenSaleFailed,\n      message: 'Cancel token sale failed'\n    });\n  }\n});\n\nexport const buyTokenAction = createAsyncThunk<\n  { contract: string; tokenId: number; saleId: number; saleType: string },\n  { contract: string; tokenId: number; tokenSeller: string; salePrice: number; saleId: number; saleType: string },\n  Options\n>('action/buyToken', async (args, api) => {\n  const { getState, rejectWithValue, dispatch, requestId } = api;\n  const { contract, tokenId, tokenSeller, salePrice, saleId, saleType } = args;\n  let { system } = getState();\n  const marketplaceContract =\n    system.config.contracts.marketplace.fixedPrice.tez;\n  if (system.status !== 'WalletConnected') {\n    const res = await dispatch(connectWallet());\n    if (!res.payload || !('wallet' in res.payload)) {\n      return rejectWithValue({\n        kind: ErrorKind.WalletNotConnected,\n        message: 'Could not list token: no wallet connected'\n      });\n    }\n    system = res.payload;\n  }\n  try {\n    let op;\n    if (saleType === \"fixedPriceLegacy\") {\n      op = await buyTokenLegacy(\n        system,\n        marketplaceContract,\n        contract,\n        tokenId,\n        tokenSeller,\n        salePrice\n      );\n    } else {\n      op = await buyToken(\n        system,\n        marketplaceContract,\n        saleId,\n        salePrice\n      );\n    }\n    const pendingMessage = `Buying token from ${tokenSeller} for ${salePrice}`;\n    dispatch(notifyPending(requestId, pendingMessage));\n    await op.confirmation(2);\n\n    const fulfilledMessage = `Bought token from ${tokenSeller} for ${salePrice}`;\n    dispatch(notifyFulfilled(requestId, fulfilledMessage));\n    dispatch(getContractNftsQuery(contract));\n    return { contract: contract, tokenId: tokenId, saleId: saleId, saleType: saleType };\n  } catch (e) {\n    return rejectWithValue({\n      kind: ErrorKind.BuyTokenFailed,\n      message: 'Purchase token failed'\n    });\n  }\n});\n"]},"metadata":{},"sourceType":"module"}