{"ast":null,"code":"import { getApplicativeMonoid } from './Applicative';\nimport { apFirst as apFirst_, apS as apS_, apSecond as apSecond_, getApplySemigroup as getApplySemigroup_ } from './Apply';\nimport { bind as bind_, chainFirst as chainFirst_ } from './Chain';\nimport { tailRec } from './ChainRec';\nimport { flow, identity, pipe } from './function';\nimport { bindTo as bindTo_, flap as flap_ } from './Functor';\nimport * as _ from './internal';\nimport { separated } from './Separated'; // -------------------------------------------------------------------------------------\n// guards\n// -------------------------------------------------------------------------------------\n\n/**\n * Returns `true` if the either is an instance of `Left`, `false` otherwise.\n *\n * @category guards\n * @since 2.0.0\n */\n\nexport var isLeft = _.isLeft;\n/**\n * Returns `true` if the either is an instance of `Right`, `false` otherwise.\n *\n * @category guards\n * @since 2.0.0\n */\n\nexport var isRight = function isRight(ma) {\n  return ma._tag === 'Right';\n}; // -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n\n/**\n * Constructs a new `Either` holding a `Left` value. This usually represents a failure, due to the right-bias of this\n * structure.\n *\n * @category constructors\n * @since 2.0.0\n */\n\nexport var left = function left(e) {\n  return {\n    _tag: 'Left',\n    left: e\n  };\n};\n/**\n * Constructs a new `Either` holding a `Right` value. This usually represents a successful value due to the right bias\n * of this structure.\n *\n * @category constructors\n * @since 2.0.0\n */\n\nexport var right = function right(a) {\n  return {\n    _tag: 'Right',\n    right: a\n  };\n};\n/**\n * @example\n * import { fromOption, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import { none, some } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     some(1),\n *     fromOption(() => 'error')\n *   ),\n *   right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     none,\n *     fromOption(() => 'error')\n *   ),\n *   left('error')\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\n\nexport var fromOption = function fromOption(onNone) {\n  return function (ma) {\n    return ma._tag === 'None' ? left(onNone()) : right(ma.value);\n  };\n};\n/**\n * @example\n * import { fromPredicate, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     1,\n *     fromPredicate(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     -1,\n *     fromPredicate(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   left('error')\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\n\nexport var fromPredicate = function fromPredicate(predicate, onFalse) {\n  return function (a) {\n    return predicate(a) ? right(a) : left(onFalse(a));\n  };\n}; // -------------------------------------------------------------------------------------\n// destructors\n// -------------------------------------------------------------------------------------\n\n/**\n * Less strict version of [`match`](#match).\n *\n * @category destructors\n * @since 2.10.0\n */\n\nexport var matchW = function matchW(onLeft, onRight) {\n  return function (ma) {\n    return isLeft(ma) ? onLeft(ma.left) : onRight(ma.right);\n  };\n};\n/**\n * Alias of [`matchW`](#matchww).\n *\n * @category destructors\n * @since 2.10.0\n */\n\nexport var foldW = matchW;\n/**\n * Takes two functions and an `Either` value, if the value is a `Left` the inner value is applied to the first function,\n * if the value is a `Right` the inner value is applied to the second function.\n *\n * @example\n * import { match, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * function onLeft(errors: Array<string>): string {\n *   return `Errors: ${errors.join(', ')}`\n * }\n *\n * function onRight(value: number): string {\n *   return `Ok: ${value}`\n * }\n *\n * assert.strictEqual(\n *   pipe(\n *     right(1),\n *     match(onLeft, onRight)\n *   ),\n *   'Ok: 1'\n * )\n * assert.strictEqual(\n *   pipe(\n *     left(['error 1', 'error 2']),\n *     match(onLeft, onRight)\n *   ),\n *   'Errors: error 1, error 2'\n * )\n *\n * @category destructors\n * @since 2.10.0\n */\n\nexport var match = matchW;\n/**\n * Alias of [`match`](#match).\n *\n * @category destructors\n * @since 2.0.0\n */\n\nexport var fold = match;\n/**\n * Less strict version of [`getOrElse`](#getorelse).\n *\n * @category destructors\n * @since 2.6.0\n */\n\nexport var getOrElseW = function getOrElseW(onLeft) {\n  return function (ma) {\n    return isLeft(ma) ? onLeft(ma.left) : ma.right;\n  };\n};\n/**\n * Returns the wrapped value if it's a `Right` or a default value if is a `Left`.\n *\n * @example\n * import { getOrElse, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     right(1),\n *     getOrElse(() => 0)\n *   ),\n *   1\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     left('error'),\n *     getOrElse(() => 0)\n *   ),\n *   0\n * )\n *\n * @category destructors\n * @since 2.0.0\n */\n\nexport var getOrElse = getOrElseW; // -------------------------------------------------------------------------------------\n// interop\n// -------------------------------------------------------------------------------------\n// TODO: make lazy in v3\n\n/**\n * Takes a default and a nullable value, if the value is not nully, turn it into a `Right`, if the value is nully use\n * the provided default as a `Left`.\n *\n * @example\n * import { fromNullable, left, right } from 'fp-ts/Either'\n *\n * const parse = fromNullable('nully')\n *\n * assert.deepStrictEqual(parse(1), right(1))\n * assert.deepStrictEqual(parse(null), left('nully'))\n *\n * @category interop\n * @since 2.0.0\n */\n\nexport var fromNullable = function fromNullable(e) {\n  return function (a) {\n    return a == null ? left(e) : right(a);\n  };\n};\n/**\n * Constructs a new `Either` from a function that might throw.\n *\n * See also [`tryCatchK`](#trycatchk).\n *\n * @example\n * import * as E from 'fp-ts/Either'\n *\n * const unsafeHead = <A>(as: ReadonlyArray<A>): A => {\n *   if (as.length > 0) {\n *     return as[0]\n *   } else {\n *     throw new Error('empty array')\n *   }\n * }\n *\n * const head = <A>(as: ReadonlyArray<A>): E.Either<Error, A> =>\n *   E.tryCatch(() => unsafeHead(as), e => (e instanceof Error ? e : new Error('unknown error')))\n *\n * assert.deepStrictEqual(head([]), E.left(new Error('empty array')))\n * assert.deepStrictEqual(head([1, 2, 3]), E.right(1))\n *\n * @category interop\n * @since 2.0.0\n */\n\nexport var tryCatch = function tryCatch(f, onThrow) {\n  try {\n    return right(f());\n  } catch (e) {\n    return left(onThrow(e));\n  }\n};\n/**\n * Converts a function that may throw to one returning a `Either`.\n *\n * @category interop\n * @since 2.10.0\n */\n\nexport var tryCatchK = function tryCatchK(f, onThrow) {\n  return function () {\n    var a = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      a[_i] = arguments[_i];\n    }\n\n    return tryCatch(function () {\n      return f.apply(void 0, a);\n    }, onThrow);\n  };\n};\n/**\n * @category interop\n * @since 2.9.0\n */\n\nexport var fromNullableK = function fromNullableK(e) {\n  var from = fromNullable(e);\n  return function (f) {\n    return flow(f, from);\n  };\n};\n/**\n * @category interop\n * @since 2.9.0\n */\n\nexport var chainNullableK = function chainNullableK(e) {\n  var from = fromNullableK(e);\n  return function (f) {\n    return chain(from(f));\n  };\n};\n/**\n * @category interop\n * @since 2.10.0\n */\n\nexport var toUnion = /*#__PURE__*/foldW(identity, identity); // -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n\n/**\n * @category combinators\n * @since 2.10.0\n */\n\nexport var fromOptionK = function fromOptionK(onNone) {\n  var from = fromOption(onNone);\n  return function (f) {\n    return flow(f, from);\n  };\n};\n/**\n * @category combinators\n * @since 2.10.0\n */\n\nexport var chainOptionK = function chainOptionK(onNone) {\n  var from = fromOptionK(onNone);\n  return function (f) {\n    return chain(from(f));\n  };\n};\n/**\n * Returns a `Right` if is a `Left` (and vice versa).\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport function swap(ma) {\n  return isLeft(ma) ? right(ma.left) : left(ma.right);\n}\n/**\n * Less strict version of [`orElse`](#orelse).\n *\n * @category combinators\n * @since 2.10.0\n */\n\nexport var orElseW = function orElseW(onLeft) {\n  return function (ma) {\n    return isLeft(ma) ? onLeft(ma.left) : ma;\n  };\n};\n/**\n * Useful for recovering from errors.\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var orElse = orElseW;\n/**\n * Less strict version of [`filterOrElse`](#filterorelse).\n *\n * @category combinators\n * @since 2.9.0\n */\n\nexport var filterOrElseW = function filterOrElseW(predicate, onFalse) {\n  return chainW(function (a) {\n    return predicate(a) ? right(a) : left(onFalse(a));\n  });\n};\n/**\n * @example\n * import { filterOrElse as filterOrElse, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     right(1),\n *     filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     right(-1),\n *     filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   left('error')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     left('a'),\n *     filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   left('a')\n * )\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var filterOrElse = filterOrElseW; // -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\n\nvar _map = function _map(fa, f) {\n  return pipe(fa, map(f));\n};\n\nvar _ap = function _ap(fab, fa) {\n  return pipe(fab, ap(fa));\n};\n/* istanbul ignore next */\n\n\nvar _chain = function _chain(ma, f) {\n  return pipe(ma, chain(f));\n};\n/* istanbul ignore next */\n\n\nvar _reduce = function _reduce(fa, b, f) {\n  return pipe(fa, reduce(b, f));\n};\n/* istanbul ignore next */\n\n\nvar _foldMap = function _foldMap(M) {\n  return function (fa, f) {\n    var foldMapM = foldMap(M);\n    return pipe(fa, foldMapM(f));\n  };\n};\n/* istanbul ignore next */\n\n\nvar _reduceRight = function _reduceRight(fa, b, f) {\n  return pipe(fa, reduceRight(b, f));\n};\n\nvar _traverse = function _traverse(F) {\n  var traverseF = traverse(F);\n  return function (ta, f) {\n    return pipe(ta, traverseF(f));\n  };\n};\n\nvar _bimap = function _bimap(fa, f, g) {\n  return pipe(fa, bimap(f, g));\n};\n\nvar _mapLeft = function _mapLeft(fa, f) {\n  return pipe(fa, mapLeft(f));\n};\n/* istanbul ignore next */\n\n\nvar _alt = function _alt(fa, that) {\n  return pipe(fa, alt(that));\n};\n/* istanbul ignore next */\n\n\nvar _extend = function _extend(wa, f) {\n  return pipe(wa, extend(f));\n};\n\nvar _chainRec = function _chainRec(a, f) {\n  return tailRec(f(a), function (e) {\n    return isLeft(e) ? right(left(e.left)) : isLeft(e.right) ? left(f(e.right.left)) : right(right(e.right.right));\n  });\n}; // -------------------------------------------------------------------------------------\n// type class members\n// -------------------------------------------------------------------------------------\n\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category Functor\n * @since 2.0.0\n */\n\n\nexport var map = function map(f) {\n  return function (fa) {\n    return isLeft(fa) ? fa : right(f(fa.right));\n  };\n};\n/**\n * Map a pair of functions over the two type arguments of the bifunctor.\n *\n * @category Bifunctor\n * @since 2.0.0\n */\n\nexport var bimap = function bimap(f, g) {\n  return function (fa) {\n    return isLeft(fa) ? left(f(fa.left)) : right(g(fa.right));\n  };\n};\n/**\n * Map a function over the first type argument of a bifunctor.\n *\n * @category Bifunctor\n * @since 2.0.0\n */\n\nexport var mapLeft = function mapLeft(f) {\n  return function (fa) {\n    return isLeft(fa) ? left(f(fa.left)) : fa;\n  };\n};\n/**\n * Less strict version of [`ap`](#ap).\n *\n * @category Apply\n * @since 2.8.0\n */\n\nexport var apW = function apW(fa) {\n  return function (fab) {\n    return isLeft(fab) ? fab : isLeft(fa) ? fa : right(fab.right(fa.right));\n  };\n};\n/**\n * Apply a function to an argument under a type constructor.\n *\n * @category Apply\n * @since 2.0.0\n */\n\nexport var ap = apW;\n/**\n * @category Pointed\n * @since 2.7.0\n */\n\nexport var of = right;\n/**\n * Less strict version of [`chain`](#chain).\n *\n * @category Monad\n * @since 2.6.0\n */\n\nexport var chainW = function chainW(f) {\n  return function (ma) {\n    return isLeft(ma) ? ma : f(ma.right);\n  };\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation.\n *\n * @category Monad\n * @since 2.0.0\n */\n\nexport var chain = chainW;\n/**\n * The `flatten` function is the conventional monad join operator. It is used to remove one level of monadic structure, projecting its bound argument into the outer level.\n *\n * Derivable from `Chain`.\n *\n * @example\n * import * as E from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(E.flatten(E.right(E.right('a'))), E.right('a'))\n * assert.deepStrictEqual(E.flatten(E.right(E.left('e'))), E.left('e'))\n * assert.deepStrictEqual(E.flatten(E.left('e')), E.left('e'))\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var flatten = /*#__PURE__*/chain(identity);\n/**\n * Less strict version of [`alt`](#alt).\n *\n * @category Alt\n * @since 2.9.0\n */\n\nexport var altW = function altW(that) {\n  return function (fa) {\n    return isLeft(fa) ? that() : fa;\n  };\n};\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * @category Alt\n * @since 2.0.0\n */\n\nexport var alt = altW;\n/**\n * @category Extend\n * @since 2.0.0\n */\n\nexport var extend = function extend(f) {\n  return function (wa) {\n    return isLeft(wa) ? wa : right(f(wa));\n  };\n};\n/**\n * Derivable from `Extend`.\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var duplicate = /*#__PURE__*/extend(identity);\n/**\n * Left-associative fold of a structure.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n *\n * const startWith = 'prefix'\n * const concat = (a: string, b: string) => `${a}:${b}`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.reduce(startWith, concat)),\n *   'prefix:a'\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.reduce(startWith, concat)),\n *   'prefix'\n * )\n *\n * @category Foldable\n * @since 2.0.0\n */\n\nexport var reduce = function reduce(b, f) {\n  return function (fa) {\n    return isLeft(fa) ? b : f(b, fa.right);\n  };\n};\n/**\n * Map each element of the structure to a monoid, and combine the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n * import * as S from 'fp-ts/string'\n *\n * const yell = (a: string) => `${a}!`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.foldMap(S.Monoid)(yell)),\n *   'a!'\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.foldMap(S.Monoid)(yell)),\n *   S.Monoid.empty\n * )\n *\n * @category Foldable\n * @since 2.0.0\n */\n\nexport var foldMap = function foldMap(M) {\n  return function (f) {\n    return function (fa) {\n      return isLeft(fa) ? M.empty : f(fa.right);\n    };\n  };\n};\n/**\n * Right-associative fold of a structure.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n *\n * const startWith = 'postfix'\n * const concat = (a: string, b: string) => `${a}:${b}`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.reduceRight(startWith, concat)),\n *   'a:postfix'\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.reduceRight(startWith, concat)),\n *   'postfix'\n * )\n *\n * @category Foldable\n * @since 2.0.0\n */\n\nexport var reduceRight = function reduceRight(b, f) {\n  return function (fa) {\n    return isLeft(fa) ? b : f(fa.right, b);\n  };\n};\n/**\n * Map each element of a structure to an action, evaluate these actions from left to right, and collect the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import * as E from 'fp-ts/Either'\n * import * as O from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(['a']), E.traverse(O.Applicative)(RA.head)),\n *   O.some(E.right('a'))\n *  )\n *\n * assert.deepStrictEqual(\n *   pipe(E.right([]), E.traverse(O.Applicative)(RA.head)),\n *   O.none\n * )\n *\n * @category Traversable\n * @since 2.6.3\n */\n\nexport var traverse = function traverse(F) {\n  return function (f) {\n    return function (ta) {\n      return isLeft(ta) ? F.of(left(ta.left)) : F.map(f(ta.right), right);\n    };\n  };\n};\n/**\n * Evaluate each monadic action in the structure from left to right, and collect the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n * import * as O from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(O.some('a')), E.sequence(O.Applicative)),\n *   O.some(E.right('a'))\n *  )\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(O.none), E.sequence(O.Applicative)),\n *   O.none\n * )\n *\n * @category Traversable\n * @since 2.6.3\n */\n\nexport var sequence = function sequence(F) {\n  return function (ma) {\n    return isLeft(ma) ? F.of(left(ma.left)) : F.map(ma.right, right);\n  };\n};\n/**\n * @category MonadThrow\n * @since 2.6.3\n */\n\nexport var throwError = left; // -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n\n/**\n * @category instances\n * @since 2.0.0\n */\n\nexport var URI = 'Either';\n/**\n * @category instances\n * @since 2.0.0\n */\n\nexport function getShow(SE, SA) {\n  return {\n    show: function show(ma) {\n      return isLeft(ma) ? \"left(\" + SE.show(ma.left) + \")\" : \"right(\" + SA.show(ma.right) + \")\";\n    }\n  };\n}\n/**\n * @category instances\n * @since 2.0.0\n */\n\nexport function getEq(EL, EA) {\n  return {\n    equals: function equals(x, y) {\n      return x === y || (isLeft(x) ? isLeft(y) && EL.equals(x.left, y.left) : isRight(y) && EA.equals(x.right, y.right));\n    }\n  };\n}\n/**\n * Semigroup returning the left-most non-`Left` value. If both operands are `Right`s then the inner values are\n * concatenated using the provided `Semigroup`\n *\n * @example\n * import { getSemigroup, left, right } from 'fp-ts/Either'\n * import { SemigroupSum } from 'fp-ts/number'\n *\n * const S = getSemigroup<string, number>(SemigroupSum)\n * assert.deepStrictEqual(S.concat(left('a'), left('b')), left('a'))\n * assert.deepStrictEqual(S.concat(left('a'), right(2)), right(2))\n * assert.deepStrictEqual(S.concat(right(1), left('b')), right(1))\n * assert.deepStrictEqual(S.concat(right(1), right(2)), right(3))\n *\n * @category instances\n * @since 2.0.0\n */\n\nexport function getSemigroup(S) {\n  return {\n    concat: function concat(x, y) {\n      return isLeft(y) ? x : isLeft(x) ? y : right(S.concat(x.right, y.right));\n    }\n  };\n}\n/**\n * Builds a `Compactable` instance for `Either` given `Monoid` for the left side.\n *\n * @category instances\n * @since 2.10.0\n */\n\nexport var getCompactable = function getCompactable(M) {\n  var empty = left(M.empty);\n  return {\n    URI: URI,\n    _E: undefined,\n    compact: function compact(ma) {\n      return isLeft(ma) ? ma : ma.right._tag === 'None' ? empty : right(ma.right.value);\n    },\n    separate: function separate(ma) {\n      return isLeft(ma) ? separated(ma, ma) : isLeft(ma.right) ? separated(right(ma.right.left), empty) : separated(empty, right(ma.right.right));\n    }\n  };\n};\n/**\n * Builds a `Filterable` instance for `Either` given `Monoid` for the left side\n *\n * @category instances\n * @since 2.10.0\n */\n\nexport function getFilterable(M) {\n  var empty = left(M.empty);\n\n  var _a = getCompactable(M),\n      compact = _a.compact,\n      separate = _a.separate;\n\n  var filter = function filter(ma, predicate) {\n    return isLeft(ma) ? ma : predicate(ma.right) ? ma : empty;\n  };\n\n  var partition = function partition(ma, p) {\n    return isLeft(ma) ? separated(ma, ma) : p(ma.right) ? separated(empty, right(ma.right)) : separated(right(ma.right), empty);\n  };\n\n  return {\n    URI: URI,\n    _E: undefined,\n    map: _map,\n    compact: compact,\n    separate: separate,\n    filter: filter,\n    filterMap: function filterMap(ma, f) {\n      if (isLeft(ma)) {\n        return ma;\n      }\n\n      var ob = f(ma.right);\n      return ob._tag === 'None' ? empty : right(ob.value);\n    },\n    partition: partition,\n    partitionMap: function partitionMap(ma, f) {\n      if (isLeft(ma)) {\n        return separated(ma, ma);\n      }\n\n      var e = f(ma.right);\n      return isLeft(e) ? separated(right(e.left), empty) : separated(empty, right(e.right));\n    }\n  };\n}\n/**\n * Builds `Witherable` instance for `Either` given `Monoid` for the left side\n *\n * @category instances\n * @since 2.0.0\n */\n\nexport function getWitherable(M) {\n  var F_ = getFilterable(M);\n\n  var wither = function wither(F) {\n    var traverseF = _traverse(F);\n\n    return function (ma, f) {\n      return F.map(traverseF(ma, f), F_.compact);\n    };\n  };\n\n  var wilt = function wilt(F) {\n    var traverseF = _traverse(F);\n\n    return function (ma, f) {\n      return F.map(traverseF(ma, f), F_.separate);\n    };\n  };\n\n  return {\n    URI: URI,\n    _E: undefined,\n    map: _map,\n    compact: F_.compact,\n    separate: F_.separate,\n    filter: F_.filter,\n    filterMap: F_.filterMap,\n    partition: F_.partition,\n    partitionMap: F_.partitionMap,\n    traverse: _traverse,\n    sequence: sequence,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    wither: wither,\n    wilt: wilt\n  };\n}\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport function getApplicativeValidation(SE) {\n  return {\n    URI: URI,\n    _E: undefined,\n    map: _map,\n    ap: function ap(fab, fa) {\n      return isLeft(fab) ? isLeft(fa) ? left(SE.concat(fab.left, fa.left)) : fab : isLeft(fa) ? fa : right(fab.right(fa.right));\n    },\n    of: of\n  };\n}\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport function getAltValidation(SE) {\n  return {\n    URI: URI,\n    _E: undefined,\n    map: _map,\n    alt: function alt(me, that) {\n      if (isRight(me)) {\n        return me;\n      }\n\n      var ea = that();\n      return isLeft(ea) ? left(SE.concat(me.left, ea.left)) : ea;\n    }\n  };\n}\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Functor = {\n  URI: URI,\n  map: _map\n};\n/**\n * Derivable from `Functor`.\n *\n * @category combinators\n * @since 2.10.0\n */\n\nexport var flap =\n/*#_PURE_*/\nflap_(Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\n\nexport var Pointed = {\n  URI: URI,\n  of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\n\nexport var Apply = {\n  URI: URI,\n  map: _map,\n  ap: _ap\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var apFirst = /*#__PURE__*/apFirst_(Apply);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var apSecond = /*#__PURE__*/apSecond_(Apply);\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Applicative = {\n  URI: URI,\n  map: _map,\n  ap: _ap,\n  of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\n\nexport var Chain = {\n  URI: URI,\n  map: _map,\n  ap: _ap,\n  chain: _chain\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Monad = {\n  URI: URI,\n  map: _map,\n  ap: _ap,\n  of: of,\n  chain: _chain\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * Derivable from `Chain`.\n *\n * @category combinators\n * @since 2.0.0\n */\n\nexport var chainFirst = /*#__PURE__*/chainFirst_(Chain);\n/**\n * Less strict version of [`chainFirst`](#chainfirst)\n *\n * Derivable from `Chain`.\n *\n * @category combinators\n * @since 2.8.0\n */\n\nexport var chainFirstW = chainFirst;\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Foldable = {\n  URI: URI,\n  reduce: _reduce,\n  foldMap: _foldMap,\n  reduceRight: _reduceRight\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Traversable = {\n  URI: URI,\n  map: _map,\n  reduce: _reduce,\n  foldMap: _foldMap,\n  reduceRight: _reduceRight,\n  traverse: _traverse,\n  sequence: sequence\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Bifunctor = {\n  URI: URI,\n  bimap: _bimap,\n  mapLeft: _mapLeft\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Alt = {\n  URI: URI,\n  map: _map,\n  alt: _alt\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var Extend = {\n  URI: URI,\n  map: _map,\n  extend: _extend\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var ChainRec = {\n  URI: URI,\n  map: _map,\n  ap: _ap,\n  chain: _chain,\n  chainRec: _chainRec\n};\n/**\n * @category instances\n * @since 2.7.0\n */\n\nexport var MonadThrow = {\n  URI: URI,\n  map: _map,\n  ap: _ap,\n  of: of,\n  chain: _chain,\n  throwError: throwError\n};\n/**\n * @category instances\n * @since 2.10.0\n */\n\nexport var FromEither = {\n  URI: URI,\n  fromEither: identity\n}; // -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n\n/**\n * Default value for the `onError` argument of `tryCatch`\n *\n * @since 2.0.0\n */\n\nexport function toError(e) {\n  return e instanceof Error ? e : new Error(String(e));\n}\n/**\n * @since 2.0.0\n */\n\nexport function elem(E) {\n  return function (a, ma) {\n    return isLeft(ma) ? false : E.equals(a, ma.right);\n  };\n}\n/**\n * Returns `false` if `Left` or returns the result of the application of the given predicate to the `Right` value.\n *\n * @example\n * import { exists, left, right } from 'fp-ts/Either'\n *\n * const gt2 = exists((n: number) => n > 2)\n *\n * assert.strictEqual(gt2(left('a')), false)\n * assert.strictEqual(gt2(right(1)), false)\n * assert.strictEqual(gt2(right(3)), true)\n *\n * @since 2.0.0\n */\n\nexport function exists(predicate) {\n  return function (ma) {\n    return isLeft(ma) ? false : predicate(ma.right);\n  };\n} // -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n\n/**\n * @since 2.9.0\n */\n\nexport var Do = /*#__PURE__*/of({});\n/**\n * @since 2.8.0\n */\n\nexport var bindTo = /*#__PURE__*/bindTo_(Functor);\n/**\n * @since 2.8.0\n */\n\nexport var bind = /*#__PURE__*/bind_(Chain);\n/**\n * @since 2.8.0\n */\n\nexport var bindW = bind; // -------------------------------------------------------------------------------------\n// pipeable sequence S\n// -------------------------------------------------------------------------------------\n\n/**\n * @since 2.8.0\n */\n\nexport var apS = /*#__PURE__*/apS_(Apply);\n/**\n * @since 2.8.0\n */\n\nexport var apSW = apS; // -------------------------------------------------------------------------------------\n// array utils\n// -------------------------------------------------------------------------------------\n\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.\n *\n * @since 2.9.0\n */\n\nexport var traverseArrayWithIndex = function traverseArrayWithIndex(f) {\n  return function (as) {\n    var out = [];\n\n    for (var i = 0; i < as.length; i++) {\n      var e = f(i, as[i]);\n\n      if (isLeft(e)) {\n        return e;\n      }\n\n      out.push(e.right);\n    }\n\n    return right(out);\n  };\n};\n/**\n * Equivalent to `ReadonlyArray#traverse(Applicative)`.\n *\n * @since 2.9.0\n */\n\nexport var traverseArray = function traverseArray(f) {\n  return traverseArrayWithIndex(function (_, a) {\n    return f(a);\n  });\n};\n/**\n * Equivalent to `ReadonlyArray#sequence(Applicative)`.\n *\n * @since 2.9.0\n */\n\nexport var sequenceArray = /*#__PURE__*/traverseArray(identity);\n/**\n * Use [`parse`](./Json.ts.html#parse) instead.\n *\n * @category constructors\n * @since 2.0.0\n * @deprecated\n */\n// tslint:disable-next-line: deprecation\n\nexport function parseJSON(s, onError) {\n  return tryCatch(function () {\n    return JSON.parse(s);\n  }, onError);\n}\n/**\n * Use [`stringify`](./Json.ts.html#stringify) instead.\n *\n * @category constructors\n * @since 2.0.0\n * @deprecated\n */\n\nexport var stringifyJSON = function stringifyJSON(u, onError) {\n  return tryCatch(function () {\n    var s = JSON.stringify(u);\n\n    if (typeof s !== 'string') {\n      throw new Error('Converting unsupported structure to JSON');\n    }\n\n    return s;\n  }, onError);\n};\n/**\n * Use small, specific instances instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexport var either = {\n  URI: URI,\n  map: _map,\n  of: of,\n  ap: _ap,\n  chain: _chain,\n  reduce: _reduce,\n  foldMap: _foldMap,\n  reduceRight: _reduceRight,\n  traverse: _traverse,\n  sequence: sequence,\n  bimap: _bimap,\n  mapLeft: _mapLeft,\n  alt: _alt,\n  extend: _extend,\n  chainRec: _chainRec,\n  throwError: throwError\n};\n/**\n * Use [`getApplySemigroup`](./Apply.ts.html#getApplySemigroup) instead.\n *\n * Semigroup returning the left-most `Left` value. If both operands are `Right`s then the inner values\n * are concatenated using the provided `Semigroup`\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexport var getApplySemigroup = /*#__PURE__*/getApplySemigroup_(Apply);\n/**\n * Use [`getApplicativeMonoid`](./Applicative.ts.html#getApplicativeMonoid) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexport var getApplyMonoid = /*#__PURE__*/getApplicativeMonoid(Applicative);\n/**\n * Use [`getApplySemigroup`](./Apply.ts.html#getApplySemigroup) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexport var getValidationSemigroup = function getValidationSemigroup(SE, SA) {\n  return getApplySemigroup_(getApplicativeValidation(SE))(SA);\n};\n/**\n * Use [`getApplicativeMonoid`](./Applicative.ts.html#getApplicativeMonoid) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexport var getValidationMonoid = function getValidationMonoid(SE, MA) {\n  return getApplicativeMonoid(getApplicativeValidation(SE))(MA);\n};\n/**\n * Use [`getApplicativeValidation`](#getapplicativevalidation) and [`getAltValidation`](#getaltvalidation) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\n\nexport function getValidation(SE) {\n  var ap = getApplicativeValidation(SE).ap;\n  var alt = getAltValidation(SE).alt;\n  return {\n    URI: URI,\n    _E: undefined,\n    map: _map,\n    of: of,\n    chain: _chain,\n    bimap: _bimap,\n    mapLeft: _mapLeft,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    extend: _extend,\n    traverse: _traverse,\n    sequence: sequence,\n    chainRec: _chainRec,\n    throwError: throwError,\n    ap: ap,\n    alt: alt\n  };\n}","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/node_modules/fp-ts/es6/Either.js"],"names":["getApplicativeMonoid","apFirst","apFirst_","apS","apS_","apSecond","apSecond_","getApplySemigroup","getApplySemigroup_","bind","bind_","chainFirst","chainFirst_","tailRec","flow","identity","pipe","bindTo","bindTo_","flap","flap_","_","separated","isLeft","isRight","ma","_tag","left","e","right","a","fromOption","onNone","value","fromPredicate","predicate","onFalse","matchW","onLeft","onRight","foldW","match","fold","getOrElseW","getOrElse","fromNullable","tryCatch","f","onThrow","tryCatchK","_i","arguments","length","apply","fromNullableK","from","chainNullableK","chain","toUnion","fromOptionK","chainOptionK","swap","orElseW","orElse","filterOrElseW","chainW","filterOrElse","_map","fa","map","_ap","fab","ap","_chain","_reduce","b","reduce","_foldMap","M","foldMapM","foldMap","_reduceRight","reduceRight","_traverse","F","traverseF","traverse","ta","_bimap","g","bimap","_mapLeft","mapLeft","_alt","that","alt","_extend","wa","extend","_chainRec","apW","of","flatten","altW","duplicate","empty","sequence","throwError","URI","getShow","SE","SA","show","getEq","EL","EA","equals","x","y","getSemigroup","S","concat","getCompactable","_E","undefined","compact","separate","getFilterable","_a","filter","partition","p","filterMap","ob","partitionMap","getWitherable","F_","wither","wilt","getApplicativeValidation","getAltValidation","me","ea","Functor","Pointed","Apply","Applicative","Chain","Monad","chainFirstW","Foldable","Traversable","Bifunctor","Alt","Extend","ChainRec","chainRec","MonadThrow","FromEither","fromEither","toError","Error","String","elem","E","exists","Do","bindW","apSW","traverseArrayWithIndex","as","out","i","push","traverseArray","sequenceArray","parseJSON","s","onError","JSON","parse","stringifyJSON","u","stringify","either","getApplyMonoid","getValidationSemigroup","getValidationMonoid","MA","getValidation"],"mappings":"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","sourcesContent":["import { getApplicativeMonoid } from './Applicative';\nimport { apFirst as apFirst_, apS as apS_, apSecond as apSecond_, getApplySemigroup as getApplySemigroup_ } from './Apply';\nimport { bind as bind_, chainFirst as chainFirst_ } from './Chain';\nimport { tailRec } from './ChainRec';\nimport { flow, identity, pipe } from './function';\nimport { bindTo as bindTo_, flap as flap_ } from './Functor';\nimport * as _ from './internal';\nimport { separated } from './Separated';\n// -------------------------------------------------------------------------------------\n// guards\n// -------------------------------------------------------------------------------------\n/**\n * Returns `true` if the either is an instance of `Left`, `false` otherwise.\n *\n * @category guards\n * @since 2.0.0\n */\nexport var isLeft = _.isLeft;\n/**\n * Returns `true` if the either is an instance of `Right`, `false` otherwise.\n *\n * @category guards\n * @since 2.0.0\n */\nexport var isRight = function (ma) { return ma._tag === 'Right'; };\n// -------------------------------------------------------------------------------------\n// constructors\n// -------------------------------------------------------------------------------------\n/**\n * Constructs a new `Either` holding a `Left` value. This usually represents a failure, due to the right-bias of this\n * structure.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var left = function (e) { return ({ _tag: 'Left', left: e }); };\n/**\n * Constructs a new `Either` holding a `Right` value. This usually represents a successful value due to the right bias\n * of this structure.\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var right = function (a) { return ({ _tag: 'Right', right: a }); };\n/**\n * @example\n * import { fromOption, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n * import { none, some } from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     some(1),\n *     fromOption(() => 'error')\n *   ),\n *   right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     none,\n *     fromOption(() => 'error')\n *   ),\n *   left('error')\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var fromOption = function (onNone) { return function (ma) {\n    return ma._tag === 'None' ? left(onNone()) : right(ma.value);\n}; };\n/**\n * @example\n * import { fromPredicate, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     1,\n *     fromPredicate(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     -1,\n *     fromPredicate(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   left('error')\n * )\n *\n * @category constructors\n * @since 2.0.0\n */\nexport var fromPredicate = function (predicate, onFalse) { return function (a) { return (predicate(a) ? right(a) : left(onFalse(a))); }; };\n// -------------------------------------------------------------------------------------\n// destructors\n// -------------------------------------------------------------------------------------\n/**\n * Less strict version of [`match`](#match).\n *\n * @category destructors\n * @since 2.10.0\n */\nexport var matchW = function (onLeft, onRight) { return function (ma) {\n    return isLeft(ma) ? onLeft(ma.left) : onRight(ma.right);\n}; };\n/**\n * Alias of [`matchW`](#matchww).\n *\n * @category destructors\n * @since 2.10.0\n */\nexport var foldW = matchW;\n/**\n * Takes two functions and an `Either` value, if the value is a `Left` the inner value is applied to the first function,\n * if the value is a `Right` the inner value is applied to the second function.\n *\n * @example\n * import { match, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * function onLeft(errors: Array<string>): string {\n *   return `Errors: ${errors.join(', ')}`\n * }\n *\n * function onRight(value: number): string {\n *   return `Ok: ${value}`\n * }\n *\n * assert.strictEqual(\n *   pipe(\n *     right(1),\n *     match(onLeft, onRight)\n *   ),\n *   'Ok: 1'\n * )\n * assert.strictEqual(\n *   pipe(\n *     left(['error 1', 'error 2']),\n *     match(onLeft, onRight)\n *   ),\n *   'Errors: error 1, error 2'\n * )\n *\n * @category destructors\n * @since 2.10.0\n */\nexport var match = matchW;\n/**\n * Alias of [`match`](#match).\n *\n * @category destructors\n * @since 2.0.0\n */\nexport var fold = match;\n/**\n * Less strict version of [`getOrElse`](#getorelse).\n *\n * @category destructors\n * @since 2.6.0\n */\nexport var getOrElseW = function (onLeft) { return function (ma) {\n    return isLeft(ma) ? onLeft(ma.left) : ma.right;\n}; };\n/**\n * Returns the wrapped value if it's a `Right` or a default value if is a `Left`.\n *\n * @example\n * import { getOrElse, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     right(1),\n *     getOrElse(() => 0)\n *   ),\n *   1\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     left('error'),\n *     getOrElse(() => 0)\n *   ),\n *   0\n * )\n *\n * @category destructors\n * @since 2.0.0\n */\nexport var getOrElse = getOrElseW;\n// -------------------------------------------------------------------------------------\n// interop\n// -------------------------------------------------------------------------------------\n// TODO: make lazy in v3\n/**\n * Takes a default and a nullable value, if the value is not nully, turn it into a `Right`, if the value is nully use\n * the provided default as a `Left`.\n *\n * @example\n * import { fromNullable, left, right } from 'fp-ts/Either'\n *\n * const parse = fromNullable('nully')\n *\n * assert.deepStrictEqual(parse(1), right(1))\n * assert.deepStrictEqual(parse(null), left('nully'))\n *\n * @category interop\n * @since 2.0.0\n */\nexport var fromNullable = function (e) { return function (a) {\n    return a == null ? left(e) : right(a);\n}; };\n/**\n * Constructs a new `Either` from a function that might throw.\n *\n * See also [`tryCatchK`](#trycatchk).\n *\n * @example\n * import * as E from 'fp-ts/Either'\n *\n * const unsafeHead = <A>(as: ReadonlyArray<A>): A => {\n *   if (as.length > 0) {\n *     return as[0]\n *   } else {\n *     throw new Error('empty array')\n *   }\n * }\n *\n * const head = <A>(as: ReadonlyArray<A>): E.Either<Error, A> =>\n *   E.tryCatch(() => unsafeHead(as), e => (e instanceof Error ? e : new Error('unknown error')))\n *\n * assert.deepStrictEqual(head([]), E.left(new Error('empty array')))\n * assert.deepStrictEqual(head([1, 2, 3]), E.right(1))\n *\n * @category interop\n * @since 2.0.0\n */\nexport var tryCatch = function (f, onThrow) {\n    try {\n        return right(f());\n    }\n    catch (e) {\n        return left(onThrow(e));\n    }\n};\n/**\n * Converts a function that may throw to one returning a `Either`.\n *\n * @category interop\n * @since 2.10.0\n */\nexport var tryCatchK = function (f, onThrow) { return function () {\n    var a = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        a[_i] = arguments[_i];\n    }\n    return tryCatch(function () { return f.apply(void 0, a); }, onThrow);\n}; };\n/**\n * @category interop\n * @since 2.9.0\n */\nexport var fromNullableK = function (e) {\n    var from = fromNullable(e);\n    return function (f) { return flow(f, from); };\n};\n/**\n * @category interop\n * @since 2.9.0\n */\nexport var chainNullableK = function (e) {\n    var from = fromNullableK(e);\n    return function (f) { return chain(from(f)); };\n};\n/**\n * @category interop\n * @since 2.10.0\n */\nexport var toUnion = \n/*#__PURE__*/\nfoldW(identity, identity);\n// -------------------------------------------------------------------------------------\n// combinators\n// -------------------------------------------------------------------------------------\n/**\n * @category combinators\n * @since 2.10.0\n */\nexport var fromOptionK = function (onNone) {\n    var from = fromOption(onNone);\n    return function (f) { return flow(f, from); };\n};\n/**\n * @category combinators\n * @since 2.10.0\n */\nexport var chainOptionK = function (onNone) {\n    var from = fromOptionK(onNone);\n    return function (f) { return chain(from(f)); };\n};\n/**\n * Returns a `Right` if is a `Left` (and vice versa).\n *\n * @category combinators\n * @since 2.0.0\n */\nexport function swap(ma) {\n    return isLeft(ma) ? right(ma.left) : left(ma.right);\n}\n/**\n * Less strict version of [`orElse`](#orelse).\n *\n * @category combinators\n * @since 2.10.0\n */\nexport var orElseW = function (onLeft) { return function (ma) {\n    return isLeft(ma) ? onLeft(ma.left) : ma;\n}; };\n/**\n * Useful for recovering from errors.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var orElse = orElseW;\n/**\n * Less strict version of [`filterOrElse`](#filterorelse).\n *\n * @category combinators\n * @since 2.9.0\n */\nexport var filterOrElseW = function (predicate, onFalse) {\n    return chainW(function (a) { return (predicate(a) ? right(a) : left(onFalse(a))); });\n};\n/**\n * @example\n * import { filterOrElse as filterOrElse, left, right } from 'fp-ts/Either'\n * import { pipe } from 'fp-ts/function'\n *\n * assert.deepStrictEqual(\n *   pipe(\n *     right(1),\n *     filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   right(1)\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     right(-1),\n *     filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   left('error')\n * )\n * assert.deepStrictEqual(\n *   pipe(\n *     left('a'),\n *     filterOrElse(\n *       (n) => n > 0,\n *       () => 'error'\n *     )\n *   ),\n *   left('a')\n * )\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var filterOrElse = filterOrElseW;\n// -------------------------------------------------------------------------------------\n// non-pipeables\n// -------------------------------------------------------------------------------------\nvar _map = function (fa, f) { return pipe(fa, map(f)); };\nvar _ap = function (fab, fa) { return pipe(fab, ap(fa)); };\n/* istanbul ignore next */\nvar _chain = function (ma, f) { return pipe(ma, chain(f)); };\n/* istanbul ignore next */\nvar _reduce = function (fa, b, f) { return pipe(fa, reduce(b, f)); };\n/* istanbul ignore next */\nvar _foldMap = function (M) { return function (fa, f) {\n    var foldMapM = foldMap(M);\n    return pipe(fa, foldMapM(f));\n}; };\n/* istanbul ignore next */\nvar _reduceRight = function (fa, b, f) { return pipe(fa, reduceRight(b, f)); };\nvar _traverse = function (F) {\n    var traverseF = traverse(F);\n    return function (ta, f) { return pipe(ta, traverseF(f)); };\n};\nvar _bimap = function (fa, f, g) { return pipe(fa, bimap(f, g)); };\nvar _mapLeft = function (fa, f) { return pipe(fa, mapLeft(f)); };\n/* istanbul ignore next */\nvar _alt = function (fa, that) { return pipe(fa, alt(that)); };\n/* istanbul ignore next */\nvar _extend = function (wa, f) { return pipe(wa, extend(f)); };\nvar _chainRec = function (a, f) {\n    return tailRec(f(a), function (e) {\n        return isLeft(e) ? right(left(e.left)) : isLeft(e.right) ? left(f(e.right.left)) : right(right(e.right.right));\n    });\n};\n// -------------------------------------------------------------------------------------\n// type class members\n// -------------------------------------------------------------------------------------\n/**\n * `map` can be used to turn functions `(a: A) => B` into functions `(fa: F<A>) => F<B>` whose argument and return types\n * use the type constructor `F` to represent some computational context.\n *\n * @category Functor\n * @since 2.0.0\n */\nexport var map = function (f) { return function (fa) {\n    return isLeft(fa) ? fa : right(f(fa.right));\n}; };\n/**\n * Map a pair of functions over the two type arguments of the bifunctor.\n *\n * @category Bifunctor\n * @since 2.0.0\n */\nexport var bimap = function (f, g) { return function (fa) { return (isLeft(fa) ? left(f(fa.left)) : right(g(fa.right))); }; };\n/**\n * Map a function over the first type argument of a bifunctor.\n *\n * @category Bifunctor\n * @since 2.0.0\n */\nexport var mapLeft = function (f) { return function (fa) {\n    return isLeft(fa) ? left(f(fa.left)) : fa;\n}; };\n/**\n * Less strict version of [`ap`](#ap).\n *\n * @category Apply\n * @since 2.8.0\n */\nexport var apW = function (fa) { return function (fab) { return (isLeft(fab) ? fab : isLeft(fa) ? fa : right(fab.right(fa.right))); }; };\n/**\n * Apply a function to an argument under a type constructor.\n *\n * @category Apply\n * @since 2.0.0\n */\nexport var ap = apW;\n/**\n * @category Pointed\n * @since 2.7.0\n */\nexport var of = right;\n/**\n * Less strict version of [`chain`](#chain).\n *\n * @category Monad\n * @since 2.6.0\n */\nexport var chainW = function (f) { return function (ma) {\n    return isLeft(ma) ? ma : f(ma.right);\n}; };\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation.\n *\n * @category Monad\n * @since 2.0.0\n */\nexport var chain = chainW;\n/**\n * The `flatten` function is the conventional monad join operator. It is used to remove one level of monadic structure, projecting its bound argument into the outer level.\n *\n * Derivable from `Chain`.\n *\n * @example\n * import * as E from 'fp-ts/Either'\n *\n * assert.deepStrictEqual(E.flatten(E.right(E.right('a'))), E.right('a'))\n * assert.deepStrictEqual(E.flatten(E.right(E.left('e'))), E.left('e'))\n * assert.deepStrictEqual(E.flatten(E.left('e')), E.left('e'))\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var flatten = \n/*#__PURE__*/\nchain(identity);\n/**\n * Less strict version of [`alt`](#alt).\n *\n * @category Alt\n * @since 2.9.0\n */\nexport var altW = function (that) { return function (fa) { return (isLeft(fa) ? that() : fa); }; };\n/**\n * Identifies an associative operation on a type constructor. It is similar to `Semigroup`, except that it applies to\n * types of kind `* -> *`.\n *\n * @category Alt\n * @since 2.0.0\n */\nexport var alt = altW;\n/**\n * @category Extend\n * @since 2.0.0\n */\nexport var extend = function (f) { return function (wa) {\n    return isLeft(wa) ? wa : right(f(wa));\n}; };\n/**\n * Derivable from `Extend`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var duplicate = \n/*#__PURE__*/\nextend(identity);\n/**\n * Left-associative fold of a structure.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n *\n * const startWith = 'prefix'\n * const concat = (a: string, b: string) => `${a}:${b}`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.reduce(startWith, concat)),\n *   'prefix:a'\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.reduce(startWith, concat)),\n *   'prefix'\n * )\n *\n * @category Foldable\n * @since 2.0.0\n */\nexport var reduce = function (b, f) { return function (fa) {\n    return isLeft(fa) ? b : f(b, fa.right);\n}; };\n/**\n * Map each element of the structure to a monoid, and combine the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n * import * as S from 'fp-ts/string'\n *\n * const yell = (a: string) => `${a}!`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.foldMap(S.Monoid)(yell)),\n *   'a!'\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.foldMap(S.Monoid)(yell)),\n *   S.Monoid.empty\n * )\n *\n * @category Foldable\n * @since 2.0.0\n */\nexport var foldMap = function (M) { return function (f) { return function (fa) {\n    return isLeft(fa) ? M.empty : f(fa.right);\n}; }; };\n/**\n * Right-associative fold of a structure.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n *\n * const startWith = 'postfix'\n * const concat = (a: string, b: string) => `${a}:${b}`\n *\n * assert.deepStrictEqual(\n *   pipe(E.right('a'), E.reduceRight(startWith, concat)),\n *   'a:postfix'\n * )\n *\n * assert.deepStrictEqual(\n *   pipe(E.left('e'), E.reduceRight(startWith, concat)),\n *   'postfix'\n * )\n *\n * @category Foldable\n * @since 2.0.0\n */\nexport var reduceRight = function (b, f) { return function (fa) {\n    return isLeft(fa) ? b : f(fa.right, b);\n}; };\n/**\n * Map each element of a structure to an action, evaluate these actions from left to right, and collect the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as RA from 'fp-ts/ReadonlyArray'\n * import * as E from 'fp-ts/Either'\n * import * as O from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(['a']), E.traverse(O.Applicative)(RA.head)),\n *   O.some(E.right('a'))\n *  )\n *\n * assert.deepStrictEqual(\n *   pipe(E.right([]), E.traverse(O.Applicative)(RA.head)),\n *   O.none\n * )\n *\n * @category Traversable\n * @since 2.6.3\n */\nexport var traverse = function (F) { return function (f) { return function (ta) { return (isLeft(ta) ? F.of(left(ta.left)) : F.map(f(ta.right), right)); }; }; };\n/**\n * Evaluate each monadic action in the structure from left to right, and collect the results.\n *\n * @example\n * import { pipe } from 'fp-ts/function'\n * import * as E from 'fp-ts/Either'\n * import * as O from 'fp-ts/Option'\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(O.some('a')), E.sequence(O.Applicative)),\n *   O.some(E.right('a'))\n *  )\n *\n * assert.deepStrictEqual(\n *   pipe(E.right(O.none), E.sequence(O.Applicative)),\n *   O.none\n * )\n *\n * @category Traversable\n * @since 2.6.3\n */\nexport var sequence = function (F) { return function (ma) {\n    return isLeft(ma) ? F.of(left(ma.left)) : F.map(ma.right, right);\n}; };\n/**\n * @category MonadThrow\n * @since 2.6.3\n */\nexport var throwError = left;\n// -------------------------------------------------------------------------------------\n// instances\n// -------------------------------------------------------------------------------------\n/**\n * @category instances\n * @since 2.0.0\n */\nexport var URI = 'Either';\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getShow(SE, SA) {\n    return {\n        show: function (ma) { return (isLeft(ma) ? \"left(\" + SE.show(ma.left) + \")\" : \"right(\" + SA.show(ma.right) + \")\"); }\n    };\n}\n/**\n * @category instances\n * @since 2.0.0\n */\nexport function getEq(EL, EA) {\n    return {\n        equals: function (x, y) {\n            return x === y || (isLeft(x) ? isLeft(y) && EL.equals(x.left, y.left) : isRight(y) && EA.equals(x.right, y.right));\n        }\n    };\n}\n/**\n * Semigroup returning the left-most non-`Left` value. If both operands are `Right`s then the inner values are\n * concatenated using the provided `Semigroup`\n *\n * @example\n * import { getSemigroup, left, right } from 'fp-ts/Either'\n * import { SemigroupSum } from 'fp-ts/number'\n *\n * const S = getSemigroup<string, number>(SemigroupSum)\n * assert.deepStrictEqual(S.concat(left('a'), left('b')), left('a'))\n * assert.deepStrictEqual(S.concat(left('a'), right(2)), right(2))\n * assert.deepStrictEqual(S.concat(right(1), left('b')), right(1))\n * assert.deepStrictEqual(S.concat(right(1), right(2)), right(3))\n *\n * @category instances\n * @since 2.0.0\n */\nexport function getSemigroup(S) {\n    return {\n        concat: function (x, y) { return (isLeft(y) ? x : isLeft(x) ? y : right(S.concat(x.right, y.right))); }\n    };\n}\n/**\n * Builds a `Compactable` instance for `Either` given `Monoid` for the left side.\n *\n * @category instances\n * @since 2.10.0\n */\nexport var getCompactable = function (M) {\n    var empty = left(M.empty);\n    return {\n        URI: URI,\n        _E: undefined,\n        compact: function (ma) { return (isLeft(ma) ? ma : ma.right._tag === 'None' ? empty : right(ma.right.value)); },\n        separate: function (ma) {\n            return isLeft(ma)\n                ? separated(ma, ma)\n                : isLeft(ma.right)\n                    ? separated(right(ma.right.left), empty)\n                    : separated(empty, right(ma.right.right));\n        }\n    };\n};\n/**\n * Builds a `Filterable` instance for `Either` given `Monoid` for the left side\n *\n * @category instances\n * @since 2.10.0\n */\nexport function getFilterable(M) {\n    var empty = left(M.empty);\n    var _a = getCompactable(M), compact = _a.compact, separate = _a.separate;\n    var filter = function (ma, predicate) {\n        return isLeft(ma) ? ma : predicate(ma.right) ? ma : empty;\n    };\n    var partition = function (ma, p) {\n        return isLeft(ma)\n            ? separated(ma, ma)\n            : p(ma.right)\n                ? separated(empty, right(ma.right))\n                : separated(right(ma.right), empty);\n    };\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        compact: compact,\n        separate: separate,\n        filter: filter,\n        filterMap: function (ma, f) {\n            if (isLeft(ma)) {\n                return ma;\n            }\n            var ob = f(ma.right);\n            return ob._tag === 'None' ? empty : right(ob.value);\n        },\n        partition: partition,\n        partitionMap: function (ma, f) {\n            if (isLeft(ma)) {\n                return separated(ma, ma);\n            }\n            var e = f(ma.right);\n            return isLeft(e) ? separated(right(e.left), empty) : separated(empty, right(e.right));\n        }\n    };\n}\n/**\n * Builds `Witherable` instance for `Either` given `Monoid` for the left side\n *\n * @category instances\n * @since 2.0.0\n */\nexport function getWitherable(M) {\n    var F_ = getFilterable(M);\n    var wither = function (F) {\n        var traverseF = _traverse(F);\n        return function (ma, f) { return F.map(traverseF(ma, f), F_.compact); };\n    };\n    var wilt = function (F) {\n        var traverseF = _traverse(F);\n        return function (ma, f) { return F.map(traverseF(ma, f), F_.separate); };\n    };\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        compact: F_.compact,\n        separate: F_.separate,\n        filter: F_.filter,\n        filterMap: F_.filterMap,\n        partition: F_.partition,\n        partitionMap: F_.partitionMap,\n        traverse: _traverse,\n        sequence: sequence,\n        reduce: _reduce,\n        foldMap: _foldMap,\n        reduceRight: _reduceRight,\n        wither: wither,\n        wilt: wilt\n    };\n}\n/**\n * @category instances\n * @since 2.7.0\n */\nexport function getApplicativeValidation(SE) {\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        ap: function (fab, fa) {\n            return isLeft(fab)\n                ? isLeft(fa)\n                    ? left(SE.concat(fab.left, fa.left))\n                    : fab\n                : isLeft(fa)\n                    ? fa\n                    : right(fab.right(fa.right));\n        },\n        of: of\n    };\n}\n/**\n * @category instances\n * @since 2.7.0\n */\nexport function getAltValidation(SE) {\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        alt: function (me, that) {\n            if (isRight(me)) {\n                return me;\n            }\n            var ea = that();\n            return isLeft(ea) ? left(SE.concat(me.left, ea.left)) : ea;\n        }\n    };\n}\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Functor = {\n    URI: URI,\n    map: _map\n};\n/**\n * Derivable from `Functor`.\n *\n * @category combinators\n * @since 2.10.0\n */\nexport var flap = \n/*#_PURE_*/\nflap_(Functor);\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Pointed = {\n    URI: URI,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Apply = {\n    URI: URI,\n    map: _map,\n    ap: _ap\n};\n/**\n * Combine two effectful actions, keeping only the result of the first.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var apFirst = \n/*#__PURE__*/\napFirst_(Apply);\n/**\n * Combine two effectful actions, keeping only the result of the second.\n *\n * Derivable from `Apply`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var apSecond = \n/*#__PURE__*/\napSecond_(Apply);\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Applicative = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var Chain = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: _chain\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Monad = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: _chain\n};\n/**\n * Composes computations in sequence, using the return value of one computation to determine the next computation and\n * keeping only the result of the first.\n *\n * Derivable from `Chain`.\n *\n * @category combinators\n * @since 2.0.0\n */\nexport var chainFirst = \n/*#__PURE__*/\nchainFirst_(Chain);\n/**\n * Less strict version of [`chainFirst`](#chainfirst)\n *\n * Derivable from `Chain`.\n *\n * @category combinators\n * @since 2.8.0\n */\nexport var chainFirstW = chainFirst;\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Foldable = {\n    URI: URI,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Traversable = {\n    URI: URI,\n    map: _map,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Bifunctor = {\n    URI: URI,\n    bimap: _bimap,\n    mapLeft: _mapLeft\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Alt = {\n    URI: URI,\n    map: _map,\n    alt: _alt\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var Extend = {\n    URI: URI,\n    map: _map,\n    extend: _extend\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var ChainRec = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    chain: _chain,\n    chainRec: _chainRec\n};\n/**\n * @category instances\n * @since 2.7.0\n */\nexport var MonadThrow = {\n    URI: URI,\n    map: _map,\n    ap: _ap,\n    of: of,\n    chain: _chain,\n    throwError: throwError\n};\n/**\n * @category instances\n * @since 2.10.0\n */\nexport var FromEither = {\n    URI: URI,\n    fromEither: identity\n};\n// -------------------------------------------------------------------------------------\n// utils\n// -------------------------------------------------------------------------------------\n/**\n * Default value for the `onError` argument of `tryCatch`\n *\n * @since 2.0.0\n */\nexport function toError(e) {\n    return e instanceof Error ? e : new Error(String(e));\n}\n/**\n * @since 2.0.0\n */\nexport function elem(E) {\n    return function (a, ma) { return (isLeft(ma) ? false : E.equals(a, ma.right)); };\n}\n/**\n * Returns `false` if `Left` or returns the result of the application of the given predicate to the `Right` value.\n *\n * @example\n * import { exists, left, right } from 'fp-ts/Either'\n *\n * const gt2 = exists((n: number) => n > 2)\n *\n * assert.strictEqual(gt2(left('a')), false)\n * assert.strictEqual(gt2(right(1)), false)\n * assert.strictEqual(gt2(right(3)), true)\n *\n * @since 2.0.0\n */\nexport function exists(predicate) {\n    return function (ma) { return (isLeft(ma) ? false : predicate(ma.right)); };\n}\n// -------------------------------------------------------------------------------------\n// do notation\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.9.0\n */\nexport var Do = \n/*#__PURE__*/\nof({});\n/**\n * @since 2.8.0\n */\nexport var bindTo = \n/*#__PURE__*/\nbindTo_(Functor);\n/**\n * @since 2.8.0\n */\nexport var bind = \n/*#__PURE__*/\nbind_(Chain);\n/**\n * @since 2.8.0\n */\nexport var bindW = bind;\n// -------------------------------------------------------------------------------------\n// pipeable sequence S\n// -------------------------------------------------------------------------------------\n/**\n * @since 2.8.0\n */\nexport var apS = \n/*#__PURE__*/\napS_(Apply);\n/**\n * @since 2.8.0\n */\nexport var apSW = apS;\n// -------------------------------------------------------------------------------------\n// array utils\n// -------------------------------------------------------------------------------------\n/**\n * Equivalent to `ReadonlyArray#traverseWithIndex(Applicative)`.\n *\n * @since 2.9.0\n */\nexport var traverseArrayWithIndex = function (f) { return function (as) {\n    var out = [];\n    for (var i = 0; i < as.length; i++) {\n        var e = f(i, as[i]);\n        if (isLeft(e)) {\n            return e;\n        }\n        out.push(e.right);\n    }\n    return right(out);\n}; };\n/**\n * Equivalent to `ReadonlyArray#traverse(Applicative)`.\n *\n * @since 2.9.0\n */\nexport var traverseArray = function (f) { return traverseArrayWithIndex(function (_, a) { return f(a); }); };\n/**\n * Equivalent to `ReadonlyArray#sequence(Applicative)`.\n *\n * @since 2.9.0\n */\nexport var sequenceArray = \n/*#__PURE__*/\ntraverseArray(identity);\n/**\n * Use [`parse`](./Json.ts.html#parse) instead.\n *\n * @category constructors\n * @since 2.0.0\n * @deprecated\n */\n// tslint:disable-next-line: deprecation\nexport function parseJSON(s, onError) {\n    return tryCatch(function () { return JSON.parse(s); }, onError);\n}\n/**\n * Use [`stringify`](./Json.ts.html#stringify) instead.\n *\n * @category constructors\n * @since 2.0.0\n * @deprecated\n */\nexport var stringifyJSON = function (u, onError) {\n    return tryCatch(function () {\n        var s = JSON.stringify(u);\n        if (typeof s !== 'string') {\n            throw new Error('Converting unsupported structure to JSON');\n        }\n        return s;\n    }, onError);\n};\n/**\n * Use small, specific instances instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var either = {\n    URI: URI,\n    map: _map,\n    of: of,\n    ap: _ap,\n    chain: _chain,\n    reduce: _reduce,\n    foldMap: _foldMap,\n    reduceRight: _reduceRight,\n    traverse: _traverse,\n    sequence: sequence,\n    bimap: _bimap,\n    mapLeft: _mapLeft,\n    alt: _alt,\n    extend: _extend,\n    chainRec: _chainRec,\n    throwError: throwError\n};\n/**\n * Use [`getApplySemigroup`](./Apply.ts.html#getApplySemigroup) instead.\n *\n * Semigroup returning the left-most `Left` value. If both operands are `Right`s then the inner values\n * are concatenated using the provided `Semigroup`\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var getApplySemigroup = \n/*#__PURE__*/\ngetApplySemigroup_(Apply);\n/**\n * Use [`getApplicativeMonoid`](./Applicative.ts.html#getApplicativeMonoid) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var getApplyMonoid = \n/*#__PURE__*/\ngetApplicativeMonoid(Applicative);\n/**\n * Use [`getApplySemigroup`](./Apply.ts.html#getApplySemigroup) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var getValidationSemigroup = function (SE, SA) {\n    return getApplySemigroup_(getApplicativeValidation(SE))(SA);\n};\n/**\n * Use [`getApplicativeMonoid`](./Applicative.ts.html#getApplicativeMonoid) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport var getValidationMonoid = function (SE, MA) {\n    return getApplicativeMonoid(getApplicativeValidation(SE))(MA);\n};\n/**\n * Use [`getApplicativeValidation`](#getapplicativevalidation) and [`getAltValidation`](#getaltvalidation) instead.\n *\n * @category instances\n * @since 2.0.0\n * @deprecated\n */\nexport function getValidation(SE) {\n    var ap = getApplicativeValidation(SE).ap;\n    var alt = getAltValidation(SE).alt;\n    return {\n        URI: URI,\n        _E: undefined,\n        map: _map,\n        of: of,\n        chain: _chain,\n        bimap: _bimap,\n        mapLeft: _mapLeft,\n        reduce: _reduce,\n        foldMap: _foldMap,\n        reduceRight: _reduceRight,\n        extend: _extend,\n        traverse: _traverse,\n        sequence: sequence,\n        chainRec: _chainRec,\n        throwError: throwError,\n        ap: ap,\n        alt: alt\n    };\n}\n"]},"metadata":{},"sourceType":"module"}