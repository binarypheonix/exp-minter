{"ast":null,"code":"import _slicedToArray from\"/Users/frankenstein/projects/minter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{Box,FormControl,FormLabel,Input,ModalHeader,ModalFooter,ModalBody,ModalCloseButton,Text,useDisclosure}from'@chakra-ui/react';import{Plus}from'react-feather';import{MinterButton}from'../../common/index';import{useDispatch}from'../../../reducer';import{transferTokenAction}from'../../../reducer/async/actions';import FormModal from'./FormModal';export function TransferTokenModal(props){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),toAddress=_useState2[0],setToAddress=_useState2[1];var dispatch=useDispatch();var initialRef=React.useRef(null);return/*#__PURE__*/React.createElement(FormModal,{disclosure:props.disclosure,sync:props.sync,method:\"transferToken\",dispatchThunk:function dispatchThunk(){return dispatch(transferTokenAction({contract:props.contractAddress,tokenId:props.tokenId,to:toAddress}));},onComplete:function onComplete(){return setToAddress('');},initialRef:initialRef,pendingMessage:\"Transferring token...\",completeMessage:\"Transfer complete\",body:function body(onSubmit){return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(ModalHeader,null,\"Transfer Token\"),/*#__PURE__*/React.createElement(ModalCloseButton,null),/*#__PURE__*/React.createElement(ModalBody,null,/*#__PURE__*/React.createElement(FormControl,null,/*#__PURE__*/React.createElement(FormLabel,{fontFamily:\"mono\"},\"To Address\"),/*#__PURE__*/React.createElement(Input,{autoFocus:true,ref:initialRef,placeholder:\"Input token recipient\",value:toAddress,onChange:function onChange(e){return setToAddress(e.target.value);}}))),/*#__PURE__*/React.createElement(ModalFooter,null,/*#__PURE__*/React.createElement(MinterButton,{variant:\"primaryAction\",onClick:function onClick(){return onSubmit();}},\"Transfer\")));}});}export function TransferTokenButton(props){var disclosure=useDisclosure();return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(MinterButton,{variant:\"primaryAction\",onClick:disclosure.onOpen},/*#__PURE__*/React.createElement(Box,{color:\"currentcolor\"},/*#__PURE__*/React.createElement(Plus,{size:16,strokeWidth:\"3\"})),/*#__PURE__*/React.createElement(Text,{ml:2},\"Transfer Token\")),/*#__PURE__*/React.createElement(TransferTokenModal,Object.assign({},props,{disclosure:disclosure,sync:props.sync})));}","map":{"version":3,"sources":["/Users/frankenstein/projects/minter/src/components/common/modals/TransferToken.tsx"],"names":["React","useState","Box","FormControl","FormLabel","Input","ModalHeader","ModalFooter","ModalBody","ModalCloseButton","Text","useDisclosure","Plus","MinterButton","useDispatch","transferTokenAction","FormModal","TransferTokenModal","props","toAddress","setToAddress","dispatch","initialRef","useRef","disclosure","sync","contract","contractAddress","tokenId","to","onSubmit","e","target","value","TransferTokenButton","onOpen"],"mappings":"0JAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OACEC,GADF,CAEEC,WAFF,CAGEC,SAHF,CAIEC,KAJF,CAKEC,WALF,CAMEC,WANF,CAOEC,SAPF,CAQEC,gBARF,CASEC,IATF,CAUEC,aAVF,KAWO,kBAXP,CAYA,OAASC,IAAT,KAAqB,eAArB,CACA,OAASC,YAAT,KAA6B,oBAA7B,CACA,OAASC,WAAT,KAA4B,kBAA5B,CACA,OAASC,mBAAT,KAAoC,gCAApC,CACA,MAAOC,CAAAA,SAAP,KAAgE,aAAhE,CAOA,MAAO,SAASC,CAAAA,kBAAT,CAA4BC,KAA5B,CAA4D,CACjE,cAAkCjB,QAAQ,CAAC,EAAD,CAA1C,wCAAOkB,SAAP,eAAkBC,YAAlB,eACA,GAAMC,CAAAA,QAAQ,CAAGP,WAAW,EAA5B,CACA,GAAMQ,CAAAA,UAAU,CAAGtB,KAAK,CAACuB,MAAN,CAAa,IAAb,CAAnB,CACA,mBACE,oBAAC,SAAD,EACE,UAAU,CAAEL,KAAK,CAACM,UADpB,CAEE,IAAI,CAAEN,KAAK,CAACO,IAFd,CAGE,MAAM,CAAC,eAHT,CAIE,aAAa,CAAE,+BACbJ,CAAAA,QAAQ,CACNN,mBAAmB,CAAC,CAClBW,QAAQ,CAAER,KAAK,CAACS,eADE,CAElBC,OAAO,CAAEV,KAAK,CAACU,OAFG,CAGlBC,EAAE,CAAEV,SAHc,CAAD,CADb,CADK,EAJjB,CAaE,UAAU,CAAE,4BAAMC,CAAAA,YAAY,CAAC,EAAD,CAAlB,EAbd,CAcE,UAAU,CAAEE,UAdd,CAeE,cAAc,CAAC,uBAfjB,CAgBE,eAAe,CAAC,mBAhBlB,CAiBE,IAAI,CAAE,cAAAQ,QAAQ,qBACZ,qDACE,oBAAC,WAAD,uBADF,cAEE,oBAAC,gBAAD,MAFF,cAGE,oBAAC,SAAD,mBACE,oBAAC,WAAD,mBACE,oBAAC,SAAD,EAAW,UAAU,CAAC,MAAtB,eADF,cAEE,oBAAC,KAAD,EACE,SAAS,CAAE,IADb,CAEE,GAAG,CAAER,UAFP,CAGE,WAAW,CAAC,uBAHd,CAIE,KAAK,CAAEH,SAJT,CAKE,QAAQ,CAAE,kBAAAY,CAAC,QAAIX,CAAAA,YAAY,CAACW,CAAC,CAACC,MAAF,CAASC,KAAV,CAAhB,EALb,EAFF,CADF,CAHF,cAgBE,oBAAC,WAAD,mBACE,oBAAC,YAAD,EAAc,OAAO,CAAC,eAAtB,CAAsC,OAAO,CAAE,yBAAMH,CAAAA,QAAQ,EAAd,EAA/C,aADF,CAhBF,CADY,EAjBhB,EADF,CA4CD,CAOD,MAAO,SAASI,CAAAA,mBAAT,CAA6BhB,KAA7B,CAA8D,CACnE,GAAMM,CAAAA,UAAU,CAAGb,aAAa,EAAhC,CACA,mBACE,qDACE,oBAAC,YAAD,EAAc,OAAO,CAAC,eAAtB,CAAsC,OAAO,CAAEa,UAAU,CAACW,MAA1D,eACE,oBAAC,GAAD,EAAK,KAAK,CAAC,cAAX,eACE,oBAAC,IAAD,EAAM,IAAI,CAAE,EAAZ,CAAgB,WAAW,CAAC,GAA5B,EADF,CADF,cAIE,oBAAC,IAAD,EAAM,EAAE,CAAE,CAAV,mBAJF,CADF,cAOE,oBAAC,kBAAD,kBACMjB,KADN,EAEE,UAAU,CAAEM,UAFd,CAGE,IAAI,CAAEN,KAAK,CAACO,IAHd,GAPF,CADF,CAeD","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Box,\n  FormControl,\n  FormLabel,\n  Input,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Text,\n  useDisclosure\n} from '@chakra-ui/react';\nimport { Plus } from 'react-feather';\nimport { MinterButton } from '../../common/index';\nimport { useDispatch } from '../../../reducer';\nimport { transferTokenAction } from '../../../reducer/async/actions';\nimport FormModal, { BaseModalProps, BaseModalButtonProps } from './FormModal';\n\ninterface TransferTokenModalProps extends BaseModalProps {\n  contractAddress: string;\n  tokenId: number;\n}\n\nexport function TransferTokenModal(props: TransferTokenModalProps) {\n  const [toAddress, setToAddress] = useState('');\n  const dispatch = useDispatch();\n  const initialRef = React.useRef(null);\n  return (\n    <FormModal\n      disclosure={props.disclosure}\n      sync={props.sync}\n      method=\"transferToken\"\n      dispatchThunk={() =>\n        dispatch(\n          transferTokenAction({\n            contract: props.contractAddress,\n            tokenId: props.tokenId,\n            to: toAddress\n          })\n        )\n      }\n      onComplete={() => setToAddress('')}\n      initialRef={initialRef}\n      pendingMessage=\"Transferring token...\"\n      completeMessage=\"Transfer complete\"\n      body={onSubmit => (\n        <>\n          <ModalHeader>Transfer Token</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <FormControl>\n              <FormLabel fontFamily=\"mono\">To Address</FormLabel>\n              <Input\n                autoFocus={true}\n                ref={initialRef}\n                placeholder=\"Input token recipient\"\n                value={toAddress}\n                onChange={e => setToAddress(e.target.value)}\n              />\n            </FormControl>\n          </ModalBody>\n\n          <ModalFooter>\n            <MinterButton variant=\"primaryAction\" onClick={() => onSubmit()}>\n              Transfer\n            </MinterButton>\n          </ModalFooter>\n        </>\n      )}\n    />\n  );\n}\n\ninterface TransferTokenButtonProps extends BaseModalButtonProps {\n  contractAddress: string;\n  tokenId: number;\n}\n\nexport function TransferTokenButton(props: TransferTokenButtonProps) {\n  const disclosure = useDisclosure();\n  return (\n    <>\n      <MinterButton variant=\"primaryAction\" onClick={disclosure.onOpen}>\n        <Box color=\"currentcolor\">\n          <Plus size={16} strokeWidth=\"3\" />\n        </Box>\n        <Text ml={2}>Transfer Token</Text>\n      </MinterButton>\n      <TransferTokenModal\n        {...props}\n        disclosure={disclosure}\n        sync={props.sync}\n      />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}