import { address, BigMap, bytes, contract, MMap, nat, unit } from './type-aliases';
declare type Storage = {
    admin: {
        admins: Array<address>;
        paused: boolean;
        pending_admins: BigMap<address, unit>;
    };
    assets: {
        ledger: BigMap<{
            0: address;
            1: nat;
        }, nat>;
        operators: BigMap<{
            0: address;
            1: address;
            2: nat;
        }, unit>;
        token_metadata: BigMap<nat, {
            token_id: nat;
            token_info: MMap<string, bytes>;
        }>;
        token_total_supply: BigMap<nat, nat>;
    };
    metadata: BigMap<string, bytes>;
};
declare type Methods = {
    confirm_admin: () => Promise<void>;
    pause: (param: boolean) => Promise<void>;
    remove_admin: (param: address) => Promise<void>;
    set_admin: (param: address) => Promise<void>;
    balance_of: (requests: Array<{
        owner: address;
        token_id: nat;
    }>, callback: contract) => Promise<void>;
    transfer: (param: Array<{
        from_: address;
        txs: Array<{
            to_: address;
            token_id: nat;
            amount: nat;
        }>;
    }>) => Promise<void>;
    add_operator: (owner: address, operator: address, token_id: nat) => Promise<void>;
    remove_operator: (owner: address, operator: address, token_id: nat) => Promise<void>;
    burn_tokens: (param: Array<{
        owner: address;
        token_id: nat;
        amount: nat;
    }>) => Promise<void>;
    create_token: (token_id: nat, token_info: MMap<string, bytes>) => Promise<void>;
    mint_tokens: (param: Array<{
        owner: address;
        token_id: nat;
        amount: nat;
    }>) => Promise<void>;
};
export declare type Fa2MultiFtAssetMultiAdminContractType = {
    methods: Methods;
    storage: Storage;
    code: {
        __type: 'Fa2MultiFtAssetMultiAdminCode';
        protocol: string;
        code: object[];
    };
};
export {};
